{
"version":3,
"file":"build/libv86.js",
"lineCount":571,
"mappings":"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unB,C0BqKP,CAAZ,CACApW,EAAA,CCpFiB1vD,CDoFjB,CCpFiBA,CDoFLu+C,EAAA,C1BrKOkc,C0BqKP,CAAZ,CACA/K,EAAA,CCrFiB1vD,CDqFjB,CCrFiBA,CDqFLu+C,EAAA,C1BrKO2qB,C0BqKP,CAAZ,CACAxZ,EAAA,CCtFiB1vD,CDsFjB,CCtFiBA,CDsFLu+C,EAAA,C1BrKO6c,C0BqKP,CAAZ,CACA1L,EAAA,CCvFiB1vD,CDuFjB,CAAY6lE,CAAZ,CACAnW,EAAA,CCxFiB1vD,CDwFjB,CCxFiBA,CDwFLu+C,EAAA,C1BrKOid,E0BqKP,CAAZ,CACA9L,EAAA,CCzFiB1vD,CDyFjB,CCzFiBA,CDyFLu+C,EAAA,C1BrKO8c,E0BqKP,CAAZ,CACA3L,EAAA,CC1FiB1vD,CD0FjB,CC1FiBA,CD0FLu+C,EAAA,C1BrKO+c,E0BqKP,CAAZ,CC1Fe,CACnBiL,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAAvmE,CAAA,CAAO,CD8Ff,IAAI6lE,EC9Fa7lE,CD8FNo+C,EAAA,C1BtLS2M,C0BsLT,CAEX38C,GAAA,CChGiBpO,CDgGjB,CAA2B2wD,CAAA,CChGV3wD,CDgGU,CAAwB,GAAxB,CAA3B,CAAwD,EAAxD,CAEA2vD,EAAA,CClGiB3vD,CDkGjB,CClGiBA,CDkGLo+C,EAAA,C1B9LQyE,C0B8LR,CAAZ,CACA8M,EAAA,CCnGiB3vD,CDmGjB,CCnGiBA,CDmGLo+C,EAAA,C1B9LQ8O,C0B8LR,CAAZ,CACAyC,EAAA,CCpGiB3vD,CDoGjB,CCpGiBA,CDoGLo+C,EAAA,C1B9LQgP,C0B8LR,CAAZ,CACAuC,EAAA,CCrGiB3vD,CDqGjB,CCrGiBA,CDqGLo+C,EAAA,C1B9LQ0E,C0B8LR,CAAZ,CACA6M,EAAA,CCtGiB3vD,CDsGjB,CAAY6lE,CAAZ,CACAlW,EAAA,CCvGiB3vD,CDuGjB,CCvGiBA,CDuGLo+C,EAAA,C1B9LQoP,C0B8LR,CAAZ,CACAmC,EAAA,CCxGiB3vD,CDwGjB,CCxGiBA,CDwGLo+C,EAAA,C1B9LQsP,C0B8LR,CAAZ,CACAiC,EAAA,CCzGiB3vD,CDyGjB,CC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",
"sources":["lib/closure-base.js"," [synthetic:es6/util/arrayiterator] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:util/polyfill] "," [synthetic:es6/math/trunc] "," [synthetic:es6/symbol] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] "," [synthetic:util/owns] "," [synthetic:es6/weakmap] "," [synthetic:es6/map] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/construct] "," [synthetic:es6/reflect/construct] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/reflect/setprototypeof] ","src/browser/screen.js","lib/9p.js","lib/filesystem.js","src/io.js","src/const.js","src/main.js","src/cpu.js","src/config.js","src/lib.js","src/sb16.js","src/fpu.js","src/ide.js","src/rtc.js","src/memory.js","src/pci.js","src/floppy.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/uart.js","src/state.js","src/ne2k.js","src/virtio.js","lib/jor1k.js","src/bus.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/starter.js","src/browser/dummy_screen.js","lib/marshall.js","lib/utf8.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n/**\r\n * @fileoverview Bootstrap for the Google JS Library (Closure).\r\n *\r\n * In uncompiled mode base.js will write out Closure's deps file, unless the\r\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\r\n * include their own deps file(s) from different locations.\r\n *\r\n * @author arv@google.com (Erik Arvidsson)\r\n *\r\n * @provideGoog\r\n */\r\n\r\n\r\n/**\r\n * @define {boolean} Overridden to true by the compiler when --closure_pass\r\n *     or --mark_as_compiled is specified.\r\n */\r\nvar COMPILED = false;\r\n\r\n\r\n/**\r\n * Base namespace for the Closure library.  Checks to see goog is already\r\n * defined in the current scope before assigning to prevent clobbering if\r\n * base.js is loaded more than once.\r\n *\r\n * @const\r\n */\r\nvar goog = goog || {};\r\n\r\n\r\n/**\r\n * Reference to the global context.  In most cases this will be 'window'.\r\n */\r\ngoog.global = this;\r\n\r\n\r\n/**\r\n * A hook for overriding the define values in uncompiled mode.\r\n *\r\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\r\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\r\n * {@code goog.define} will use the value instead of the default value.  This\r\n * allows flags to be overwritten without compilation (this is normally\r\n * accomplished with the compiler's \"define\" flag).\r\n *\r\n * Example:\r\n * <pre>\r\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\r\n * </pre>\r\n *\r\n * @type {Object<string, (string|number|boolean)>|undefined}\r\n */\r\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\r\n\r\n\r\n/**\r\n * A hook for overriding the define values in uncompiled or compiled mode,\r\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\r\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\r\n *\r\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\r\n * string literals or the compiler will emit an error.\r\n *\r\n * While any @define value may be set, only those set with goog.define will be\r\n * effective for uncompiled code.\r\n *\r\n * Example:\r\n * <pre>\r\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\r\n * </pre>\r\n *\r\n * @type {Object<string, (string|number|boolean)>|undefined}\r\n */\r\ngoog.global.CLOSURE_DEFINES;\r\n\r\n\r\n/**\r\n * Returns true if the specified value is not undefined.\r\n * WARNING: Do not use this to test if an object has a property. Use the in\r\n * operator instead.\r\n *\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is defined.\r\n */\r\ngoog.isDef = function(val) {\r\n  // void 0 always evaluates to undefined and hence we do not need to depend on\r\n  // the definition of the global variable named 'undefined'.\r\n  return val !== void 0;\r\n};\r\n\r\n\r\n/**\r\n * Builds an object structure for the provided namespace path, ensuring that\r\n * names that already exist are not overwritten. For example:\r\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\r\n * Used by goog.provide and goog.exportSymbol.\r\n * @param {string} name name of the object that this file defines.\r\n * @param {*=} opt_object the object to expose at the end of the path.\r\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\r\n *     is |goog.global|.\r\n * @private\r\n */\r\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\r\n  var parts = name.split('.');\r\n  var cur = opt_objectToExportTo || goog.global;\r\n\r\n  // Internet Explorer exhibits strange behavior when throwing errors from\r\n  // methods externed in this manner.  See the testExportSymbolExceptions in\r\n  // base_test.html for an example.\r\n  if (!(parts[0] in cur) && cur.execScript) {\r\n    cur.execScript('var ' + parts[0]);\r\n  }\r\n\r\n  // Certain browsers cannot parse code in the form for((a in b); c;);\r\n  // This pattern is produced by the JSCompiler when it collapses the\r\n  // statement above into the conditional loop below. To prevent this from\r\n  // happening, use a for-loop and reserve the init logic as below.\r\n\r\n  // Parentheses added to eliminate strict JS warning in Firefox.\r\n  for (var part; parts.length && (part = parts.shift());) {\r\n    if (!parts.length && goog.isDef(opt_object)) {\r\n      // last part and we have an object; use it\r\n      cur[part] = opt_object;\r\n    } else if (cur[part]) {\r\n      cur = cur[part];\r\n    } else {\r\n      cur = cur[part] = {};\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Defines a named value. In uncompiled mode, the value is retrieved from\r\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\r\n * has the property specified, and otherwise used the defined defaultValue.\r\n * When compiled the default can be overridden using the compiler\r\n * options or the value set in the CLOSURE_DEFINES object.\r\n *\r\n * @param {string} name The distinguished name to provide.\r\n * @param {string|number|boolean} defaultValue\r\n */\r\ngoog.define = function(name, defaultValue) {\r\n  var value = defaultValue;\r\n  if (!COMPILED) {\r\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\r\n        Object.prototype.hasOwnProperty.call(\r\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\r\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\r\n    } else if (goog.global.CLOSURE_DEFINES &&\r\n        Object.prototype.hasOwnProperty.call(\r\n            goog.global.CLOSURE_DEFINES, name)) {\r\n      value = goog.global.CLOSURE_DEFINES[name];\r\n    }\r\n  }\r\n  goog.exportPath_(name, value);\r\n};\r\n\r\n\r\n/**\r\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\r\n * that should not be included in a production js_binary can be easily stripped\r\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\r\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\r\n * because they are generally used for debugging purposes and it is difficult\r\n * for the JSCompiler to statically determine whether they are used.\r\n */\r\ngoog.define('goog.DEBUG', true);\r\n\r\n\r\n/**\r\n * @define {string} LOCALE defines the locale being used for compilation. It is\r\n * used to select locale specific data to be compiled in js binary. BUILD rule\r\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\r\n * option.\r\n *\r\n * Take into account that the locale code format is important. You should use\r\n * the canonical Unicode format with hyphen as a delimiter. Language must be\r\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\r\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\r\n *\r\n * See more info about locale codes here:\r\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\r\n *\r\n * For language codes you should use values defined by ISO 693-1. See it here\r\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\r\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\r\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\r\n */\r\ngoog.define('goog.LOCALE', 'en');  // default to en\r\n\r\n\r\n/**\r\n * @define {boolean} Whether this code is running on trusted sites.\r\n *\r\n * On untrusted sites, several native functions can be defined or overridden by\r\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\r\n * to false forces closure to use its own implementations when possible.\r\n *\r\n * If your JavaScript can be loaded by a third party site and you are wary about\r\n * relying on non-standard implementations, specify\r\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\r\n */\r\ngoog.define('goog.TRUSTED_SITE', true);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether a project is expected to be running in strict mode.\r\n *\r\n * This define can be used to trigger alternate implementations compatible with\r\n * running in EcmaScript Strict mode or warn about unavailable functionality.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\r\n *\r\n */\r\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\r\n *     be disallowed in the compilation unit.\r\n */\r\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\r\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\r\n */\r\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\r\n\r\n\r\n/**\r\n * Defines a namespace in Closure.\r\n *\r\n * A namespace may only be defined once in a codebase. It may be defined using\r\n * goog.provide() or goog.module().\r\n *\r\n * The presence of one or more goog.provide() calls in a file indicates\r\n * that the file defines the given objects/namespaces.\r\n * Provided symbols must not be null or undefined.\r\n *\r\n * In addition, goog.provide() creates the object stubs for a namespace\r\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\r\n * goog.foo.bar if it does not already exist).\r\n *\r\n * Build tools also scan for provide/require/module statements\r\n * to discern dependencies, build dependency files (see deps.js), etc.\r\n *\r\n * @see goog.require\r\n * @see goog.module\r\n * @param {string} name Namespace provided by this file in the form\r\n *     \"goog.package.part\".\r\n */\r\ngoog.provide = function(name) {\r\n  if (!COMPILED) {\r\n    // Ensure that the same namespace isn't provided twice.\r\n    // A goog.module/goog.provide maps a goog.require to a specific file\r\n    if (goog.isProvided_(name)) {\r\n      throw Error('Namespace \"' + name + '\" already declared.');\r\n    }\r\n  }\r\n\r\n  goog.constructNamespace_(name);\r\n};\r\n\r\n\r\n/**\r\n * @param {string} name Namespace provided by this file in the form\r\n *     \"goog.package.part\".\r\n * @param {Object=} opt_obj The object to embed in the namespace.\r\n * @private\r\n */\r\ngoog.constructNamespace_ = function(name, opt_obj) {\r\n  if (!COMPILED) {\r\n    delete goog.implicitNamespaces_[name];\r\n\r\n    var namespace = name;\r\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\r\n      if (goog.getObjectByName(namespace)) {\r\n        break;\r\n      }\r\n      goog.implicitNamespaces_[namespace] = true;\r\n    }\r\n  }\r\n\r\n  goog.exportPath_(name, opt_obj);\r\n};\r\n\r\n\r\n/**\r\n * Module identifier validation regexp.\r\n * Note: This is a conservative check, it is very possible to be more lenient,\r\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\r\n *   restrictions are intended to leave the door open for using goog.require\r\n *   with relative file paths rather than module identifiers.\r\n * @private\r\n */\r\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\r\n\r\n\r\n/**\r\n * Defines a module in Closure.\r\n *\r\n * Marks that this file must be loaded as a module and claims the namespace.\r\n *\r\n * A namespace may only be defined once in a codebase. It may be defined using\r\n * goog.provide() or goog.module().\r\n *\r\n * goog.module() has three requirements:\r\n * - goog.module may not be used in the same file as goog.provide.\r\n * - goog.module must be the first statement in the file.\r\n * - only one goog.module is allowed per file.\r\n *\r\n * When a goog.module annotated file is loaded, it is enclosed in\r\n * a strict function closure. This means that:\r\n * - any variables declared in a goog.module file are private to the file\r\n * (not global), though the compiler is expected to inline the module.\r\n * - The code must obey all the rules of \"strict\" JavaScript.\r\n * - the file will be marked as \"use strict\"\r\n *\r\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\r\n * itself. If declared symbols are desired, use\r\n * goog.module.declareLegacyNamespace().\r\n *\r\n *\r\n * See the public goog.module proposal: http://goo.gl/Va1hin\r\n *\r\n * @param {string} name Namespace provided by this file in the form\r\n *     \"goog.package.part\", is expected but not required.\r\n */\r\ngoog.module = function(name) {\r\n  if (!goog.isString(name) ||\r\n      !name ||\r\n      name.search(goog.VALID_MODULE_RE_) == -1) {\r\n    throw Error('Invalid module identifier');\r\n  }\r\n  if (!goog.isInModuleLoader_()) {\r\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\r\n  }\r\n  if (goog.moduleLoaderState_.moduleName) {\r\n    throw Error('goog.module may only be called once per module.');\r\n  }\r\n\r\n  // Store the module name for the loader.\r\n  goog.moduleLoaderState_.moduleName = name;\r\n  if (!COMPILED) {\r\n    // Ensure that the same namespace isn't provided twice.\r\n    // A goog.module/goog.provide maps a goog.require to a specific file\r\n    if (goog.isProvided_(name)) {\r\n      throw Error('Namespace \"' + name + '\" already declared.');\r\n    }\r\n    delete goog.implicitNamespaces_[name];\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @param {string} name The module identifier.\r\n * @return {?} The module exports for an already loaded module or null.\r\n *\r\n * Note: This is not an alternative to goog.require, it does not\r\n * indicate a hard dependency, instead it is used to indicate\r\n * an optional dependency or to access the exports of a module\r\n * that has already been loaded.\r\n * @suppress {missingProvide}\r\n */\r\ngoog.module.get = function(name) {\r\n  return goog.module.getInternal_(name);\r\n};\r\n\r\n\r\n/**\r\n * @param {string} name The module identifier.\r\n * @return {?} The module exports for an already loaded module or null.\r\n * @private\r\n */\r\ngoog.module.getInternal_ = function(name) {\r\n  if (!COMPILED) {\r\n    if (goog.isProvided_(name)) {\r\n      // goog.require only return a value with-in goog.module files.\r\n      return name in goog.loadedModules_ ?\r\n          goog.loadedModules_[name] :\r\n          goog.getObjectByName(name);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @private {?{\r\n *   moduleName: (string|undefined),\r\n *   declareTestMethods: boolean\r\n * }}\r\n */\r\ngoog.moduleLoaderState_ = null;\r\n\r\n\r\n/**\r\n * @private\r\n * @return {boolean} Whether a goog.module is currently being initialized.\r\n */\r\ngoog.isInModuleLoader_ = function() {\r\n  return goog.moduleLoaderState_ != null;\r\n};\r\n\r\n\r\n/**\r\n * Indicate that a module's exports that are known test methods should\r\n * be copied to the global object.  This makes the test methods visible to\r\n * test runners that inspect the global object.\r\n *\r\n * TODO(johnlenz): Make the test framework aware of goog.module so\r\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\r\n * to minimize boiler plate.\r\n * @suppress {missingProvide}\r\n * @deprecated This approach does not translate to ES6 module syntax, instead\r\n *    use goog.testing.testSuite to declare the test methods.\r\n */\r\ngoog.module.declareTestMethods = function() {\r\n  if (!goog.isInModuleLoader_()) {\r\n    throw new Error('goog.module.declareTestMethods must be called from ' +\r\n        'within a goog.module');\r\n  }\r\n  goog.moduleLoaderState_.declareTestMethods = true;\r\n};\r\n\r\n\r\n/**\r\n * Provide the module's exports as a globally accessible object under the\r\n * module's declared name.  This is intended to ease migration to goog.module\r\n * for files that have existing usages.\r\n * @suppress {missingProvide}\r\n */\r\ngoog.module.declareLegacyNamespace = function() {\r\n  if (!COMPILED && !goog.isInModuleLoader_()) {\r\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\r\n        'within a goog.module');\r\n  }\r\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\r\n    throw Error('goog.module must be called prior to ' +\r\n        'goog.module.declareLegacyNamespace.');\r\n  }\r\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\r\n};\r\n\r\n\r\n/**\r\n * Marks that the current file should only be used for testing, and never for\r\n * live code in production.\r\n *\r\n * In the case of unit tests, the message may optionally be an exact namespace\r\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\r\n * provide (if not explicitly defined in the code).\r\n *\r\n * @param {string=} opt_message Optional message to add to the error that's\r\n *     raised when used in production code.\r\n */\r\ngoog.setTestOnly = function(opt_message) {\r\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\r\n    opt_message = opt_message || '';\r\n    throw Error('Importing test-only code into non-debug environment' +\r\n                (opt_message ? ': ' + opt_message : '.'));\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Forward declares a symbol. This is an indication to the compiler that the\r\n * symbol may be used in the source yet is not required and may not be provided\r\n * in compilation.\r\n *\r\n * The most common usage of forward declaration is code that takes a type as a\r\n * function parameter but does not need to require it. By forward declaring\r\n * instead of requiring, no hard dependency is made, and (if not required\r\n * elsewhere) the namespace may never be required and thus, not be pulled\r\n * into the JavaScript binary. If it is required elsewhere, it will be type\r\n * checked as normal.\r\n *\r\n *\r\n * @param {string} name The namespace to forward declare in the form of\r\n *     \"goog.package.part\".\r\n */\r\ngoog.forwardDeclare = function(name) {};\r\n\r\n\r\nif (!COMPILED) {\r\n\r\n  /**\r\n   * Check if the given name has been goog.provided. This will return false for\r\n   * names that are available only as implicit namespaces.\r\n   * @param {string} name name of the object to look for.\r\n   * @return {boolean} Whether the name has been provided.\r\n   * @private\r\n   */\r\n  goog.isProvided_ = function(name) {\r\n    return (name in goog.loadedModules_) ||\r\n        (!goog.implicitNamespaces_[name] &&\r\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\r\n  };\r\n\r\n  /**\r\n   * Namespaces implicitly defined by goog.provide. For example,\r\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\r\n   * 'goog.events' must be namespaces.\r\n   *\r\n   * @type {!Object<string, (boolean|undefined)>}\r\n   * @private\r\n   */\r\n  goog.implicitNamespaces_ = {'goog.module': true};\r\n\r\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\r\n  // here and because the existing module package has not been moved yet out of\r\n  // the goog.module namespace. This satisifies both the debug loader and\r\n  // ahead-of-time dependency management.\r\n}\r\n\r\n\r\n/**\r\n * Returns an object based on its fully qualified external name.  The object\r\n * is not found if null or undefined.  If you are using a compilation pass that\r\n * renames property names beware that using this function will not find renamed\r\n * properties.\r\n *\r\n * @param {string} name The fully qualified name.\r\n * @param {Object=} opt_obj The object within which to look; default is\r\n *     |goog.global|.\r\n * @return {?} The value (object or primitive) or, if not found, null.\r\n */\r\ngoog.getObjectByName = function(name, opt_obj) {\r\n  var parts = name.split('.');\r\n  var cur = opt_obj || goog.global;\r\n  for (var part; part = parts.shift(); ) {\r\n    if (goog.isDefAndNotNull(cur[part])) {\r\n      cur = cur[part];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return cur;\r\n};\r\n\r\n\r\n/**\r\n * Globalizes a whole namespace, such as goog or goog.lang.\r\n *\r\n * @param {!Object} obj The namespace to globalize.\r\n * @param {Object=} opt_global The object to add the properties to.\r\n * @deprecated Properties may be explicitly exported to the global scope, but\r\n *     this should no longer be done in bulk.\r\n */\r\ngoog.globalize = function(obj, opt_global) {\r\n  var global = opt_global || goog.global;\r\n  for (var x in obj) {\r\n    global[x] = obj[x];\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Adds a dependency from a file to the files it requires.\r\n * @param {string} relPath The path to the js file.\r\n * @param {!Array<string>} provides An array of strings with\r\n *     the names of the objects this file provides.\r\n * @param {!Array<string>} requires An array of strings with\r\n *     the names of the objects this file requires.\r\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\r\n *     a module as declared by goog.module.\r\n */\r\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\r\n  if (goog.DEPENDENCIES_ENABLED) {\r\n    var provide, require;\r\n    var path = relPath.replace(/\\\\/g, '/');\r\n    var deps = goog.dependencies_;\r\n    for (var i = 0; provide = provides[i]; i++) {\r\n      deps.nameToPath[provide] = path;\r\n      deps.pathIsModule[path] = !!opt_isModule;\r\n    }\r\n    for (var j = 0; require = requires[j]; j++) {\r\n      if (!(path in deps.requires)) {\r\n        deps.requires[path] = {};\r\n      }\r\n      deps.requires[path][require] = true;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\r\n// to do \"debug-mode\" development.  The dependency system can sometimes be\r\n// confusing, as can the debug DOM loader's asynchronous nature.\r\n//\r\n// With the DOM loader, a call to goog.require() is not blocking -- the script\r\n// will not load until some point after the current script.  If a namespace is\r\n// needed at runtime, it needs to be defined in a previous script, or loaded via\r\n// require() with its registered dependencies.\r\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\r\n// http://go/genjsdeps, or, externally, DepsWriter.\r\n// https://developers.google.com/closure/library/docs/depswriter\r\n//\r\n// Because of legacy clients, the DOM loader can't be easily removed from\r\n// base.js.  Work is being done to make it disableable or replaceable for\r\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\r\n// for example). See bootstrap/ for more information.\r\n\r\n\r\n/**\r\n * @define {boolean} Whether to enable the debug loader.\r\n *\r\n * If enabled, a call to goog.require() will attempt to load the namespace by\r\n * appending a script tag to the DOM (if the namespace has been registered).\r\n *\r\n * If disabled, goog.require() will simply assert that the namespace has been\r\n * provided (and depend on the fact that some outside tool correctly ordered\r\n * the script).\r\n */\r\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\r\n\r\n\r\n/**\r\n * @param {string} msg\r\n * @private\r\n */\r\ngoog.logToConsole_ = function(msg) {\r\n  if (goog.global.console) {\r\n    goog.global.console['error'](msg);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Implements a system for the dynamic resolution of dependencies that works in\r\n * parallel with the BUILD system. Note that all calls to goog.require will be\r\n * stripped by the JSCompiler when the --closure_pass option is used.\r\n * @see goog.provide\r\n * @param {string} name Namespace to include (as was given in goog.provide()) in\r\n *     the form \"goog.package.part\".\r\n * @return {?} If called within a goog.module file, the associated namespace or\r\n *     module otherwise null.\r\n */\r\ngoog.require = function(name) {\r\n\r\n  // If the object already exists we do not need do do anything.\r\n  if (!COMPILED) {\r\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\r\n      goog.maybeProcessDeferredDep_(name);\r\n    }\r\n\r\n    if (goog.isProvided_(name)) {\r\n      if (goog.isInModuleLoader_()) {\r\n        return goog.module.getInternal_(name);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (goog.ENABLE_DEBUG_LOADER) {\r\n      var path = goog.getPathFromDeps_(name);\r\n      if (path) {\r\n        goog.included_[path] = true;\r\n        goog.writeScripts_();\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var errorMessage = 'goog.require could not find: ' + name;\r\n    goog.logToConsole_(errorMessage);\r\n\r\n    throw Error(errorMessage);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Path for included scripts.\r\n * @type {string}\r\n */\r\ngoog.basePath = '';\r\n\r\n\r\n/**\r\n * A hook for overriding the base path.\r\n * @type {string|undefined}\r\n */\r\ngoog.global.CLOSURE_BASE_PATH;\r\n\r\n\r\n/**\r\n * Whether to write out Closure's deps file. By default, the deps are written.\r\n * @type {boolean|undefined}\r\n */\r\ngoog.global.CLOSURE_NO_DEPS;\r\n\r\n\r\n/**\r\n * A function to import a single script. This is meant to be overridden when\r\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\r\n * in the global scope so that it can be set before base.js is loaded, which\r\n * allows deps.js to be imported properly.\r\n *\r\n * The function is passed the script source, which is a relative URI. It should\r\n * return true if the script was imported, false otherwise.\r\n * @type {(function(string): boolean)|undefined}\r\n */\r\ngoog.global.CLOSURE_IMPORT_SCRIPT;\r\n\r\n\r\n/**\r\n * Null function used for default values of callbacks, etc.\r\n * @return {void} Nothing.\r\n */\r\ngoog.nullFunction = function() {};\r\n\r\n\r\n\r\n/**\r\n * When defining a class Foo with an abstract method bar(), you can do:\r\n * Foo.prototype.bar = goog.abstractMethod\r\n *\r\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\r\n * when bar() is invoked.\r\n *\r\n * Note: This does not take the name of the function to override as an argument\r\n * because that would make it more difficult to obfuscate our JavaScript code.\r\n *\r\n * @type {!Function}\r\n * @throws {Error} when invoked to indicate the method should be overridden.\r\n */\r\ngoog.abstractMethod = function() {\r\n  throw Error('unimplemented abstract method');\r\n};\r\n\r\n\r\n/**\r\n * Adds a {@code getInstance} static method that always returns the same\r\n * instance object.\r\n * @param {!Function} ctor The constructor for the class to add the static\r\n *     method to.\r\n */\r\ngoog.addSingletonGetter = function(ctor) {\r\n  ctor.getInstance = function() {\r\n    if (ctor.instance_) {\r\n      return ctor.instance_;\r\n    }\r\n    if (goog.DEBUG) {\r\n      // NOTE: JSCompiler can't optimize away Array#push.\r\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\r\n    }\r\n    return ctor.instance_ = new ctor;\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * All singleton classes that have been instantiated, for testing. Don't read\r\n * it directly, use the {@code goog.testing.singleton} module. The compiler\r\n * removes this variable if unused.\r\n * @type {!Array<!Function>}\r\n * @private\r\n */\r\ngoog.instantiatedSingletons_ = [];\r\n\r\n\r\n/**\r\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\r\n * the debug loader.  This provides a better debugging experience as the\r\n * source is unmodified and can be edited using Chrome Workspaces or similar.\r\n * However in some environments the use of {@code eval} is banned\r\n * so we provide an alternative.\r\n */\r\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether the exports of goog.modules should be sealed when\r\n * possible.\r\n */\r\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\r\n\r\n\r\n/**\r\n * The registry of initialized modules:\r\n * the module identifier to module exports map.\r\n * @private @const {!Object<string, ?>}\r\n */\r\ngoog.loadedModules_ = {};\r\n\r\n\r\n/**\r\n * True if goog.dependencies_ is available.\r\n * @const {boolean}\r\n */\r\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\r\n\r\n\r\nif (goog.DEPENDENCIES_ENABLED) {\r\n  /**\r\n   * Object used to keep track of urls that have already been added. This record\r\n   * allows the prevention of circular dependencies.\r\n   * @private {!Object<string, boolean>}\r\n   */\r\n  goog.included_ = {};\r\n\r\n\r\n  /**\r\n   * This object is used to keep track of dependencies and other data that is\r\n   * used for loading scripts.\r\n   * @private\r\n   * @type {{\r\n   *   pathIsModule: !Object<string, boolean>,\r\n   *   nameToPath: !Object<string, string>,\r\n   *   requires: !Object<string, !Object<string, boolean>>,\r\n   *   visited: !Object<string, boolean>,\r\n   *   written: !Object<string, boolean>,\r\n   *   deferred: !Object<string, string>\r\n   * }}\r\n   */\r\n  goog.dependencies_ = {\r\n    pathIsModule: {}, // 1 to 1\r\n\r\n    nameToPath: {}, // 1 to 1\r\n\r\n    requires: {}, // 1 to many\r\n\r\n    // Used when resolving dependencies to prevent us from visiting file twice.\r\n    visited: {},\r\n\r\n    written: {}, // Used to keep track of script files we have written.\r\n\r\n    deferred: {} // Used to track deferred module evaluations in old IEs\r\n  };\r\n\r\n\r\n  /**\r\n   * Tries to detect whether is in the context of an HTML document.\r\n   * @return {boolean} True if it looks like HTML document.\r\n   * @private\r\n   */\r\n  goog.inHtmlDocument_ = function() {\r\n    var doc = goog.global.document;\r\n    return typeof doc != 'undefined' &&\r\n           'write' in doc;  // XULDocument misses write.\r\n  };\r\n\r\n\r\n  /**\r\n   * Tries to detect the base path of base.js script that bootstraps Closure.\r\n   * @private\r\n   */\r\n  goog.findBasePath_ = function() {\r\n    if (goog.global.CLOSURE_BASE_PATH) {\r\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\r\n      return;\r\n    } else if (!goog.inHtmlDocument_()) {\r\n      return;\r\n    }\r\n    var doc = goog.global.document;\r\n    var scripts = doc.getElementsByTagName('SCRIPT');\r\n    // Search backwards since the current script is in almost all cases the one\r\n    // that has base.js.\r\n    for (var i = scripts.length - 1; i >= 0; --i) {\r\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\r\n      var src = script.src;\r\n      var qmark = src.lastIndexOf('?');\r\n      var l = qmark == -1 ? src.length : qmark;\r\n      if (src.substr(l - 7, 7) == 'base.js') {\r\n        goog.basePath = src.substr(0, l - 7);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Imports a script if, and only if, that script hasn't already been imported.\r\n   * (Must be called at execution time)\r\n   * @param {string} src Script source.\r\n   * @param {string=} opt_sourceText The optionally source text to evaluate\r\n   * @private\r\n   */\r\n  goog.importScript_ = function(src, opt_sourceText) {\r\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\r\n        goog.writeScriptTag_;\r\n    if (importScript(src, opt_sourceText)) {\r\n      goog.dependencies_.written[src] = true;\r\n    }\r\n  };\r\n\r\n\r\n  /** @const @private {boolean} */\r\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\r\n      goog.global.document.all;\r\n\r\n\r\n  /**\r\n   * Given a URL initiate retrieval and execution of the module.\r\n   * @param {string} src Script source URL.\r\n   * @private\r\n   */\r\n  goog.importModule_ = function(src) {\r\n    // In an attempt to keep browsers from timing out loading scripts using\r\n    // synchronous XHRs, put each load in its own script block.\r\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\r\n\r\n    if (goog.importScript_('', bootstrap)) {\r\n      goog.dependencies_.written[src] = true;\r\n    }\r\n  };\r\n\r\n\r\n  /** @private {!Array<string>} */\r\n  goog.queuedModules_ = [];\r\n\r\n\r\n  /**\r\n   * Return an appropriate module text. Suitable to insert into\r\n   * a script tag (that is unescaped).\r\n   * @param {string} srcUrl\r\n   * @param {string} scriptText\r\n   * @return {string}\r\n   * @private\r\n   */\r\n  goog.wrapModule_ = function(srcUrl, scriptText) {\r\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\r\n      return '' +\r\n          'goog.loadModule(function(exports) {' +\r\n          '\"use strict\";' +\r\n          scriptText +\r\n          '\\n' + // terminate any trailing single line comment.\r\n          ';return exports' +\r\n          '});' +\r\n          '\\n//# sourceURL=' + srcUrl + '\\n';\r\n    } else {\r\n      return '' +\r\n          'goog.loadModule(' +\r\n          goog.global.JSON.stringify(\r\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\r\n          ');';\r\n    }\r\n  };\r\n\r\n  // On IE9 and earlier, it is necessary to handle\r\n  // deferred module loads. In later browsers, the\r\n  // code to be evaluated is simply inserted as a script\r\n  // block in the correct order. To eval deferred\r\n  // code at the right time, we piggy back on goog.require to call\r\n  // goog.maybeProcessDeferredDep_.\r\n  //\r\n  // The goog.requires are used both to bootstrap\r\n  // the loading process (when no deps are available) and\r\n  // declare that they should be available.\r\n  //\r\n  // Here we eval the sources, if all the deps are available\r\n  // either already eval'd or goog.require'd.  This will\r\n  // be the case when all the dependencies have already\r\n  // been loaded, and the dependent module is loaded.\r\n  //\r\n  // But this alone isn't sufficient because it is also\r\n  // necessary to handle the case where there is no root\r\n  // that is not deferred.  For that there we register for an event\r\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\r\n  // evaluations.\r\n\r\n  /**\r\n   * Handle any remaining deferred goog.module evals.\r\n   * @private\r\n   */\r\n  goog.loadQueuedModules_ = function() {\r\n    var count = goog.queuedModules_.length;\r\n    if (count > 0) {\r\n      var queue = goog.queuedModules_;\r\n      goog.queuedModules_ = [];\r\n      for (var i = 0; i < count; i++) {\r\n        var path = queue[i];\r\n        goog.maybeProcessDeferredPath_(path);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Eval the named module if its dependencies are\r\n   * available.\r\n   * @param {string} name The module to load.\r\n   * @private\r\n   */\r\n  goog.maybeProcessDeferredDep_ = function(name) {\r\n    if (goog.isDeferredModule_(name) &&\r\n        goog.allDepsAreAvailable_(name)) {\r\n      var path = goog.getPathFromDeps_(name);\r\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @param {string} name The module to check.\r\n   * @return {boolean} Whether the name represents a\r\n   *     module whose evaluation has been deferred.\r\n   * @private\r\n   */\r\n  goog.isDeferredModule_ = function(name) {\r\n    var path = goog.getPathFromDeps_(name);\r\n    if (path && goog.dependencies_.pathIsModule[path]) {\r\n      var abspath = goog.basePath + path;\r\n      return (abspath) in goog.dependencies_.deferred;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * @param {string} name The module to check.\r\n   * @return {boolean} Whether the name represents a\r\n   *     module whose declared dependencies have all been loaded\r\n   *     (eval'd or a deferred module load)\r\n   * @private\r\n   */\r\n  goog.allDepsAreAvailable_ = function(name) {\r\n    var path = goog.getPathFromDeps_(name);\r\n    if (path && (path in goog.dependencies_.requires)) {\r\n      for (var requireName in goog.dependencies_.requires[path]) {\r\n        if (!goog.isProvided_(requireName) &&\r\n            !goog.isDeferredModule_(requireName)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {string} abspath\r\n   * @private\r\n   */\r\n  goog.maybeProcessDeferredPath_ = function(abspath) {\r\n    if (abspath in goog.dependencies_.deferred) {\r\n      var src = goog.dependencies_.deferred[abspath];\r\n      delete goog.dependencies_.deferred[abspath];\r\n      goog.globalEval(src);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {function(?):?|string} moduleDef The module definition.\r\n   */\r\n  goog.loadModule = function(moduleDef) {\r\n    // NOTE: we allow function definitions to be either in the from\r\n    // of a string to eval (which keeps the original source intact) or\r\n    // in a eval forbidden environment (CSP) we allow a function definition\r\n    // which in its body must call {@code goog.module}, and return the exports\r\n    // of the module.\r\n    var previousState = goog.moduleLoaderState_;\r\n    try {\r\n      goog.moduleLoaderState_ = {\r\n        moduleName: undefined, declareTestMethods: false};\r\n      var exports;\r\n      if (goog.isFunction(moduleDef)) {\r\n        exports = moduleDef.call(goog.global, {});\r\n      } else if (goog.isString(moduleDef)) {\r\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\r\n      } else {\r\n        throw Error('Invalid module definition');\r\n      }\r\n\r\n      var moduleName = goog.moduleLoaderState_.moduleName;\r\n      if (!goog.isString(moduleName) || !moduleName) {\r\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\r\n      }\r\n\r\n      // Don't seal legacy namespaces as they may be uses as a parent of\r\n      // another namespace\r\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\r\n        goog.constructNamespace_(moduleName, exports);\r\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\r\n        Object.seal(exports);\r\n      }\r\n\r\n      goog.loadedModules_[moduleName] = exports;\r\n      if (goog.moduleLoaderState_.declareTestMethods) {\r\n        for (var entry in exports) {\r\n          if (entry.indexOf('test', 0) === 0 ||\r\n              entry == 'tearDown' ||\r\n              entry == 'setUp' ||\r\n              entry == 'setUpPage' ||\r\n              entry == 'tearDownPage') {\r\n            goog.global[entry] = exports[entry];\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      goog.moduleLoaderState_ = previousState;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {string} source\r\n   * @return {!Object}\r\n   * @private\r\n   */\r\n  goog.loadModuleFromSource_ = function(source) {\r\n    // NOTE: we avoid declaring parameters or local variables here to avoid\r\n    // masking globals or leaking values into the module definition.\r\n    'use strict';\r\n    var exports = {};\r\n    eval(arguments[0]);\r\n    return exports;\r\n  };\r\n\r\n\r\n  /**\r\n   * Writes a new script pointing to {@code src} directly into the DOM.\r\n   *\r\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\r\n   * the fallback mechanism.\r\n   *\r\n   * @param {string} src The script URL.\r\n   * @private\r\n   */\r\n  goog.writeScriptSrcNode_ = function(src) {\r\n    goog.global.document.write(\r\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\r\n  };\r\n\r\n\r\n  /**\r\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\r\n   * method exists as a fallback for document.write (which is not allowed in a\r\n   * strict CSP context, e.g., Chrome apps).\r\n   *\r\n   * NOTE: This method is not analogous to using document.write to insert a\r\n   * <script> tag; specifically, the user agent will execute a script added by\r\n   * document.write immediately after the current script block finishes\r\n   * executing, whereas the DOM-appended script node will not be executed until\r\n   * the entire document is parsed and executed. That is to say, this script is\r\n   * added to the end of the script execution queue.\r\n   *\r\n   * The page must not attempt to call goog.required entities until after the\r\n   * document has loaded, e.g., in or after the window.onload callback.\r\n   *\r\n   * @param {string} src The script URL.\r\n   * @private\r\n   */\r\n  goog.appendScriptSrcNode_ = function(src) {\r\n    var doc = goog.global.document;\r\n    var scriptEl = doc.createElement('script');\r\n    scriptEl.type = 'text/javascript';\r\n    scriptEl.src = src;\r\n    scriptEl.defer = false;\r\n    scriptEl.async = false;\r\n    doc.head.appendChild(scriptEl);\r\n  };\r\n\r\n\r\n  /**\r\n   * The default implementation of the import function. Writes a script tag to\r\n   * import the script.\r\n   *\r\n   * @param {string} src The script url.\r\n   * @param {string=} opt_sourceText The optionally source text to evaluate\r\n   * @return {boolean} True if the script was imported, false otherwise.\r\n   * @private\r\n   */\r\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\r\n    if (goog.inHtmlDocument_()) {\r\n      var doc = goog.global.document;\r\n\r\n      // If the user tries to require a new symbol after document load,\r\n      // something has gone terribly wrong. Doing a document.write would\r\n      // wipe out the page. This does not apply to the CSP-compliant method\r\n      // of writing script tags.\r\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\r\n          doc.readyState == 'complete') {\r\n        // Certain test frameworks load base.js multiple times, which tries\r\n        // to write deps.js each time. If that happens, just fail silently.\r\n        // These frameworks wipe the page between each load of base.js, so this\r\n        // is OK.\r\n        var isDeps = /\\bdeps.js$/.test(src);\r\n        if (isDeps) {\r\n          return false;\r\n        } else {\r\n          throw Error('Cannot write \"' + src + '\" after document load');\r\n        }\r\n      }\r\n\r\n      var isOldIE = goog.IS_OLD_IE_;\r\n\r\n      if (opt_sourceText === undefined) {\r\n        if (!isOldIE) {\r\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\r\n            goog.appendScriptSrcNode_(src);\r\n          } else {\r\n            goog.writeScriptSrcNode_(src);\r\n          }\r\n        } else {\r\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\r\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\r\n          doc.write(\r\n              '<script type=\"text/javascript\" src=\"' +\r\n                  src + '\"' + state + '></' + 'script>');\r\n        }\r\n      } else {\r\n        doc.write(\r\n            '<script type=\"text/javascript\">' +\r\n            opt_sourceText +\r\n            '</' + 'script>');\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n\r\n  /** @private {number} */\r\n  goog.lastNonModuleScriptIndex_ = 0;\r\n\r\n\r\n  /**\r\n   * A readystatechange handler for legacy IE\r\n   * @param {!HTMLScriptElement} script\r\n   * @param {number} scriptIndex\r\n   * @return {boolean}\r\n   * @private\r\n   */\r\n  goog.onScriptLoad_ = function(script, scriptIndex) {\r\n    // for now load the modules when we reach the last script,\r\n    // later allow more inter-mingling.\r\n    if (script.readyState == 'complete' &&\r\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\r\n      goog.loadQueuedModules_();\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Resolves dependencies based on the dependencies added using addDependency\r\n   * and calls importScript_ in the correct order.\r\n   * @private\r\n   */\r\n  goog.writeScripts_ = function() {\r\n    /** @type {!Array<string>} The scripts we need to write this time. */\r\n    var scripts = [];\r\n    var seenScript = {};\r\n    var deps = goog.dependencies_;\r\n\r\n    /** @param {string} path */\r\n    function visitNode(path) {\r\n      if (path in deps.written) {\r\n        return;\r\n      }\r\n\r\n      // We have already visited this one. We can get here if we have cyclic\r\n      // dependencies.\r\n      if (path in deps.visited) {\r\n        if (!(path in seenScript)) {\r\n          seenScript[path] = true;\r\n          scripts.push(path);\r\n        }\r\n        return;\r\n      }\r\n\r\n      deps.visited[path] = true;\r\n\r\n      if (path in deps.requires) {\r\n        for (var requireName in deps.requires[path]) {\r\n          // If the required name is defined, we assume that it was already\r\n          // bootstrapped by other means.\r\n          if (!goog.isProvided_(requireName)) {\r\n            if (requireName in deps.nameToPath) {\r\n              visitNode(deps.nameToPath[requireName]);\r\n            } else {\r\n              throw Error('Undefined nameToPath for ' + requireName);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!(path in seenScript)) {\r\n        seenScript[path] = true;\r\n        scripts.push(path);\r\n      }\r\n    }\r\n\r\n    for (var path in goog.included_) {\r\n      if (!deps.written[path]) {\r\n        visitNode(path);\r\n      }\r\n    }\r\n\r\n    // record that we are going to load all these scripts.\r\n    for (var i = 0; i < scripts.length; i++) {\r\n      var path = scripts[i];\r\n      goog.dependencies_.written[path] = true;\r\n    }\r\n\r\n    // If a module is loaded synchronously then we need to\r\n    // clear the current inModuleLoader value, and restore it when we are\r\n    // done loading the current \"requires\".\r\n    var moduleState = goog.moduleLoaderState_;\r\n    goog.moduleLoaderState_ = null;\r\n\r\n    var loadingModule = false;\r\n    for (var i = 0; i < scripts.length; i++) {\r\n      var path = scripts[i];\r\n      if (path) {\r\n        if (!deps.pathIsModule[path]) {\r\n          goog.importScript_(goog.basePath + path);\r\n        } else {\r\n          loadingModule = true;\r\n          goog.importModule_(goog.basePath + path);\r\n        }\r\n      } else {\r\n        goog.moduleLoaderState_ = moduleState;\r\n        throw Error('Undefined script input');\r\n      }\r\n    }\r\n\r\n    // restore the current \"module loading state\"\r\n    goog.moduleLoaderState_ = moduleState;\r\n  };\r\n\r\n\r\n  /**\r\n   * Looks at the dependency rules and tries to determine the script file that\r\n   * fulfills a particular rule.\r\n   * @param {string} rule In the form goog.namespace.Class or project.script.\r\n   * @return {?string} Url corresponding to the rule, or null.\r\n   * @private\r\n   */\r\n  goog.getPathFromDeps_ = function(rule) {\r\n    if (rule in goog.dependencies_.nameToPath) {\r\n      return goog.dependencies_.nameToPath[rule];\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  goog.findBasePath_();\r\n\r\n  // Allow projects to manage the deps files themselves.\r\n  if (!goog.global.CLOSURE_NO_DEPS) {\r\n    goog.importScript_(goog.basePath + 'deps.js');\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\r\n * path components.\r\n * @param {string} path\r\n * @return {string}\r\n * @private\r\n */\r\ngoog.normalizePath_ = function(path) {\r\n  var components = path.split('/');\r\n  var i = 0;\r\n  while (i < components.length) {\r\n    if (components[i] == '.') {\r\n      components.splice(i, 1);\r\n    } else if (i && components[i] == '..' &&\r\n        components[i - 1] && components[i - 1] != '..') {\r\n      components.splice(--i, 2);\r\n    } else {\r\n      i++;\r\n    }\r\n  }\r\n  return components.join('/');\r\n};\r\n\r\n\r\n/**\r\n * Loads file by synchronous XHR. Should not be used in production environments.\r\n * @param {string} src Source URL.\r\n * @return {string} File contents.\r\n * @private\r\n */\r\ngoog.loadFileSync_ = function(src) {\r\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\r\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\r\n  } else {\r\n    var xhr = new goog.global['XMLHttpRequest']();\r\n    xhr.open('get', src, false);\r\n    xhr.send();\r\n    return xhr.responseText;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Retrieve and execute a module.\r\n * @param {string} src Script source URL.\r\n * @private\r\n */\r\ngoog.retrieveAndExecModule_ = function(src) {\r\n  if (!COMPILED) {\r\n    // The full but non-canonicalized URL for later use.\r\n    var originalPath = src;\r\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\r\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\r\n    src = goog.normalizePath_(src);\r\n\r\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\r\n        goog.writeScriptTag_;\r\n\r\n    var scriptText = goog.loadFileSync_(src);\r\n\r\n    if (scriptText != null) {\r\n      var execModuleScript = goog.wrapModule_(src, scriptText);\r\n      var isOldIE = goog.IS_OLD_IE_;\r\n      if (isOldIE) {\r\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\r\n        goog.queuedModules_.push(originalPath);\r\n      } else {\r\n        importScript(src, execModuleScript);\r\n      }\r\n    } else {\r\n      throw new Error('load of ' + src + 'failed');\r\n    }\r\n  }\r\n};\r\n\r\n\r\n//==============================================================================\r\n// Language Enhancements\r\n//==============================================================================\r\n\r\n\r\n/**\r\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\r\n * operator in such a way that null returns 'null' and arrays return 'array'.\r\n * @param {*} value The value to get the type of.\r\n * @return {string} The name of the type.\r\n */\r\ngoog.typeOf = function(value) {\r\n  var s = typeof value;\r\n  if (s == 'object') {\r\n    if (value) {\r\n      // Check these first, so we can avoid calling Object.prototype.toString if\r\n      // possible.\r\n      //\r\n      // IE improperly marshals tyepof across execution contexts, but a\r\n      // cross-context object will still return false for \"instanceof Object\".\r\n      if (value instanceof Array) {\r\n        return 'array';\r\n      } else if (value instanceof Object) {\r\n        return s;\r\n      }\r\n\r\n      // HACK: In order to use an Object prototype method on the arbitrary\r\n      //   value, the compiler requires the value be cast to type Object,\r\n      //   even though the ECMA spec explicitly allows it.\r\n      var className = Object.prototype.toString.call(\r\n          /** @type {Object} */ (value));\r\n      // In Firefox 3.6, attempting to access iframe window objects' length\r\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\r\n      // here.\r\n      if (className == '[object Window]') {\r\n        return 'object';\r\n      }\r\n\r\n      // We cannot always use constructor == Array or instanceof Array because\r\n      // different frames have different Array objects. In IE6, if the iframe\r\n      // where the array was created is destroyed, the array loses its\r\n      // prototype. Then dereferencing val.splice here throws an exception, so\r\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\r\n      // so that will work. In this case, this function will return false and\r\n      // most array functions will still work because the array is still\r\n      // array-like (supports length and []) even though it has lost its\r\n      // prototype.\r\n      // Mark Miller noticed that Object.prototype.toString\r\n      // allows access to the unforgeable [[Class]] property.\r\n      //  15.2.4.2 Object.prototype.toString ( )\r\n      //  When the toString method is called, the following steps are taken:\r\n      //      1. Get the [[Class]] property of this object.\r\n      //      2. Compute a string value by concatenating the three strings\r\n      //         \"[object \", Result(1), and \"]\".\r\n      //      3. Return Result(2).\r\n      // and this behavior survives the destruction of the execution context.\r\n      if ((className == '[object Array]' ||\r\n           // In IE all non value types are wrapped as objects across window\r\n           // boundaries (not iframe though) so we have to do object detection\r\n           // for this edge case.\r\n           typeof value.length == 'number' &&\r\n           typeof value.splice != 'undefined' &&\r\n           typeof value.propertyIsEnumerable != 'undefined' &&\r\n           !value.propertyIsEnumerable('splice')\r\n\r\n          )) {\r\n        return 'array';\r\n      }\r\n      // HACK: There is still an array case that fails.\r\n      //     function ArrayImpostor() {}\r\n      //     ArrayImpostor.prototype = [];\r\n      //     var impostor = new ArrayImpostor;\r\n      // this can be fixed by getting rid of the fast path\r\n      // (value instanceof Array) and solely relying on\r\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\r\n      // but that would require many more function calls and is not warranted\r\n      // unless closure code is receiving objects from untrusted sources.\r\n\r\n      // IE in cross-window calls does not correctly marshal the function type\r\n      // (it appears just as an object) so we cannot use just typeof val ==\r\n      // 'function'. However, if the object has a call property, it is a\r\n      // function.\r\n      if ((className == '[object Function]' ||\r\n          typeof value.call != 'undefined' &&\r\n          typeof value.propertyIsEnumerable != 'undefined' &&\r\n          !value.propertyIsEnumerable('call'))) {\r\n        return 'function';\r\n      }\r\n\r\n    } else {\r\n      return 'null';\r\n    }\r\n\r\n  } else if (s == 'function' && typeof value.call == 'undefined') {\r\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\r\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\r\n    // would like to return object for those and we can detect an invalid\r\n    // function by making sure that the function object has a call method.\r\n    return 'object';\r\n  }\r\n  return s;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is null.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is null.\r\n */\r\ngoog.isNull = function(val) {\r\n  return val === null;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is defined and not null.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is defined and not null.\r\n */\r\ngoog.isDefAndNotNull = function(val) {\r\n  // Note that undefined == null.\r\n  return val != null;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is an array.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is an array.\r\n */\r\ngoog.isArray = function(val) {\r\n  return goog.typeOf(val) == 'array';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the object looks like an array. To qualify as array like\r\n * the value needs to be either a NodeList or an object with a Number length\r\n * property. As a special case, a function value is not array like, because its\r\n * length property is fixed to correspond to the number of expected arguments.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is an array.\r\n */\r\ngoog.isArrayLike = function(val) {\r\n  var type = goog.typeOf(val);\r\n  // We do not use goog.isObject here in order to exclude function values.\r\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the object looks like a Date. To qualify as Date-like the\r\n * value needs to be an object and have a getFullYear() function.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a like a Date.\r\n */\r\ngoog.isDateLike = function(val) {\r\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a string.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a string.\r\n */\r\ngoog.isString = function(val) {\r\n  return typeof val == 'string';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a boolean.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is boolean.\r\n */\r\ngoog.isBoolean = function(val) {\r\n  return typeof val == 'boolean';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a number.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a number.\r\n */\r\ngoog.isNumber = function(val) {\r\n  return typeof val == 'number';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a function.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a function.\r\n */\r\ngoog.isFunction = function(val) {\r\n  return goog.typeOf(val) == 'function';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is an object.  This includes arrays and\r\n * functions.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is an object.\r\n */\r\ngoog.isObject = function(val) {\r\n  var type = typeof val;\r\n  return type == 'object' && val != null || type == 'function';\r\n  // return Object(val) === val also works, but is slower, especially if val is\r\n  // not an object.\r\n};\r\n\r\n\r\n/**\r\n * Gets a unique ID for an object. This mutates the object so that further calls\r\n * with the same object as a parameter returns the same value. The unique ID is\r\n * guaranteed to be unique across the current session amongst objects that are\r\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\r\n * consistent across sessions. It is unsafe to generate unique ID for function\r\n * prototypes.\r\n *\r\n * @param {Object} obj The object to get the unique ID for.\r\n * @return {number} The unique ID for the object.\r\n */\r\ngoog.getUid = function(obj) {\r\n  // TODO(arv): Make the type stricter, do not accept null.\r\n\r\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\r\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\r\n  // and SubClass.prototype will be the same.\r\n  return obj[goog.UID_PROPERTY_] ||\r\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\r\n};\r\n\r\n\r\n/**\r\n * Whether the given object is already assigned a unique ID.\r\n *\r\n * This does not modify the object.\r\n *\r\n * @param {!Object} obj The object to check.\r\n * @return {boolean} Whether there is an assigned unique id for the object.\r\n */\r\ngoog.hasUid = function(obj) {\r\n  return !!obj[goog.UID_PROPERTY_];\r\n};\r\n\r\n\r\n/**\r\n * Removes the unique ID from an object. This is useful if the object was\r\n * previously mutated using {@code goog.getUid} in which case the mutation is\r\n * undone.\r\n * @param {Object} obj The object to remove the unique ID field from.\r\n */\r\ngoog.removeUid = function(obj) {\r\n  // TODO(arv): Make the type stricter, do not accept null.\r\n\r\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\r\n  // try to delete.  Instead we try to use removeAttribute.\r\n  if ('removeAttribute' in obj) {\r\n    obj.removeAttribute(goog.UID_PROPERTY_);\r\n  }\r\n  /** @preserveTry */\r\n  try {\r\n    delete obj[goog.UID_PROPERTY_];\r\n  } catch (ex) {\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Name for unique ID property. Initialized in a way to help avoid collisions\r\n * with other closure JavaScript on the same page.\r\n * @type {string}\r\n * @private\r\n */\r\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\r\n\r\n\r\n/**\r\n * Counter for UID.\r\n * @type {number}\r\n * @private\r\n */\r\ngoog.uidCounter_ = 0;\r\n\r\n\r\n/**\r\n * Adds a hash code field to an object. The hash code is unique for the\r\n * given object.\r\n * @param {Object} obj The object to get the hash code for.\r\n * @return {number} The hash code for the object.\r\n * @deprecated Use goog.getUid instead.\r\n */\r\ngoog.getHashCode = goog.getUid;\r\n\r\n\r\n/**\r\n * Removes the hash code field from an object.\r\n * @param {Object} obj The object to remove the field from.\r\n * @deprecated Use goog.removeUid instead.\r\n */\r\ngoog.removeHashCode = goog.removeUid;\r\n\r\n\r\n/**\r\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\r\n * arrays will be cloned recursively.\r\n *\r\n * WARNINGS:\r\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\r\n * refer to themselves will cause infinite recursion.\r\n *\r\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\r\n * UIDs created by <code>getUid</code> into cloned results.\r\n *\r\n * @param {*} obj The value to clone.\r\n * @return {*} A clone of the input value.\r\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\r\n */\r\ngoog.cloneObject = function(obj) {\r\n  var type = goog.typeOf(obj);\r\n  if (type == 'object' || type == 'array') {\r\n    if (obj.clone) {\r\n      return obj.clone();\r\n    }\r\n    var clone = type == 'array' ? [] : {};\r\n    for (var key in obj) {\r\n      clone[key] = goog.cloneObject(obj[key]);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n\r\n/**\r\n * A native implementation of goog.bind.\r\n * @param {Function} fn A function to partially apply.\r\n * @param {Object|undefined} selfObj Specifies the object which this should\r\n *     point to when the function is run.\r\n * @param {...*} var_args Additional arguments that are partially applied to the\r\n *     function.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n * @private\r\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\r\n *     deprecated because some people have declared a pure-JS version.\r\n *     Only the pure-JS version is truly deprecated.\r\n */\r\ngoog.bindNative_ = function(fn, selfObj, var_args) {\r\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\r\n};\r\n\r\n\r\n/**\r\n * A pure-JS implementation of goog.bind.\r\n * @param {Function} fn A function to partially apply.\r\n * @param {Object|undefined} selfObj Specifies the object which this should\r\n *     point to when the function is run.\r\n * @param {...*} var_args Additional arguments that are partially applied to the\r\n *     function.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n * @private\r\n */\r\ngoog.bindJs_ = function(fn, selfObj, var_args) {\r\n  if (!fn) {\r\n    throw new Error();\r\n  }\r\n\r\n  if (arguments.length > 2) {\r\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\r\n    return function() {\r\n      // Prepend the bound arguments to the current arguments.\r\n      var newArgs = Array.prototype.slice.call(arguments);\r\n      Array.prototype.unshift.apply(newArgs, boundArgs);\r\n      return fn.apply(selfObj, newArgs);\r\n    };\r\n\r\n  } else {\r\n    return function() {\r\n      return fn.apply(selfObj, arguments);\r\n    };\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Partially applies this function to a particular 'this object' and zero or\r\n * more arguments. The result is a new function with some arguments of the first\r\n * function pre-filled and the value of this 'pre-specified'.\r\n *\r\n * Remaining arguments specified at call-time are appended to the pre-specified\r\n * ones.\r\n *\r\n * Also see: {@link #partial}.\r\n *\r\n * Usage:\r\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\r\n * barMethBound('arg3', 'arg4');</pre>\r\n *\r\n * @param {?function(this:T, ...)} fn A function to partially apply.\r\n * @param {T} selfObj Specifies the object which this should point to when the\r\n *     function is run.\r\n * @param {...*} var_args Additional arguments that are partially applied to the\r\n *     function.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n * @template T\r\n * @suppress {deprecated} See above.\r\n */\r\ngoog.bind = function(fn, selfObj, var_args) {\r\n  // TODO(nicksantos): narrow the type signature.\r\n  if (Function.prototype.bind &&\r\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\r\n      // extension environment. This means that for Chrome extensions, they get\r\n      // the implementation of Function.prototype.bind that calls goog.bind\r\n      // instead of the native one. Even worse, we don't want to introduce a\r\n      // circular dependency between goog.bind and Function.prototype.bind, so\r\n      // we have to hack this to make sure it works correctly.\r\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\r\n    goog.bind = goog.bindNative_;\r\n  } else {\r\n    goog.bind = goog.bindJs_;\r\n  }\r\n  return goog.bind.apply(null, arguments);\r\n};\r\n\r\n\r\n/**\r\n * Like bind(), except that a 'this object' is not required. Useful when the\r\n * target function is already bound.\r\n *\r\n * Usage:\r\n * var g = partial(f, arg1, arg2);\r\n * g(arg3, arg4);\r\n *\r\n * @param {Function} fn A function to partially apply.\r\n * @param {...*} var_args Additional arguments that are partially applied to fn.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n */\r\ngoog.partial = function(fn, var_args) {\r\n  var args = Array.prototype.slice.call(arguments, 1);\r\n  return function() {\r\n    // Clone the array (with slice()) and append additional arguments\r\n    // to the existing arguments.\r\n    var newArgs = args.slice();\r\n    newArgs.push.apply(newArgs, arguments);\r\n    return fn.apply(this, newArgs);\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Copies all the members of a source object to a target object. This method\r\n * does not work on all browsers for all objects that contain keys such as\r\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\r\n * @param {Object} target Target.\r\n * @param {Object} source Source.\r\n */\r\ngoog.mixin = function(target, source) {\r\n  for (var x in source) {\r\n    target[x] = source[x];\r\n  }\r\n\r\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\r\n  // not enumerable on the prototype object (for example, isPrototypeOf from\r\n  // Object.prototype) but also it will not include 'replace' on objects that\r\n  // extend String and change 'replace' (not that it is common for anyone to\r\n  // extend anything except Object).\r\n};\r\n\r\n\r\n/**\r\n * @return {number} An integer value representing the number of milliseconds\r\n *     between midnight, January 1, 1970 and the current time.\r\n */\r\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\r\n  // Unary plus operator converts its operand to a number which in the case of\r\n  // a date is done by calling getTime().\r\n  return +new Date();\r\n});\r\n\r\n\r\n/**\r\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\r\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\r\n * global scope (for example, in Safari), appends a script tag instead.\r\n * Throws an exception if neither execScript or eval is defined.\r\n * @param {string} script JavaScript string.\r\n */\r\ngoog.globalEval = function(script) {\r\n  if (goog.global.execScript) {\r\n    goog.global.execScript(script, 'JavaScript');\r\n  } else if (goog.global.eval) {\r\n    // Test to see if eval works\r\n    if (goog.evalWorksForGlobals_ == null) {\r\n      goog.global.eval('var _et_ = 1;');\r\n      if (typeof goog.global['_et_'] != 'undefined') {\r\n        delete goog.global['_et_'];\r\n        goog.evalWorksForGlobals_ = true;\r\n      } else {\r\n        goog.evalWorksForGlobals_ = false;\r\n      }\r\n    }\r\n\r\n    if (goog.evalWorksForGlobals_) {\r\n      goog.global.eval(script);\r\n    } else {\r\n      var doc = goog.global.document;\r\n      var scriptElt = doc.createElement('SCRIPT');\r\n      scriptElt.type = 'text/javascript';\r\n      scriptElt.defer = false;\r\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\r\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\r\n      scriptElt.appendChild(doc.createTextNode(script));\r\n      doc.body.appendChild(scriptElt);\r\n      doc.body.removeChild(scriptElt);\r\n    }\r\n  } else {\r\n    throw Error('goog.globalEval not available');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Indicates whether or not we can call 'eval' directly to eval code in the\r\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\r\n * empirically tests whether eval works for globals). @see goog.globalEval\r\n * @type {?boolean}\r\n * @private\r\n */\r\ngoog.evalWorksForGlobals_ = null;\r\n\r\n\r\n/**\r\n * Optional map of CSS class names to obfuscated names used with\r\n * goog.getCssName().\r\n * @private {!Object<string, string>|undefined}\r\n * @see goog.setCssNameMapping\r\n */\r\ngoog.cssNameMapping_;\r\n\r\n\r\n/**\r\n * Optional obfuscation style for CSS class names. Should be set to either\r\n * 'BY_WHOLE' or 'BY_PART' if defined.\r\n * @type {string|undefined}\r\n * @private\r\n * @see goog.setCssNameMapping\r\n */\r\ngoog.cssNameMappingStyle_;\r\n\r\n\r\n/**\r\n * Handles strings that are intended to be used as CSS class names.\r\n *\r\n * This function works in tandem with @see goog.setCssNameMapping.\r\n *\r\n * Without any mapping set, the arguments are simple joined with a hyphen and\r\n * passed through unaltered.\r\n *\r\n * When there is a mapping, there are two possible styles in which these\r\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\r\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\r\n * style, the full css name is looked up in the map directly. If a rewrite is\r\n * not specified by the map, the compiler will output a warning.\r\n *\r\n * When the mapping is passed to the compiler, it will replace calls to\r\n * goog.getCssName with the strings from the mapping, e.g.\r\n *     var x = goog.getCssName('foo');\r\n *     var y = goog.getCssName(this.baseClass, 'active');\r\n *  becomes:\r\n *     var x= 'foo';\r\n *     var y = this.baseClass + '-active';\r\n *\r\n * If one argument is passed it will be processed, if two are passed only the\r\n * modifier will be processed, as it is assumed the first argument was generated\r\n * as a result of calling goog.getCssName.\r\n *\r\n * @param {string} className The class name.\r\n * @param {string=} opt_modifier A modifier to be appended to the class name.\r\n * @return {string} The class name or the concatenation of the class name and\r\n *     the modifier.\r\n */\r\ngoog.getCssName = function(className, opt_modifier) {\r\n  var getMapping = function(cssName) {\r\n    return goog.cssNameMapping_[cssName] || cssName;\r\n  };\r\n\r\n  var renameByParts = function(cssName) {\r\n    // Remap all the parts individually.\r\n    var parts = cssName.split('-');\r\n    var mapped = [];\r\n    for (var i = 0; i < parts.length; i++) {\r\n      mapped.push(getMapping(parts[i]));\r\n    }\r\n    return mapped.join('-');\r\n  };\r\n\r\n  var rename;\r\n  if (goog.cssNameMapping_) {\r\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\r\n        getMapping : renameByParts;\r\n  } else {\r\n    rename = function(a) {\r\n      return a;\r\n    };\r\n  }\r\n\r\n  if (opt_modifier) {\r\n    return className + '-' + rename(opt_modifier);\r\n  } else {\r\n    return rename(className);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Sets the map to check when returning a value from goog.getCssName(). Example:\r\n * <pre>\r\n * goog.setCssNameMapping({\r\n *   \"goog\": \"a\",\r\n *   \"disabled\": \"b\",\r\n * });\r\n *\r\n * var x = goog.getCssName('goog');\r\n * // The following evaluates to: \"a a-b\".\r\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\r\n * </pre>\r\n * When declared as a map of string literals to string literals, the JSCompiler\r\n * will replace all calls to goog.getCssName() using the supplied map if the\r\n * --closure_pass flag is set.\r\n *\r\n * @param {!Object} mapping A map of strings to strings where keys are possible\r\n *     arguments to goog.getCssName() and values are the corresponding values\r\n *     that should be returned.\r\n * @param {string=} opt_style The style of css name mapping. There are two valid\r\n *     options: 'BY_PART', and 'BY_WHOLE'.\r\n * @see goog.getCssName for a description.\r\n */\r\ngoog.setCssNameMapping = function(mapping, opt_style) {\r\n  goog.cssNameMapping_ = mapping;\r\n  goog.cssNameMappingStyle_ = opt_style;\r\n};\r\n\r\n\r\n/**\r\n * To use CSS renaming in compiled mode, one of the input files should have a\r\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\r\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\r\n * mode, JavaScript code should be loaded before this base.js file that declares\r\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\r\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\r\n * are made in uncompiled mode.\r\n *\r\n * A hook for overriding the CSS name mapping.\r\n * @type {!Object<string, string>|undefined}\r\n */\r\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\r\n\r\n\r\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\r\n  // This does not call goog.setCssNameMapping() because the JSCompiler\r\n  // requires that goog.setCssNameMapping() be called with an object literal.\r\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\r\n}\r\n\r\n\r\n/**\r\n * Gets a localized message.\r\n *\r\n * This function is a compiler primitive. If you give the compiler a localized\r\n * message bundle, it will replace the string at compile-time with a localized\r\n * version, and expand goog.getMsg call to a concatenated string.\r\n *\r\n * Messages must be initialized in the form:\r\n * <code>\r\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\r\n * </code>\r\n *\r\n * @param {string} str Translatable string, places holders in the form {$foo}.\r\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\r\n * @return {string} message with placeholders filled.\r\n */\r\ngoog.getMsg = function(str, opt_values) {\r\n  if (opt_values) {\r\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\r\n      return key in opt_values ? opt_values[key] : match;\r\n    });\r\n  }\r\n  return str;\r\n};\r\n\r\n\r\n/**\r\n * Gets a localized message. If the message does not have a translation, gives a\r\n * fallback message.\r\n *\r\n * This is useful when introducing a new message that has not yet been\r\n * translated into all languages.\r\n *\r\n * This function is a compiler primitive. Must be used in the form:\r\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\r\n * where MSG_A and MSG_B were initialized with goog.getMsg.\r\n *\r\n * @param {string} a The preferred message.\r\n * @param {string} b The fallback message.\r\n * @return {string} The best translated message.\r\n */\r\ngoog.getMsgWithFallback = function(a, b) {\r\n  return a;\r\n};\r\n\r\n\r\n/**\r\n * Exposes an unobfuscated global namespace path for the given object.\r\n * Note that fields of the exported object *will* be obfuscated, unless they are\r\n * exported in turn via this function or goog.exportProperty.\r\n *\r\n * Also handy for making public items that are defined in anonymous closures.\r\n *\r\n * ex. goog.exportSymbol('public.path.Foo', Foo);\r\n *\r\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\r\n *     public.path.Foo.staticFunction();\r\n *\r\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\r\n *                       Foo.prototype.myMethod);\r\n *     new public.path.Foo().myMethod();\r\n *\r\n * @param {string} publicPath Unobfuscated name to export.\r\n * @param {*} object Object the name should point to.\r\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\r\n *     is goog.global.\r\n */\r\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\r\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\r\n};\r\n\r\n\r\n/**\r\n * Exports a property unobfuscated into the object's namespace.\r\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\r\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\r\n * @param {Object} object Object whose static property is being exported.\r\n * @param {string} publicName Unobfuscated name to export.\r\n * @param {*} symbol Object the name should point to.\r\n */\r\ngoog.exportProperty = function(object, publicName, symbol) {\r\n  object[publicName] = symbol;\r\n};\r\n\r\n\r\n/**\r\n * Inherit the prototype methods from one constructor into another.\r\n *\r\n * Usage:\r\n * <pre>\r\n * function ParentClass(a, b) { }\r\n * ParentClass.prototype.foo = function(a) { };\r\n *\r\n * function ChildClass(a, b, c) {\r\n *   ChildClass.base(this, 'constructor', a, b);\r\n * }\r\n * goog.inherits(ChildClass, ParentClass);\r\n *\r\n * var child = new ChildClass('a', 'b', 'see');\r\n * child.foo(); // This works.\r\n * </pre>\r\n *\r\n * @param {Function} childCtor Child class.\r\n * @param {Function} parentCtor Parent class.\r\n */\r\ngoog.inherits = function(childCtor, parentCtor) {\r\n  /** @constructor */\r\n  function tempCtor() {};\r\n  tempCtor.prototype = parentCtor.prototype;\r\n  childCtor.superClass_ = parentCtor.prototype;\r\n  childCtor.prototype = new tempCtor();\r\n  /** @override */\r\n  childCtor.prototype.constructor = childCtor;\r\n\r\n  /**\r\n   * Calls superclass constructor/method.\r\n   *\r\n   * This function is only available if you use goog.inherits to\r\n   * express inheritance relationships between classes.\r\n   *\r\n   * NOTE: This is a replacement for goog.base and for superClass_\r\n   * property defined in childCtor.\r\n   *\r\n   * @param {!Object} me Should always be \"this\".\r\n   * @param {string} methodName The method name to call. Calling\r\n   *     superclass constructor can be done with the special string\r\n   *     'constructor'.\r\n   * @param {...*} var_args The arguments to pass to superclass\r\n   *     method/constructor.\r\n   * @return {*} The return value of the superclass method/constructor.\r\n   */\r\n  childCtor.base = function(me, methodName, var_args) {\r\n    // Copying using loop to avoid deop due to passing arguments object to\r\n    // function. This is faster in many JS engines as of late 2014.\r\n    var args = new Array(arguments.length - 2);\r\n    for (var i = 2; i < arguments.length; i++) {\r\n      args[i - 2] = arguments[i];\r\n    }\r\n    return parentCtor.prototype[methodName].apply(me, args);\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Call up to the superclass.\r\n *\r\n * If this is called from a constructor, then this calls the superclass\r\n * constructor with arguments 1-N.\r\n *\r\n * If this is called from a prototype method, then you must pass the name of the\r\n * method as the second argument to this function. If you do not, you will get a\r\n * runtime error. This calls the superclass' method with arguments 2-N.\r\n *\r\n * This function only works if you use goog.inherits to express inheritance\r\n * relationships between your classes.\r\n *\r\n * This function is a compiler primitive. At compile-time, the compiler will do\r\n * macro expansion to remove a lot of the extra overhead that this function\r\n * introduces. The compiler will also enforce a lot of the assumptions that this\r\n * function makes, and treat it as a compiler error if you break them.\r\n *\r\n * @param {!Object} me Should always be \"this\".\r\n * @param {*=} opt_methodName The method name if calling a super method.\r\n * @param {...*} var_args The rest of the arguments.\r\n * @return {*} The return value of the superclass method.\r\n * @suppress {es5Strict} This method can not be used in strict mode, but\r\n *     all Closure Library consumers must depend on this file.\r\n */\r\ngoog.base = function(me, opt_methodName, var_args) {\r\n  var caller = arguments.callee.caller;\r\n\r\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\r\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\r\n                'with strict mode code. See ' +\r\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\r\n  }\r\n\r\n  if (caller.superClass_) {\r\n    // Copying using loop to avoid deop due to passing arguments object to\r\n    // function. This is faster in many JS engines as of late 2014.\r\n    var ctorArgs = new Array(arguments.length - 1);\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      ctorArgs[i - 1] = arguments[i];\r\n    }\r\n    // This is a constructor. Call the superclass constructor.\r\n    return caller.superClass_.constructor.apply(me, ctorArgs);\r\n  }\r\n\r\n  // Copying using loop to avoid deop due to passing arguments object to\r\n  // function. This is faster in many JS engines as of late 2014.\r\n  var args = new Array(arguments.length - 2);\r\n  for (var i = 2; i < arguments.length; i++) {\r\n    args[i - 2] = arguments[i];\r\n  }\r\n  var foundCaller = false;\r\n  for (var ctor = me.constructor;\r\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\r\n    if (ctor.prototype[opt_methodName] === caller) {\r\n      foundCaller = true;\r\n    } else if (foundCaller) {\r\n      return ctor.prototype[opt_methodName].apply(me, args);\r\n    }\r\n  }\r\n\r\n  // If we did not find the caller in the prototype chain, then one of two\r\n  // things happened:\r\n  // 1) The caller is an instance method.\r\n  // 2) This method was not called by the right caller.\r\n  if (me[opt_methodName] === caller) {\r\n    return me.constructor.prototype[opt_methodName].apply(me, args);\r\n  } else {\r\n    throw Error(\r\n        'goog.base called from a method of one name ' +\r\n        'to a method of a different name');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Allow for aliasing within scope functions.  This function exists for\r\n * uncompiled code - in compiled code the calls will be inlined and the aliases\r\n * applied.  In uncompiled code the function is simply run since the aliases as\r\n * written are valid JavaScript.\r\n *\r\n *\r\n * @param {function()} fn Function to call.  This function can contain aliases\r\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\r\n *     (e.g. \"var Timer = goog.Timer\").\r\n */\r\ngoog.scope = function(fn) {\r\n  fn.call(goog.global);\r\n};\r\n\r\n\r\n/*\r\n * To support uncompiled, strict mode bundles that use eval to divide source\r\n * like so:\r\n *    eval('someSource;//# sourceUrl sourcefile.js');\r\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\r\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\r\n * be defined externally.\r\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\r\n * extern generation when that compiler option is enabled.\r\n */\r\nif (!COMPILED) {\r\n  goog.global['COMPILED'] = COMPILED;\r\n}\r\n\r\n\r\n\r\n//==============================================================================\r\n// goog.defineClass implementation\r\n//==============================================================================\r\n\r\n\r\n/**\r\n * Creates a restricted form of a Closure \"class\":\r\n *   - from the compiler's perspective, the instance returned from the\r\n *     constructor is sealed (no new properties may be added).  This enables\r\n *     better checks.\r\n *   - the compiler will rewrite this definition to a form that is optimal\r\n *     for type checking and optimization (initially this will be a more\r\n *     traditional form).\r\n *\r\n * @param {Function} superClass The superclass, Object or null.\r\n * @param {goog.defineClass.ClassDescriptor} def\r\n *     An object literal describing\r\n *     the class.  It may have the following properties:\r\n *     \"constructor\": the constructor function\r\n *     \"statics\": an object literal containing methods to add to the constructor\r\n *        as \"static\" methods or a function that will receive the constructor\r\n *        function as its only parameter to which static properties can\r\n *        be added.\r\n *     all other properties are added to the prototype.\r\n * @return {!Function} The class constructor.\r\n */\r\ngoog.defineClass = function(superClass, def) {\r\n  // TODO(johnlenz): consider making the superClass an optional parameter.\r\n  var constructor = def.constructor;\r\n  var statics = def.statics;\r\n  // Wrap the constructor prior to setting up the prototype and static methods.\r\n  if (!constructor || constructor == Object.prototype.constructor) {\r\n    constructor = function() {\r\n      throw Error('cannot instantiate an interface (no constructor defined).');\r\n    };\r\n  }\r\n\r\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\r\n  if (superClass) {\r\n    goog.inherits(cls, superClass);\r\n  }\r\n\r\n  // Remove all the properties that should not be copied to the prototype.\r\n  delete def.constructor;\r\n  delete def.statics;\r\n\r\n  goog.defineClass.applyProperties_(cls.prototype, def);\r\n  if (statics != null) {\r\n    if (statics instanceof Function) {\r\n      statics(cls);\r\n    } else {\r\n      goog.defineClass.applyProperties_(cls, statics);\r\n    }\r\n  }\r\n\r\n  return cls;\r\n};\r\n\r\n\r\n/**\r\n * @typedef {\r\n *     !Object|\r\n *     {constructor:!Function}|\r\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\r\n * @suppress {missingProvide}\r\n */\r\ngoog.defineClass.ClassDescriptor;\r\n\r\n\r\n/**\r\n * @define {boolean} Whether the instances returned by\r\n * goog.defineClass should be sealed when possible.\r\n */\r\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\r\n\r\n\r\n/**\r\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\r\n * defined, this function will wrap the constructor in a function that seals the\r\n * results of the provided constructor function.\r\n *\r\n * @param {!Function} ctr The constructor whose results maybe be sealed.\r\n * @param {Function} superClass The superclass constructor.\r\n * @return {!Function} The replacement constructor.\r\n * @private\r\n */\r\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\r\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\r\n      Object.seal instanceof Function) {\r\n    // Don't seal subclasses of unsealable-tagged legacy classes.\r\n    if (superClass && superClass.prototype &&\r\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\r\n      return ctr;\r\n    }\r\n    /**\r\n     * @this {Object}\r\n     * @return {?}\r\n     */\r\n    var wrappedCtr = function() {\r\n      // Don't seal an instance of a subclass when it calls the constructor of\r\n      // its super class as there is most likely still setup to do.\r\n      var instance = ctr.apply(this, arguments) || this;\r\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\r\n      if (this.constructor === wrappedCtr) {\r\n        Object.seal(instance);\r\n      }\r\n      return instance;\r\n    };\r\n    return wrappedCtr;\r\n  }\r\n  return ctr;\r\n};\r\n\r\n\r\n// TODO(johnlenz): share these values with the goog.object\r\n/**\r\n * The names of the fields that are defined on Object.prototype.\r\n * @type {!Array<string>}\r\n * @private\r\n * @const\r\n */\r\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\r\n  'constructor',\r\n  'hasOwnProperty',\r\n  'isPrototypeOf',\r\n  'propertyIsEnumerable',\r\n  'toLocaleString',\r\n  'toString',\r\n  'valueOf'\r\n];\r\n\r\n\r\n// TODO(johnlenz): share this function with the goog.object\r\n/**\r\n * @param {!Object} target The object to add properties to.\r\n * @param {!Object} source The object to copy properties from.\r\n * @private\r\n */\r\ngoog.defineClass.applyProperties_ = function(target, source) {\r\n  // TODO(johnlenz): update this to support ES5 getters/setters\r\n\r\n  var key;\r\n  for (key in source) {\r\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n\r\n  // For IE the for-in-loop does not contain any properties that are not\r\n  // enumerable on the prototype object (for example isPrototypeOf from\r\n  // Object.prototype) and it will also not include 'replace' on objects that\r\n  // extend String and change 'replace' (not that it is common for anyone to\r\n  // extend anything except Object).\r\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\r\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\r\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Sealing classes breaks the older idiom of assigning properties on the\r\n * prototype rather than in the constructor.  As such, goog.defineClass\r\n * must not seal subclasses of these old-style classes until they are fixed.\r\n * Until then, this marks a class as \"broken\", instructing defineClass\r\n * not to seal subclasses.\r\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\r\n */\r\ngoog.tagUnsealableClass = function(ctr) {\r\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\r\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Name for unsealable tag property.\r\n * @const @private {string}\r\n */\r\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\r\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility method for creating an iterator for Arrays.\n */\n'require base';\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {function():!IIterableResult<T>}\n * @template T\n */\n$jscomp.arrayIteratorImpl = function(array) {\n  var index = 0;\n  return function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  };\n};\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {!Iterator<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  return /** @type {!Iterator<T>} */ ({next: $jscomp.arrayIteratorImpl(array)});\n};\n\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/util/arrayiterator';\n\n/**\n * Creates an iterator for the given iterable.  This iterator should never\n * be exposed to user code.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n      (/** @type {?} */ (iterable)[Symbol.iterator]);\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  // This logic can be simplified to be made more optimizable.\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ?\n      /** @type {!Object} */ (global) :\n      maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\" now that the type\n// of \"Global\" has landed in the type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Symbol polyfill.\n * @suppress {uselessCode}\n */\n\n'require es6/util/arrayiterator';\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * @struct @constructor\n * @param {string} id\n * @param {string=} opt_description\n */\n$jscomp.SymbolClass = function(id, opt_description) {\n  /** @private @const {string} */\n  this.$jscomp$symbol$id_ = id;\n\n  /** @const {string|undefined} */\n  this.description;\n\n  // description is read-only.\n  $jscomp.defineProperty(\n      this, 'description',\n      {configurable: true, writable: true, value: opt_description});\n};\n\n\n/** @override */\n$jscomp.SymbolClass.prototype.toString = function() {\n  return this.$jscomp$symbol$id_;\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    if (/** @type {?} */ (this) instanceof Symbol) {\n      throw new TypeError('Symbol is not a constructor');\n    }\n    return /** @type {?} */ (new $jscomp.SymbolClass(\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + '_' + (counter++),\n        opt_description));\n  }\n\n  return Symbol;\n})();\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('Symbol.iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.iteratorPrototype(\n                $jscomp.arrayIteratorImpl(this));\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Initializes Symbol.asyncIterator (if it's not already defined)\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolAsyncIterator = function() {\n  $jscomp.initSymbol();\n  var symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator;\n  if (!symbolAsyncIterator) {\n    symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator =\n        $jscomp.global['Symbol']('Symbol.asyncIterator');\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolAsyncIterator = function() {};\n};\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() {\n    return this;\n  };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Synonym for Object.prototype.hasOwnProperty.call(obj, prop).\n * @param {!Object} obj\n * @param {string} prop\n * @return {boolean}\n */\n$jscomp.owns = function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/util/makeiterator';\n'require util/defineproperty';\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('WeakMap',\n    /**\n     * @param {*} NativeWeakMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakMap) {\n  /**\n   * Checks conformance of the existing WeakMap.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakMap || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\n          NativeWeakMap)([[x, 2], [y, 3]]);\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\n      map.delete(x);\n      map.set(y, 4);\n      return !map.has(x) && map.get(y) == 4;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\n  } else {\n    if (isConformant()) return NativeWeakMap;\n  }\n\n  var prop = '$jscomp_hidden_' + Math.random();\n\n  /** @constructor */\n  function WeakMapMembership() {}\n\n  /**\n   * Inserts the hidden property into the target.\n   * @param {!Object} target\n   */\n  function insert(target) {\n    if (!$jscomp.owns(target, prop)) {\n      var obj = new WeakMapMembership();\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\n      // a problem, we could avoid it by copying an infrequently-used non-enum\n      // method (like toLocaleString) onto the object itself and encoding the\n      // property on the copy instead.  This codepath must be easily removable\n      // if IE8 support is not needed.\n      $jscomp.defineProperty(target, prop, {value: obj});\n    }\n  }\n\n  /**\n   * Monkey-patches the freezing methods to ensure that the hidden\n   * property is added before any freezing happens.\n   * @param {string} name\n   */\n  function patch(name) {\n    var prev = Object[name];\n    if (prev) {\n      Object[name] = function(target) {\n        if (target instanceof WeakMapMembership) {\n          return target;\n        } else {\n          insert(target);\n          return prev(target);\n        }\n      };\n    }\n  }\n  patch('freeze');\n  patch('preventExtensions');\n  patch('seal');\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\n  // then neither is WeakMap).\n\n  var index = 0;\n\n  /**\n   * Polyfill for WeakMap:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n   *\n   * This implementation is as non-leaky as possible, due to patching\n   * the freezing and sealing operations.  It does not include any logic\n   * to handle cases where a key was somehow made non-extensible without\n   * the special hidden property being added.  It takes some care to ensure\n   * the hidden property is not enumerated over nor discoverable, though\n   * it's not completely secure (particularly in IE8).\n   *\n   * @constructor\n   * @extends {WeakMap<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterator<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional initial data.\n   */\n  var PolyfillWeakMap = function(opt_iterable) {\n    /** @private @const {string} */\n    this.id_ = (index += (Math.random() + 1)).toString();\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.set = function(key, value) {\n    insert(key);\n    if (!$jscomp.owns(key, prop)) {\n      // NOTE: If the insert() call fails on the key, but the property\n      // has previously successfully been added higher up the prototype\n      // chain, then we'll silently misbehave.  Instead, throw immediately\n      // before doing something bad.  If this becomes a problem (e.g. due\n      // to some rogue frozen objects) then we may need to add a slow and\n      // leaky fallback array to each WeakMap instance, as well as extra\n      // logic in each accessor to use it (*only*) when necessary.\n      throw new Error('WeakMap key fail: ' + key);\n    }\n    key[prop][this.id_] = value;\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.get = function(key) {\n    return $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.has = function(key) {\n    return $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.delete = function(key) {\n    if (!$jscomp.owns(key, prop) ||\n        !$jscomp.owns(key[prop], this.id_)) {\n      return false;\n    }\n    return delete key[prop][this.id_];\n  };\n\n  return PolyfillWeakMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n\n/**\n * Internal record type for entries.\n * @record\n * @template KEY, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.MapEntry = function() {\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.previous;\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.next;\n  /** @type {?Object} */\n  this.head;\n  /** @type {KEY} */\n  this.key;\n  /** @type {VALUE} */\n  this.value;\n};\n\n\n$jscomp.polyfill('Map',\n    /**\n     * @param {*} NativeMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeMap) {\n\n  /**\n   * Checks conformance of the existing Map.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_MAP ||\n        !NativeMap ||\n        typeof NativeMap != \"function\" ||\n        !NativeMap.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeMap = /** @type {function(new: Map, !Iterator=)} */ (NativeMap);\n      var key = Object.seal({x: 4});\n      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));\n      if (map.get(key) != 's' || map.size != 1 || map.get({x: 4}) ||\n          map.set({x: 4}, 't') != map || map.size != 2) {\n        return false;\n      }\n      var /** !Iterator<!Array> */ iter = map.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != key || item.value[1] != 's') {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0].x != 4 ||\n          item.value[1] != 't' || !iter.next().done) {\n        return false;\n      }\n      return true;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeMap && $jscomp.ES6_CONFORMANCE) return NativeMap;\n  } else {\n    if (isConformant()) return NativeMap;\n  }\n\n  // We depend on Symbol.iterator, so ensure it's loaded.\n  $jscomp.initSymbolIterator();\n\n\n  /** @const {!WeakMap<!Object, string>} */\n  var idMap = new WeakMap();\n\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Map<KEY, VALUE>}\n   * @implements {Iterable<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   * @param {!Iterable<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional data to populate the map.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillMap = function(opt_iterable) {\n    /** @private {!Object<!Array<!$jscomp.MapEntry<KEY, VALUE>>>} */\n    this.data_ = {};\n\n    /** @private {!$jscomp.MapEntry<KEY, VALUE>} */\n    this.head_ = createHead();\n\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    /** @type {number} */\n    this.size = 0;\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item =\n            /** @type {!IIterableResult<!Array<KEY|VALUE>>} */ (entry).value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.set = function(key, value) {\n    // normalize -0/+0 to +0\n    key = key === 0 ? 0 : key;\n    var r = maybeGetEntry(this, key);\n    if (!r.list) {\n      r.list = (this.data_[r.id] = []);\n    }\n    if (!r.entry) {\n      r.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: key,\n        value: value,\n      };\n      r.list.push(r.entry);\n      this.head_.previous.next = r.entry;\n      this.head_.previous = r.entry;\n      this.size++;\n    } else {\n      r.entry.value = value;\n    }\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.delete = function(key) {\n    var r = maybeGetEntry(this, key);\n    if (r.entry && r.list) {\n      r.list.splice(r.index, 1);\n      if (!r.list.length) delete this.data_[r.id];\n      r.entry.previous.next = r.entry.next;\n      r.entry.next.previous = r.entry.previous;\n      r.entry.head = null;\n      this.size--;\n      return true;\n    }\n    return false;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.clear = function() {\n    this.data_ = {};\n    this.head_ = this.head_.previous = createHead();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.has = function(key) {\n    return !!(maybeGetEntry(this, key).entry);\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.get = function(key) {\n    var entry = maybeGetEntry(this, key).entry;\n    // NOTE: this cast is a lie, but so is the extern.\n    return /** @type {VALUE} */ (entry &&\n      /** @type {VALUE} */ (entry.value));\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.entries = function() {\n    return makeIterator(this, /** @return {!Array<(KEY|VALUE)>} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return ([entry.key, entry.value]);\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.keys = function() {\n    return makeIterator(this, /** @return {KEY} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.key;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.values = function() {\n    return makeIterator(this, /** @return {VALUE} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.value;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {\n    var iter = this.entries();\n    var item;\n    while (!(item = iter.next()).done) {\n      var entry = item.value;\n      callback.call(\n          /** @type {?} */ (opt_thisArg),\n          /** @type {VALUE} */ (entry[1]),\n          /** @type {KEY} */ (entry[0]),\n          this);\n    }\n  };\n\n\n  /** @type {?} */ (PolyfillMap.prototype)[Symbol.iterator] =\n      PolyfillMap.prototype.entries;\n\n\n  /**\n   * Returns an entry or undefined.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {KEY} key\n   * @return {{id: string,\n   *           list: (!Array<!$jscomp.MapEntry<KEY, VALUE>>|undefined),\n   *           index: number,\n   *           entry: (!$jscomp.MapEntry<KEY, VALUE>|undefined)}}\n   * @template KEY, VALUE\n   */\n  var maybeGetEntry = function(map, key) {\n    var id = getId(key);\n    var list = map.data_[id];\n    if (list && $jscomp.owns(map.data_, id)) {\n      for (var index = 0; index < list.length; index++) {\n        var entry = list[index];\n        if ((key !== key && entry.key !== entry.key) || key === entry.key) {\n          return {id: id, list: list, index: index, entry: entry};\n        }\n      }\n    }\n    return {id: id, list: list, index: -1, entry: undefined};\n  };\n\n\n  /**\n   * Maps over the entries with the given function.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {function(!$jscomp.MapEntry<KEY, VALUE>): T} func\n   * @return {!IteratorIterable<T>}\n   * @template KEY, VALUE, T\n   * @private\n   */\n  var makeIterator = function(map, func) {\n    var entry = map.head_;\n    return $jscomp.iteratorPrototype(function() {\n      if (entry) {\n        while (entry.head != map.head_) {\n          entry = entry.previous;\n        }\n        while (entry.next != entry.head) {\n          entry = entry.next;\n          return {done: false, value: func(entry)};\n        }\n        entry = null; // make sure depletion is permanent\n      }\n      return {done: true, value: void 0};\n    });\n  };\n\n\n  /**\n   * Makes a new \"head\" element.\n   * @return {!$jscomp.MapEntry<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @suppress {checkTypes} ignore missing key/value for head only\n   */\n  var createHead = function() {\n    var head = /** type {!$jscomp.MapEntry<KEY, VALUE>} */ ({});\n    head.previous = head.next = head.head = head;\n    return head;\n  };\n\n\n  /**\n   * Counter for generating IDs.\n   * @private {number}\n   */\n  var mapIndex = 0;\n\n\n  /**\n   * @param {*} obj An extensible object.\n   * @return {string} A unique ID.\n   */\n  var getId = function(obj) {\n    var type = obj && typeof obj;\n    if (type == 'object' || type == 'function') {\n      obj = /** @type {!Object} */ (obj);\n      if (!idMap.has(obj)) {\n        var id = '' + (++mapIndex);\n        idMap.set(obj, id);\n        return id;\n      }\n      return idMap.get(obj);\n    }\n    // Add a prefix since obj could be '__proto__';\n    return 'p_' + obj;\n  };\n\n\n  return PolyfillMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a partial internal polyfill for Object.create.\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.create() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n *\n * Does not implement the second argument.\n * @param {!Object} prototype\n * @return {!Object}\n */\n$jscomp.objectCreate =\n    ($jscomp.ASSUME_ES5 || typeof Object.create == 'function') ?\n    Object.create :\n    function(prototype) {\n      /** @constructor */\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor();\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/objectcreate';\n\n/**\n * Polyfill for Reflect.construct() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\n *\n * Calls a constructor as with the 'new' operator.\n * TODO(sdh): how to type 'target' with (new: TARGET) if opt_newTarget missing?\n *\n * @param {function(new: ?, ...?)} target The constructor to call.\n * @param {!Array} argList The arguments as a list.\n * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n * @return {TARGET} The result of the function call.\n * @template TARGET\n */\n$jscomp.construct = /** @type {function(): !Function} */ (function() {\n\n  // Check for https://github.com/Microsoft/ChakraCore/issues/3217\n  /** @return {boolean} */\n  function reflectConstructWorks() {\n    /** @constructor */ function Base() {}\n    /** @constructor */ function Derived() {}\n    new Base();\n    Reflect.construct(Base, [], Derived);\n    return new Base() instanceof Base;\n  }\n\n  if (typeof Reflect != 'undefined' && Reflect.construct) {\n    if (reflectConstructWorks()) return Reflect.construct;\n    var brokenConstruct = Reflect.construct;\n    /**\n     * @param {function(new: ?, ...?)} target The constructor to call.\n     * @param {!Array} argList The arguments as a list.\n     * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n     * @return {TARGET} The result of the function call.\n     * @template TARGET\n     * @suppress {reportUnknownTypes}\n     */\n    var patchedConstruct = function(target, argList, opt_newTarget) {\n      var out = brokenConstruct(target, argList);\n      if (opt_newTarget) Reflect.setPrototypeOf(out, opt_newTarget.prototype);\n      return out;\n    };\n    return patchedConstruct;\n  }\n\n  /**\n   * @param {function(new: ?, ...?)} target The constructor to call.\n   * @param {!Array} argList The arguments as a list.\n   * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n   * @return {TARGET} The result of the function call.\n   * @template TARGET\n   * @suppress {reportUnknownTypes}\n   */\n  function construct(target, argList, opt_newTarget) {\n    if (opt_newTarget === undefined) opt_newTarget = target;\n    var proto = opt_newTarget.prototype || Object.prototype;\n    var obj = $jscomp.objectCreate(proto);\n    var apply = Function.prototype.apply;\n    var out = apply.call(target, obj, argList);\n    return out || obj;\n  }\n  return construct;\n})();\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/util/construct';\n'require util/polyfill';\n\n$jscomp.polyfill('Reflect.construct', function(orig) {\n  // NOTE: This is just Reflect.construct if it's present and functional.\n  return $jscomp.construct;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n/**\n * @suppress {missingProperties,reportUnknownTypes}\n * @return {boolean}\n */\n$jscomp.underscoreProtoCanBeSet = function() {\n  var x = {a: true};\n  var y = {};\n  try {\n    y.__proto__ = x;\n    return y.a;\n  } catch (e) {\n    // __proto__ property is readonly (possibly IE 10?)\n  }\n  return false;\n};\n\n/**\n * If we can implement it, this will be a function that attempts to set the\n * prototype of an object, otherwise it will be `null`.\n *\n * It returns the first argument if successful. Throws a `TypeError` if the\n * object is not extensible.\n *\n * @type {null|function(!Object, ?Object): !Object}\n */\n$jscomp.setPrototypeOf = (typeof Object.setPrototypeOf == 'function') ?\n    Object.setPrototypeOf :\n    $jscomp.underscoreProtoCanBeSet() ?\n    function(target, proto) {\n      target.__proto__ = proto;\n      if (target.__proto__ !== proto) {\n        throw new TypeError(target + ' is not extensible');\n      }\n      return target;\n    } :\n    null;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill(\n    'Reflect.setPrototypeOf',\n    /**\n     * These annotations are intended to match the signature of\n     * $jscomp.polyfill(). Being more specific makes the compiler unhappy.\n     * @suppress {reportUnknownTypes}\n     * @param {?*} orig\n     * @return {*}\n     */\n    function(orig) {\n      if (orig) {\n        return orig;\n      } else if ($jscomp.setPrototypeOf) {\n        /** @const {!function(!Object,?Object):!Object} */\n        var setPrototypeOf = $jscomp.setPrototypeOf;\n        /**\n         * @param {!Object} target\n         * @param {?Object} proto\n         * @return {boolean}\n         */\n        var polyfill = function(target, proto) {\n          try {\n            setPrototypeOf(target, proto);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        };\n        return polyfill;\n      } else {\n        // it isn't possible to implement this method\n        return null;\n      }\n    },\n    'es6', 'es5');\n","\"use strict\";\r\n\r\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\r\n{\r\n    window.requestAnimationFrame =\r\n        window.mozRequestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame;\r\n}\r\n\r\n\r\n/**\r\n * Adapter to use visual screen in browsers (in contrast to node)\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction ScreenAdapter(screen_container, bus)\r\n{\r\n    console.assert(screen_container, \"1st argument must be a DOM container\");\r\n\r\n    var\r\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\r\n        graphic_context = graphic_screen.getContext(\"2d\"),\r\n\r\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\r\n        cursor_element = document.createElement(\"div\");\r\n\r\n    var\r\n        graphic_image_data,\r\n        graphic_buffer,\r\n        graphic_buffer32,\r\n\r\n        /** @type {number} */\r\n        cursor_row,\r\n\r\n        /** @type {number} */\r\n        cursor_col,\r\n\r\n        /** @type {number} */\r\n        scale_x = 1,\r\n\r\n        /** @type {number} */\r\n        scale_y = 1,\r\n\r\n        graphical_mode_width,\r\n        graphical_mode_height,\r\n\r\n        modified_pixel_min = 0,\r\n        modified_pixel_max = 0,\r\n\r\n        changed_rows,\r\n\r\n        // are we in graphical mode now?\r\n        is_graphical = false,\r\n\r\n        // Index 0: ASCII code\r\n        // Index 1: Background color\r\n        // Index 2: Foreground color\r\n        text_mode_data,\r\n\r\n        // number of columns\r\n        text_mode_width,\r\n\r\n        // number of rows\r\n        text_mode_height;\r\n\r\n    var stopped = false;\r\n\r\n    var screen = this;\r\n\r\n    // 0x12345 -> \"#012345\"\r\n    function number_as_color(n)\r\n    {\r\n        n = n.toString(16);\r\n\r\n        return \"#\" + Array(7 - n.length).join(\"0\") + n;\r\n    }\r\n\r\n\r\n    /**\r\n     * Charmaps that constraint unicode sequences for the default dospage\r\n     * @const\r\n     */\r\n    var charmap_high = new Uint16Array([\r\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\r\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\r\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\r\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\r\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\r\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\r\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\r\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\r\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\r\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\r\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\r\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\r\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\r\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\r\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\r\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\r\n    ]);\r\n\r\n    /** @const */\r\n    var charmap_low = new Uint16Array([\r\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\r\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\r\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\r\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\r\n    ]);\r\n\r\n    var charmap = [],\r\n        chr;\r\n\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        if(i > 127)\r\n        {\r\n            chr = charmap_high[i - 0x80];\r\n        }\r\n        else if(i < 32)\r\n        {\r\n            chr = charmap_low[i];\r\n        }\r\n        else\r\n        {\r\n            chr = i;\r\n        }\r\n\r\n        charmap[i] = String.fromCharCode(chr);\r\n    }\r\n\r\n    graphic_context[\"imageSmoothingEnabled\"] = false;\r\n\r\n    cursor_element.style.position = \"absolute\";\r\n    cursor_element.style.backgroundColor = \"#ccc\";\r\n    cursor_element.style.width = \"7px\";\r\n    cursor_element.style.display = \"inline-block\";\r\n\r\n    text_screen.style.display = \"block\";\r\n    graphic_screen.style.display = \"none\";\r\n\r\n    this.bus = bus;\r\n\r\n    bus.register(\"screen-set-mode\", function(data)\r\n    {\r\n        this.set_mode(data);\r\n    }, this);\r\n\r\n    bus.register(\"screen-fill-buffer-end\", function(data)\r\n    {\r\n        this.update_buffer(data);\r\n    }, this);\r\n\r\n    bus.register(\"screen-put-char\", function(data)\r\n    {\r\n        //console.log(data);\r\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-update-cursor\", function(data)\r\n    {\r\n        this.update_cursor(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-update-cursor-scanline\", function(data)\r\n    {\r\n        this.update_cursor_scanline(data[0], data[1]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-clear\", function()\r\n    {\r\n        this.clear_screen();\r\n    }, this);\r\n\r\n    bus.register(\"screen-set-size-text\", function(data)\r\n    {\r\n        this.set_size_text(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-set-size-graphical\", function(data)\r\n    {\r\n        this.set_size_graphical(data[0], data[1], data[2], data[3]);\r\n    }, this);\r\n\r\n\r\n    this.init = function()\r\n    {\r\n        // not necessary, because this gets initialized by the bios early,\r\n        // but nicer to look at\r\n        this.set_size_text(80, 25);\r\n\r\n        this.timer();\r\n    };\r\n\r\n    this.make_screenshot = function()\r\n    {\r\n        try {\r\n            window.open(graphic_screen.toDataURL());\r\n        }\r\n        catch(e) {}\r\n    };\r\n\r\n    this.put_char = function(row, col, chr, bg_color, fg_color)\r\n    {\r\n        if(row < text_mode_height && col < text_mode_width)\r\n        {\r\n            var p = 3 * (row * text_mode_width + col);\r\n\r\n            text_mode_data[p] = chr;\r\n            text_mode_data[p + 1] = bg_color;\r\n            text_mode_data[p + 2] = fg_color;\r\n\r\n            changed_rows[row] = 1;\r\n        }\r\n    };\r\n\r\n    this.timer = function()\r\n    {\r\n        if(!stopped)\r\n        {\r\n            requestAnimationFrame(is_graphical ? update_graphical : update_text);\r\n        }\r\n    };\r\n\r\n    var update_text = function()\r\n    {\r\n        for(var i = 0; i < text_mode_height; i++)\r\n        {\r\n            if(changed_rows[i])\r\n            {\r\n                screen.text_update_row(i);\r\n                changed_rows[i] = 0;\r\n            }\r\n        }\r\n\r\n        this.timer();\r\n    }.bind(this);\r\n\r\n    var update_graphical = function()\r\n    {\r\n        this.bus.send(\"screen-fill-buffer\");\r\n        this.timer();\r\n    }.bind(this);\r\n\r\n    this.destroy = function()\r\n    {\r\n        stopped = true;\r\n    };\r\n\r\n    this.set_mode = function(graphical)\r\n    {\r\n        is_graphical = graphical;\r\n\r\n        if(graphical)\r\n        {\r\n            text_screen.style.display = \"none\";\r\n            graphic_screen.style.display = \"block\";\r\n        }\r\n        else\r\n        {\r\n            text_screen.style.display = \"block\";\r\n            graphic_screen.style.display = \"none\";\r\n        }\r\n    };\r\n\r\n    this.clear_screen = function()\r\n    {\r\n        graphic_context.fillStyle = \"#000\";\r\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\r\n    };\r\n\r\n    /**\r\n     * @param {number} cols\r\n     * @param {number} rows\r\n     */\r\n    this.set_size_text = function(cols, rows)\r\n    {\r\n        if(cols === text_mode_width && rows === text_mode_height)\r\n        {\r\n            return;\r\n        }\r\n\r\n        changed_rows = new Int8Array(rows);\r\n        text_mode_data = new Int32Array(cols * rows * 3);\r\n\r\n        text_mode_width = cols;\r\n        text_mode_height = rows;\r\n\r\n        while(text_screen.childNodes.length > rows)\r\n        {\r\n            text_screen.removeChild(text_screen.firstChild);\r\n        }\r\n\r\n        while(text_screen.childNodes.length < rows)\r\n        {\r\n            text_screen.appendChild(document.createElement(\"div\"));\r\n        }\r\n\r\n        for(var i = 0; i < rows; i++)\r\n        {\r\n            this.text_update_row(i);\r\n        }\r\n\r\n        update_scale_text();\r\n    };\r\n\r\n    this.set_size_graphical = function(width, height, buffer_width, buffer_height)\r\n    {\r\n        if(DEBUG_SCREEN_LAYERS)\r\n        {\r\n            // Draw the entire buffer. Useful for debugging\r\n            // panning / page flipping / screen splitting code for both\r\n            // v86 developers and os developers\r\n            width = buffer_width;\r\n            height = buffer_height;\r\n        }\r\n\r\n        graphic_screen.style.display = \"block\";\r\n\r\n        graphic_screen.width = width;\r\n        graphic_screen.height = height;\r\n\r\n        //graphic_screen.style.width = width * scale_x + \"px\";\r\n        //graphic_screen.style.height = height * scale_y + \"px\";\r\n\r\n        // Make sure to call this here, because pixels are transparent otherwise\r\n        //screen.clear_screen();\r\n\r\n        graphic_image_data = graphic_context.createImageData(buffer_width, buffer_height);\r\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\r\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\r\n\r\n        graphical_mode_width = width;\r\n        graphical_mode_height = height;\r\n\r\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\r\n        update_scale_graphic();\r\n    };\r\n\r\n    this.set_scale = function(s_x, s_y)\r\n    {\r\n        scale_x = s_x;\r\n        scale_y = s_y;\r\n\r\n        update_scale_text();\r\n        update_scale_graphic();\r\n    };\r\n    this.set_scale(scale_x, scale_y);\r\n\r\n    function update_scale_text()\r\n    {\r\n        elem_set_scale(text_screen, scale_x, scale_y, true);\r\n    }\r\n\r\n    function update_scale_graphic()\r\n    {\r\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\r\n    }\r\n\r\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\r\n    {\r\n        elem.style.width = \"\";\r\n        elem.style.height = \"\";\r\n\r\n        if(use_scale)\r\n        {\r\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = \"\";\r\n        }\r\n\r\n        var rectangle = elem.getBoundingClientRect();\r\n\r\n        if(use_scale)\r\n        {\r\n            var scale_str = \"\";\r\n\r\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\r\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\r\n\r\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = scale_str;\r\n        }\r\n        else\r\n        {\r\n            // unblur non-fractional scales\r\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\r\n            {\r\n                graphic_screen.style.imageRendering = \"-moz-crisp-edges\";\r\n                graphic_screen.style.imageRendering = \"moz-crisp-edges\";\r\n                graphic_screen.style.imageRendering = \"webkit-optimize-contrast\";\r\n                graphic_screen.style.imageRendering = \"o-crisp-edges\";\r\n                graphic_screen.style.imageRendering = \"pixelated\";\r\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\r\n            }\r\n            else\r\n            {\r\n                graphic_screen.style.imageRendering = \"\";\r\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\r\n            }\r\n\r\n            // undo fractional css-to-device pixel ratios\r\n            var device_pixel_ratio = window.devicePixelRatio || 1;\r\n            if(device_pixel_ratio % 1 !== 0)\r\n            {\r\n                scale_x /= device_pixel_ratio;\r\n                scale_y /= device_pixel_ratio;\r\n            }\r\n        }\r\n\r\n        if(scale_x !== 1)\r\n        {\r\n            elem.style.width = rectangle.width * scale_x + \"px\";\r\n        }\r\n        if(scale_y !== 1)\r\n        {\r\n            elem.style.height = rectangle.height * scale_y + \"px\";\r\n        }\r\n    }\r\n\r\n    this.update_cursor_scanline = function(start, end)\r\n    {\r\n        if(start & 0x20)\r\n        {\r\n            cursor_element.style.display = \"none\";\r\n        }\r\n        else\r\n        {\r\n            cursor_element.style.display = \"inline\";\r\n\r\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\r\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\r\n        }\r\n    };\r\n\r\n    this.update_cursor = function(row, col)\r\n    {\r\n        if(row !== cursor_row || col !== cursor_col)\r\n        {\r\n            changed_rows[row] = 1;\r\n            changed_rows[cursor_row] = 1;\r\n\r\n            cursor_row = row;\r\n            cursor_col = col;\r\n        }\r\n    };\r\n\r\n    this.text_update_row = function(row)\r\n    {\r\n        var offset = 3 * row * text_mode_width,\r\n            row_element,\r\n            color_element,\r\n            fragment;\r\n\r\n        var bg_color,\r\n            fg_color,\r\n            text;\r\n\r\n        row_element = text_screen.childNodes[row];\r\n        fragment = document.createElement(\"div\");\r\n\r\n        for(var i = 0; i < text_mode_width; )\r\n        {\r\n            color_element = document.createElement(\"span\");\r\n\r\n            bg_color = text_mode_data[offset + 1];\r\n            fg_color = text_mode_data[offset + 2];\r\n\r\n            color_element.style.backgroundColor = number_as_color(bg_color);\r\n            color_element.style.color = number_as_color(fg_color);\r\n\r\n            text = \"\";\r\n\r\n            // put characters of the same color in one element\r\n            while(i < text_mode_width &&\r\n                text_mode_data[offset + 1] === bg_color &&\r\n                text_mode_data[offset + 2] === fg_color)\r\n            {\r\n                var ascii = text_mode_data[offset];\r\n\r\n                text += charmap[ascii];\r\n\r\n                i++;\r\n                offset += 3;\r\n\r\n                if(row === cursor_row)\r\n                {\r\n                    if(i === cursor_col)\r\n                    {\r\n                        // next row will be cursor\r\n                        // create new element\r\n                        break;\r\n                    }\r\n                    else if(i === cursor_col + 1)\r\n                    {\r\n                        // found the cursor\r\n                        fragment.appendChild(cursor_element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            color_element.textContent = text;\r\n            fragment.appendChild(color_element);\r\n        }\r\n\r\n        row_element.parentNode.replaceChild(fragment, row_element);\r\n    };\r\n\r\n    this.update_buffer = function(layers)\r\n    {\r\n        if(DEBUG_SCREEN_LAYERS)\r\n        {\r\n            // Draw the entire buffer. Useful for debugging\r\n            // panning / page flipping / screen splitting code for both\r\n            // v86 developers and os developers\r\n            graphic_context.putImageData(\r\n                graphic_image_data,\r\n                0, 0\r\n            );\r\n\r\n            // For each visible layer that would've been drawn, draw a\r\n            // rectangle to visualise the layer instead.\r\n            graphic_context.strokeStyle = \"#0F0\";\r\n            graphic_context.lineWidth = 4;\r\n            layers.forEach((layer) =>\r\n            {\r\n                graphic_context.strokeRect(\r\n                    layer.buffer_x,\r\n                    layer.buffer_y,\r\n                    layer.buffer_width,\r\n                    layer.buffer_height\r\n                );\r\n            });\r\n            graphic_context.lineWidth = 1;\r\n            return;\r\n        }\r\n\r\n        layers.forEach((layer) =>\r\n        {\r\n            graphic_context.putImageData(\r\n                graphic_image_data,\r\n                layer.screen_x - layer.buffer_x,\r\n                layer.screen_y - layer.buffer_y,\r\n                layer.buffer_x,\r\n                layer.buffer_y,\r\n                layer.buffer_width,\r\n                layer.buffer_height\r\n            );\r\n        });\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\n\r\n","// -------------------------------------------------\r\n// --------------------- 9P ------------------------\r\n// -------------------------------------------------\r\n// Implementation of the 9p filesystem device following the \r\n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\r\n\r\n\"use strict\";\r\n\r\n// TODO\r\n// flush\r\n// lock?\r\n// correct hard links\r\n\r\nvar EPERM = 1;       /* Operation not permitted */\r\nvar ENOENT = 2;      /* No such file or directory */\r\nvar EINVAL = 22;     /* Invalid argument */\r\nvar ENOTSUPP = 524;  /* Operation is not supported */\r\nvar ENOTEMPTY = 39;  /* Directory not empty */\r\nvar EPROTO    = 71   /* Protocol error */\r\n\r\nvar P9_SETATTR_MODE = 0x00000001;\r\nvar P9_SETATTR_UID = 0x00000002;\r\nvar P9_SETATTR_GID = 0x00000004;\r\nvar P9_SETATTR_SIZE = 0x00000008;\r\nvar P9_SETATTR_ATIME = 0x00000010;\r\nvar P9_SETATTR_MTIME = 0x00000020;\r\nvar P9_SETATTR_CTIME = 0x00000040;\r\nvar P9_SETATTR_ATIME_SET = 0x00000080;\r\nvar P9_SETATTR_MTIME_SET = 0x00000100;\r\n\r\nvar P9_STAT_MODE_DIR = 0x80000000;\r\nvar P9_STAT_MODE_APPEND = 0x40000000;\r\nvar P9_STAT_MODE_EXCL = 0x20000000;\r\nvar P9_STAT_MODE_MOUNT = 0x10000000;\r\nvar P9_STAT_MODE_AUTH = 0x08000000;\r\nvar P9_STAT_MODE_TMP = 0x04000000;\r\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\r\nvar P9_STAT_MODE_LINK = 0x01000000;\r\nvar P9_STAT_MODE_DEVICE = 0x00800000;\r\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\r\nvar P9_STAT_MODE_SOCKET = 0x00100000;\r\nvar P9_STAT_MODE_SETUID = 0x00080000;\r\nvar P9_STAT_MODE_SETGID = 0x00040000;\r\nvar P9_STAT_MODE_SETVTX = 0x00010000;\r\n\r\nvar FID_NONE = -1;\r\nvar FID_INODE = 1;\r\nvar FID_XATTR = 2;\r\n\r\n/** \r\n * @constructor \r\n *\r\n * @param {FS} filesystem\r\n */\r\nfunction Virtio9p(filesystem, bus) {\r\n    /** @const @type {FS} */\r\n    this.fs = filesystem;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    this.SendReply = function(x, y) {};\r\n    this.deviceid = 0x9; // 9p filesystem\r\n    this.hostfeature = 0x1; // mountpoint\r\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\r\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\r\n\r\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\r\n    this.VERSION = \"9P2000.L\";\r\n    this.BLOCKSIZE = 8192; // Let's define one page.\r\n    this.msize = 8192; // maximum message size\r\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\r\n    this.replybuffersize = 0;\r\n\r\n    this.fids = [];\r\n}\r\n\r\nVirtio9p.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.deviceid;\r\n    state[1] = this.hostfeature;\r\n    state[2] = this.configspace;\r\n    state[3] = this.VERSION;\r\n    state[4] = this.BLOCKSIZE;\r\n    state[5] = this.msize;\r\n    state[6] = this.replybuffer;\r\n    state[7] = this.replybuffersize;\r\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\r\n\r\n    return state;\r\n};\r\n\r\nVirtio9p.prototype.set_state = function(state)\r\n{\r\n    this.deviceid = state[0];\r\n    this.hostfeature = state[1];\r\n    this.configspace = state[2];\r\n    this.VERSION = state[3];\r\n    this.BLOCKSIZE = state[4];\r\n    this.msize = state[5];\r\n    this.replybuffer = state[6];\r\n    this.replybuffersize = state[7];\r\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\r\n};\r\n\r\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\r\n    return {inodeid: inode, type: type, uid: uid};\r\n}\r\n\r\nVirtio9p.prototype.Reset = function() {\r\n    this.fids = [];\r\n}\r\n\r\n\r\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\r\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\r\n    if ((payloadsize+7) >= this.replybuffer.length) {\r\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\r\n    }\r\n    //for(var i=0; i<payload.length; i++)\r\n    //    this.replybuffer[7+i] = payload[i];\r\n    this.replybuffersize = payloadsize+7;\r\n    return;\r\n}\r\n\r\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\r\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\r\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\r\n    this.BuildReply(6, tag, size);\r\n}\r\n\r\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\r\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\r\n    var size = header[0];\r\n    var id = header[1];\r\n    var tag = header[2];\r\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\r\n\r\n    switch(id)\r\n    {\r\n        case 8: // statfs\r\n            size = this.fs.GetTotalSize(); // size used by all files\r\n            var space = this.fs.GetSpace();\r\n            var req = [];\r\n            req[0] = 0x01021997;\r\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\r\n            req[2] = Math.floor(space/req[1]); // free blocks\r\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\r\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\r\n            req[5] = this.fs.inodes.length; // total number of inodes\r\n            req[6] = 1024*1024;\r\n            req[7] = 0; // file system id?\r\n            req[8] = 256; // maximum length of filenames\r\n\r\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\r\n            this.BuildReply(id, tag, size);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 112: // topen\r\n        case 12: // tlopen\r\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var mode = req[1];\r\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\r\n            var idx = this.fids[fid].inodeid;\r\n            var inode = this.fs.GetInode(idx);\r\n            message.Debug(\"file open \" + inode.name);\r\n            //if (inode.status == STATUS_LOADING) return;\r\n            var ret = this.fs.OpenInode(idx, mode);\r\n\r\n            this.fs.AddEvent(this.fids[fid].inodeid,\r\n                function() {\r\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\r\n                    req[0] = inode.qid;\r\n                    req[1] = this.msize - 24;\r\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\r\n                    this.BuildReply(id, tag, 13+4);\r\n                    this.SendReply(0, index);\r\n                }.bind(this)\r\n            );\r\n            break;\r\n\r\n        case 70: // link (just copying)\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\r\n            var dfid = req[0];\r\n            var fid = req[1];\r\n            var name = req[2];\r\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\r\n            var inode = this.fs.CreateInode();\r\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\r\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\r\n            //inode = inodetarget;\r\n            inode.mode = inodetarget.mode;\r\n            inode.size = inodetarget.size;\r\n            inode.symlink = inodetarget.symlink;\r\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\r\n            for(var i=0; i<inode.size; i++) {\r\n                data[i] = targetdata[i];\r\n            }\r\n            inode.name = name;\r\n            inode.parentid = this.fids[dfid].inodeid;\r\n            this.fs.PushInode(inode);\r\n            \r\n            //inode.uid = inodetarget.uid;\r\n            //inode.gid = inodetarget.gid;\r\n            //inode.mode = inodetarget.mode | S_IFLNK;\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);       \r\n            break;\r\n\r\n        case 16: // symlink\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var symgt = req[2];\r\n            var gid = req[3];\r\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \r\n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 18: // mknod\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var mode = req[2];\r\n            var major = req[3];\r\n            var minor = req[4];\r\n            var gid = req[5];\r\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\r\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.mode = mode;\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n\r\n        case 22: // TREADLINK\r\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\r\n            var fid = req[0];\r\n            message.Debug(\"[readlink] fid=\" + fid);\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, size);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n\r\n        case 72: // tmkdir\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var mode = req[2];\r\n            var gid = req[3];\r\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \r\n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.mode = mode | S_IFDIR;\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 14: // tlcreate\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var flags = req[2];\r\n            var mode = req[3];\r\n            var gid = req[4];\r\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \r\n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\r\n            this.fids[fid].inodeid = idx;\r\n            this.fids[fid].type = FID_INODE;\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            inode.mode = mode;\r\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13+4);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 52: // lock always suceed\r\n            message.Debug(\"lock file\\n\");\r\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 1);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        /*\r\n        case 54: // getlock\r\n            break;        \r\n        */\r\n\r\n        case 24: // getattr\r\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\r\n            var fid = req[0];\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\r\n            if(!inode || inode.status === STATUS_UNLINKED)\r\n            {\r\n                message.Debug(\"getattr: unlinked\");\r\n                this.SendError(tag, \"No such file or directory\", ENOENT);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            req[0] |= 0x1000; // P9_STATS_GEN\r\n\r\n            req[0] = req[1]; // request mask\r\n            req[1] = inode.qid;\r\n\r\n            req[2] = inode.mode; \r\n            req[3] = inode.uid; // user id\r\n            req[4] = inode.gid; // group id\r\n            \r\n            req[5] = inode.nlinks; // number of hard links\r\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\r\n            req[7] = inode.size; // size low\r\n            req[8] = this.BLOCKSIZE;\r\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\r\n            req[10] = inode.atime; // atime\r\n            req[11] = 0x0;\r\n            req[12] = inode.mtime; // mtime\r\n            req[13] = 0x0;\r\n            req[14] = inode.ctime; // ctime\r\n            req[15] = 0x0;\r\n            req[16] = 0x0; // btime\r\n            req[17] = 0x0; \r\n            req[18] = 0x0; // st_gen\r\n            req[19] = 0x0; // data_version\r\n            marshall.Marshall([\r\n            \"d\", \"Q\", \r\n            \"w\",  \r\n            \"w\", \"w\", \r\n            \"d\", \"d\", \r\n            \"d\", \"d\", \"d\",\r\n            \"d\", \"d\", // atime\r\n            \"d\", \"d\", // mtime\r\n            \"d\", \"d\", // ctime\r\n            \"d\", \"d\", // btime\r\n            \"d\", \"d\",\r\n            ], req, this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 26: // setattr\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \r\n                \"w\", // mode \r\n                \"w\", \"w\", // uid, gid\r\n                \"d\", // size\r\n                \"d\", \"d\", // atime\r\n                \"d\", \"d\"] // mtime\r\n            , GetByte);\r\n            var fid = req[0];\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\r\n            if (req[1] & P9_SETATTR_MODE) {\r\n                inode.mode = req[2];\r\n            }\r\n            if (req[1] & P9_SETATTR_UID) {\r\n                inode.uid = req[3];\r\n            }\r\n            if (req[1] & P9_SETATTR_GID) {\r\n                inode.gid = req[4];\r\n            }\r\n            if (req[1] & P9_SETATTR_ATIME) {\r\n                inode.atime = Math.floor((new Date()).getTime()/1000);\r\n            }\r\n            if (req[1] & P9_SETATTR_MTIME) {\r\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\r\n            }\r\n            if (req[1] & P9_SETATTR_CTIME) {\r\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\r\n            }\r\n            if (req[1] & P9_SETATTR_ATIME_SET) {\r\n                inode.atime = req[6];\r\n            }\r\n            if (req[1] & P9_SETATTR_MTIME_SET) {\r\n                inode.mtime = req[8];\r\n            }\r\n            if (req[1] & P9_SETATTR_SIZE) {\r\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 50: // fsync\r\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\r\n            var fid = req[0];\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 40: // TREADDIR\r\n        case 116: // read\r\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var offset = req[1];\r\n            var count = req[2];\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\r\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\r\n            if(!inode || inode.status === STATUS_UNLINKED)\r\n            {\r\n                message.Debug(\"read/treaddir: unlinked\");\r\n                this.SendError(tag, \"No such file or directory\", ENOENT);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            if (this.fids[fid].type == FID_XATTR) {\r\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\r\n                for(var i=0; i<count; i++)\r\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\r\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\r\n                this.BuildReply(id, tag, 4 + count);\r\n                this.SendReply(0, index);\r\n            } else {\r\n                var file = this.fs.inodes[this.fids[fid].inodeid];\r\n                this.bus.send(\"9p-read-start\");\r\n\r\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\r\n                this.fs.AddEvent(this.fids[fid].inodeid,\r\n                    function() {\r\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\r\n\r\n                        if (inode.size < offset+count) count = inode.size - offset;\r\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\r\n                        if(data) {\r\n                            for(var i=0; i<count; i++)\r\n                                this.replybuffer[7+4+i] = data[offset+i];\r\n                        }\r\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\r\n                        this.BuildReply(id, tag, 4 + count);\r\n                        this.SendReply(0, index);\r\n                    }.bind(this)\r\n                );\r\n            }\r\n            break;\r\n\r\n        case 118: // write\r\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var offset = req[1];\r\n            var count = req[2];\r\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\r\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\r\n\r\n            var file = this.fs.inodes[this.fids[fid].inodeid];\r\n            this.bus.send(\"9p-write-end\", [file.name, count]);\r\n\r\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 4);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 74: // RENAMEAT\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\r\n            var olddirfid = req[0];\r\n            var oldname = req[1];\r\n            var newdirfid = req[2];\r\n            var newname = req[3];\r\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\r\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\r\n            if (ret == false) {\r\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 76: // TUNLINKAT\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\r\n            var dirfd = req[0];\r\n            var name = req[1];\r\n            var flags = req[2];\r\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\r\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\r\n            if (fid == -1) {\r\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\r\n                   this.SendReply(0, index);\r\n                   break;\r\n            }\r\n            var ret = this.fs.Unlink(fid);\r\n            if (!ret) {\r\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 100: // version\r\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\r\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\r\n            this.msize = version[0];\r\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, size);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 104: // attach\r\n            // return root directorie's QID\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var uid = req[4];\r\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\r\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 108: // tflush\r\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\r\n            var oldtag = req[0];\r\n            message.Debug(\"[flush] \" + tag);\r\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n\r\n        case 110: // walk\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\r\n            var fid = req[0];\r\n            var nwfid = req[1];\r\n            var nwname = req[2];\r\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\r\n            if (nwname == 0) {\r\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\r\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\r\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\r\n                this.BuildReply(id, tag, 2);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            var wnames = [];\r\n            for(var i=0; i<nwname; i++) {\r\n                wnames.push(\"s\");\r\n            }\r\n            var walk = marshall.Unmarshall2(wnames, GetByte);\r\n            var idx = this.fids[fid].inodeid;\r\n            var offset = 7+2;\r\n            var nwidx = 0;\r\n            //console.log(idx, this.fs.inodes[idx]);\r\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\r\n            for(var i=0; i<nwname; i++) {\r\n                idx = this.fs.Search(idx, walk[i]);\r\n\r\n                if (idx == -1) {\r\n                   message.Debug(\"Could not find: \" + walk[i]);\r\n                   break;\r\n                }\r\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\r\n                nwidx++;\r\n                //message.Debug(this.fids[nwfid].inodeid);\r\n                //this.fids[nwfid].inodeid = idx;\r\n                //this.fids[nwfid].type = FID_INODE;\r\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\r\n            }\r\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, offset-7);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 120: // clunk\r\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\r\n            message.Debug(\"[clunk]: fid=\" + req[0]);\r\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\r\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\r\n                this.fids[req[0]].inodeid = -1;\r\n                this.fids[req[0]].type = FID_NONE;\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 32: // txattrcreate\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var attr_size = req[2];\r\n            var flags = req[3];\r\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\r\n            //this.SendReply(0, index);\r\n            break;\r\n\r\n        case 30: // xattrwalk\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\r\n            var fid = req[0];\r\n            var newfid = req[1];\r\n            var name = req[2];\r\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\r\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\r\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\r\n            //this.fids[newfid].type = FID_NONE;\r\n            var length = 0;\r\n            if (name == \"security.capability\") {\r\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\r\n                this.fids[newfid].type = FID_XATTR;\r\n            }\r\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 8);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        default:\r\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\r\n            message.Abort();\r\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\r\n            //this.SendReply(0, index);\r\n            break;\r\n    }\r\n\r\n    //consistency checks if there are problems with the filesystem\r\n    //this.fs.Check();\r\n}\r\n","// -------------------------------------------------\r\n// ----------------- FILESYSTEM---------------------\r\n// -------------------------------------------------\r\n// Implementation of a unix filesystem in memory.\r\n\r\n\"use strict\";\r\n\r\nvar S_IRWXUGO = 0x1FF;\r\nvar S_IFMT = 0xF000;\r\nvar S_IFSOCK = 0xC000;\r\nvar S_IFLNK = 0xA000;\r\nvar S_IFREG = 0x8000;\r\nvar S_IFBLK = 0x6000;\r\nvar S_IFDIR = 0x4000;\r\nvar S_IFCHR = 0x2000;\r\n\r\n//var S_IFIFO  0010000\r\n//var S_ISUID  0004000\r\n//var S_ISGID  0002000\r\n//var S_ISVTX  0001000\r\n\r\nvar O_RDONLY = 0x0000; // open for reading only \r\nvar O_WRONLY = 0x0001; // open for writing only\r\nvar O_RDWR = 0x0002; // open for reading and writing\r\nvar O_ACCMODE = 0x0003; // mask for above modes\r\n\r\nvar STATUS_INVALID = -0x1;\r\nvar STATUS_OK = 0x0;\r\nvar STATUS_OPEN = 0x1;\r\nvar STATUS_ON_SERVER = 0x2;\r\nvar STATUS_LOADING = 0x3;\r\nvar STATUS_UNLINKED = 0x4;\r\n\r\n\r\n/** @const */ var JSONFS_VERSION = 2;\r\n\r\n\r\n/** @const */ var JSONFS_IDX_NAME = 0\r\n/** @const */ var JSONFS_IDX_SIZE = 1\r\n/** @const */ var JSONFS_IDX_MTIME = 2\r\n/** @const */ var JSONFS_IDX_MODE = 3\r\n/** @const */ var JSONFS_IDX_UID = 4\r\n/** @const */ var JSONFS_IDX_GID = 5\r\n/** @const */ var JSONFS_IDX_TARGET = 6\r\n\r\n\r\n/** @constructor */\r\nfunction FS(baseurl) {\r\n    /** @type {Array.<Inode>} */\r\n    this.inodes = [];\r\n    this.events = [];\r\n\r\n    this.baseurl = baseurl;\r\n\r\n    this.qidnumber = 0x0;\r\n    this.filesinloadingqueue = 0;\r\n    this.OnLoaded = function() {};\r\n\r\n    //this.tar = new TAR(this);\r\n\r\n    this.inodedata = {};\r\n\r\n    this.total_size = 256 * 1024 * 1024 * 1024;\r\n    this.used_size = 0;\r\n\r\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\r\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\r\n    //RegisterMessage(\"tar\",\r\n    //    function(data) {\r\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\r\n    //    }.bind(this)\r\n    //);\r\n    //RegisterMessage(\"sync\",\r\n    //    function(data) {\r\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\r\n    //    }.bind(this)\r\n    //);\r\n\r\n    // root entry\r\n    this.CreateDirectory(\"\", -1);\r\n}\r\n\r\n\r\n// -----------------------------------------------------\r\n\r\nFS.prototype.AddEvent = function(id, OnEvent) {\r\n    var inode = this.GetInode(id);\r\n    if (inode.status == STATUS_OK) {\r\n        OnEvent();\r\n        return;\r\n    }\r\n    this.events.push({id: id, OnEvent: OnEvent});    \r\n}\r\n\r\nFS.prototype.HandleEvent = function(id) {\r\n\r\n    if (this.filesinloadingqueue == 0) {\r\n        this.OnLoaded();\r\n        this.OnLoaded = function() {}\r\n    }\r\n    //message.Debug(\"number of events: \" + this.events.length);\r\n    var newevents = [];\r\n    for(var i=0; i<this.events.length; i++) {\r\n        if (this.events[i].id == id) {\r\n            this.events[i].OnEvent();\r\n        } else {\r\n            newevents.push(this.events[i]);\r\n        }\r\n    }\r\n    this.events = newevents;\r\n}\r\n\r\nFS.prototype.OnJSONLoaded = function(fs)\r\n{\r\n    if(DEBUG)\r\n    {\r\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\r\n    }\r\n\r\n    //console.time(\"parse\");\r\n    var fsdata = JSON.parse(fs);\r\n    //console.timeEnd(\"parse\");\r\n\r\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\r\n    {\r\n        throw \"The filesystem JSON format has changed. \" +\r\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\r\n    }\r\n\r\n    var fsroot = fsdata[\"fsroot\"];\r\n    this.used_size = fsdata[\"size\"];\r\n\r\n    var me = this;\r\n\r\n    setTimeout(function()\r\n    {\r\n        //console.time(\"Load\");\r\n        //console.profile(\"Load\");\r\n        for(var i = 0; i < fsroot.length; i++) {\r\n            me.LoadRecursive(fsroot[i], 0);\r\n        }\r\n        //console.profileEnd(\"Load\");\r\n        //console.timeEnd(\"Load\");\r\n\r\n        //if(DEBUG)\r\n        //{\r\n        //    console.time(\"Check\");\r\n        //    me.Check();\r\n        //    console.timeEnd(\"Check\");\r\n        //}\r\n\r\n        me.OnLoaded();\r\n        me.OnLoaded = function() {};\r\n    }, 0);\r\n};\r\n\r\nFS.prototype.LoadRecursive = function(data, parentid)\r\n{\r\n    var inode = this.CreateInode();\r\n\r\n    inode.name = data[JSONFS_IDX_NAME]\r\n    inode.size = data[JSONFS_IDX_SIZE];\r\n    inode.mtime = data[JSONFS_IDX_MTIME];\r\n    inode.ctime = inode.mtime;\r\n    inode.atime = inode.mtime;\r\n    inode.mode = data[JSONFS_IDX_MODE];\r\n    inode.uid = data[JSONFS_IDX_UID];\r\n    inode.gid = data[JSONFS_IDX_GID];\r\n\r\n    inode.parentid = parentid;\r\n    this.inodes[inode.parentid].nlinks++;\r\n\r\n    var ifmt = inode.mode & S_IFMT;\r\n\r\n    if(ifmt === S_IFDIR)\r\n    {\r\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\r\n    }\r\n    else if(ifmt === S_IFREG)\r\n    {\r\n        inode.status = STATUS_ON_SERVER;\r\n        this.PushInode(inode);\r\n    }\r\n    else if(ifmt === S_IFLNK)\r\n    {\r\n        inode.symlink = data[JSONFS_IDX_TARGET];\r\n        this.PushInode(inode);\r\n    }\r\n    else if(ifmt === S_IFSOCK)\r\n    {\r\n        // socket: ignore\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\r\n    }\r\n}\r\n\r\nFS.prototype.LoadDir = function(inode, children)\r\n{\r\n    inode.updatedir = true;\r\n    inode.nlinks = 2; // . and ..\r\n\r\n    var p = this.inodes.length;\r\n    this.PushInode(inode);\r\n\r\n    for(var i = 0; i < children.length; i++) {\r\n        this.LoadRecursive(children[i], p);\r\n    }\r\n}\r\n\r\n// Loads the data from a url for a specific inode\r\nFS.prototype.LoadFile = function(idx) {\r\n    var inode = this.inodes[idx];\r\n    if (inode.status != STATUS_ON_SERVER) {\r\n        return;\r\n    }\r\n    inode.status = STATUS_LOADING;\r\n    this.filesinloadingqueue++;\r\n\r\n    //if (inode.compressed) {\r\n    //    inode.data = new Uint8Array(inode.size);\r\n    //    LoadBinaryResource(inode.url + \".bz2\",\r\n    //    function(buffer){\r\n    //        var buffer8 = new Uint8Array(buffer);\r\n    //        var ofs = 0;\r\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \r\n    //        inode.status = STATUS_OK;\r\n    //        this.filesinloadingqueue--;\r\n    //        this.HandleEvent(idx);            \r\n    //    }.bind(this), \r\n    //    function(error){throw error;});\r\n    //    return;\r\n    //}\r\n\r\n    if(this.baseurl)\r\n    {\r\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \r\n            function(buffer){\r\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\r\n                inode.size = data.length; // correct size if the previous was wrong. \r\n                inode.status = STATUS_OK;\r\n\r\n                this.filesinloadingqueue--;\r\n                this.HandleEvent(idx);            \r\n            }.bind(this), \r\n            function(error){throw error;});\r\n    }\r\n    else\r\n    {\r\n        // If baseurl is not set, we started with an empty filesystem. No files\r\n        // can be loaded\r\n    }\r\n}\r\n\r\n// -----------------------------------------------------\r\n\r\nFS.prototype.PushInode = function(inode) {\r\n    if (inode.parentid != -1) {\r\n        this.inodes.push(inode);\r\n        inode.fid = this.inodes.length - 1;\r\n        var parent_node = this.inodes[inode.parentid];\r\n        parent_node.updatedir = true;\r\n        inode.nextid = parent_node.firstid;\r\n        parent_node.firstid = this.inodes.length-1;\r\n        return;\r\n    } else {\r\n        if (this.inodes.length == 0) { // if root directory\r\n            this.inodes.push(inode);\r\n            return;\r\n        }\r\n    }\r\n\r\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\r\n    message.Abort();\r\n\r\n}\r\n\r\n/** @constructor */\r\nfunction Inode(qidnumber)\r\n{\r\n    this.updatedir = false; // did the directory listing changed?\r\n    this.parentid = -1;\r\n    this.firstid = -1; // first file id in directory\r\n    this.nextid = -1; // next id in directory\r\n    this.status = 0;\r\n    this.name = \"\";\r\n    this.size = 0x0;\r\n    this.uid = 0x0;\r\n    this.gid = 0x0;\r\n    this.fid = 0;\r\n    this.ctime = 0;\r\n    this.atime = 0;\r\n    this.mtime = 0;\r\n    this.major = 0x0;\r\n    this.minor = 0x0;\r\n    //data = new Uint8Array(0);\r\n    this.symlink = \"\";\r\n    this.nlinks = 1;\r\n    this.mode = 0x01ED;\r\n    this.qid = {\r\n        type: 0,\r\n        version: 0,\r\n        path: qidnumber,\r\n    };\r\n    this.caps = undefined;\r\n\r\n    //this.qid_type = 0;\r\n    //this.qid_version = 0;\r\n    //this.qid_path = qidnumber;\r\n}\r\n\r\nFS.prototype.CreateInode = function() {\r\n    //console.log(\"CreateInode\", Error().stack);\r\n    return new Inode(++this.qidnumber);\r\n};\r\n\r\n\r\nFS.prototype.CreateDirectory = function(name, parentid) {\r\n    var x = this.CreateInode();\r\n    x.name = name;\r\n    x.parentid = parentid;\r\n    x.mode = 0x01FF | S_IFDIR;\r\n    x.updatedir = true;\r\n    x.nlinks = 2; // . and ..\r\n    if (parentid >= 0) {\r\n        x.uid = this.inodes[parentid].uid;\r\n        x.gid = this.inodes[parentid].gid;\r\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\r\n        this.inodes[parentid].nlinks++;\r\n    }\r\n    x.qid.type = S_IFDIR >> 8;\r\n    this.PushInode(x);\r\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\r\n    return this.inodes.length-1;\r\n}\r\n\r\nFS.prototype.CreateFile = function(filename, parentid) {\r\n    var x = this.CreateInode();\r\n    x.name = filename;\r\n    x.parentid = parentid;\r\n    x.uid = this.inodes[parentid].uid;\r\n    x.gid = this.inodes[parentid].gid;\r\n    this.inodes[parentid].nlinks++;\r\n    x.qid.type = S_IFREG >> 8;\r\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\r\n    this.PushInode(x);\r\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\r\n    return this.inodes.length-1;\r\n}\r\n\r\n\r\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\r\n    var x = this.CreateInode();\r\n    x.name = filename;\r\n    x.parentid = parentid;\r\n    x.major = major;\r\n    x.minor = minor;\r\n    x.uid = this.inodes[parentid].uid;\r\n    x.gid = this.inodes[parentid].gid;\r\n    this.inodes[parentid].nlinks++;\r\n    x.qid.type = S_IFSOCK >> 8;\r\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\r\n    this.PushInode(x);\r\n    return this.inodes.length-1;\r\n}\r\n     \r\nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\r\n    var x = this.CreateInode();\r\n    x.name = filename;\r\n    x.parentid = parentid;\r\n    x.uid = this.inodes[parentid].uid;\r\n    x.gid = this.inodes[parentid].gid;\r\n    this.inodes[parentid].nlinks++;\r\n    x.qid.type = S_IFLNK >> 8;\r\n    x.symlink = symlink;\r\n    x.mode = S_IFLNK;\r\n    this.PushInode(x);\r\n    return this.inodes.length-1;\r\n}\r\n\r\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\r\n    var id = this.CreateFile(filename, parentid);\r\n    var x = this.inodes[id];\r\n    var data = this.inodedata[id] = new Uint8Array(str.length);\r\n    x.size = str.length;\r\n    for (var j = 0; j < str.length; j++) {\r\n        data[j] = str.charCodeAt(j);\r\n    }\r\n    return id;\r\n}\r\n\r\n/** \r\n * @param {Uint8Array} buffer\r\n */\r\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\r\n    var id = this.CreateFile(filename, parentid);\r\n    var x = this.inodes[id];\r\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\r\n    data.set(buffer);\r\n    x.size = buffer.length;\r\n    return id;\r\n}\r\n\r\n\r\nFS.prototype.OpenInode = function(id, mode) {\r\n    var inode = this.GetInode(id);\r\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\r\n        this.FillDirectory(id);\r\n    }\r\n    /*\r\n    var type = \"\";\r\n    switch(inode.mode&S_IFMT) {\r\n        case S_IFREG: type = \"File\"; break;\r\n        case S_IFBLK: type = \"Block Device\"; break;\r\n        case S_IFDIR: type = \"Directory\"; break;\r\n        case S_IFCHR: type = \"Character Device\"; break;\r\n    }\r\n    */\r\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\r\n    if (inode.status == STATUS_ON_SERVER) {\r\n        this.LoadFile(id);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nFS.prototype.CloseInode = function(id) {\r\n    //message.Debug(\"close: \" + this.GetFullPath(id));\r\n    var inode = this.GetInode(id);\r\n    if (inode.status == STATUS_UNLINKED) {\r\n        //message.Debug(\"Filesystem: Delete unlinked file\");\r\n        inode.status = STATUS_INVALID;\r\n        delete this.inodedata[id];\r\n        inode.size = 0;\r\n    }\r\n}\r\n\r\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\r\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\r\n    if ((olddirid == newdirid) && (oldname == newname)) {\r\n        return true;\r\n    }\r\n    var oldid = this.Search(olddirid, oldname);\r\n    var oldpath = this.GetFullPath(oldid);\r\n    if (oldid == -1) {\r\n        return false;\r\n    }\r\n    var newid = this.Search(newdirid, newname);\r\n    if (newid != -1) {\r\n        this.Unlink(newid);\r\n    }\r\n\r\n    var idx = oldid; // idx contains the id which we want to rename\r\n    var inode = this.inodes[idx];\r\n\r\n    // remove inode ids\r\n    if (this.inodes[inode.parentid].firstid == idx) {\r\n        this.inodes[inode.parentid].firstid = inode.nextid;\r\n    } else {\r\n        var id = this.FindPreviousID(idx);\r\n        if (id == -1) {\r\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\r\n            message.Abort();\r\n        }\r\n        this.inodes[id].nextid = inode.nextid;\r\n    }\r\n\r\n    inode.parentid = newdirid;\r\n    inode.name = newname;\r\n    inode.qid.version++;\r\n\r\n    inode.nextid = this.inodes[inode.parentid].firstid;\r\n    this.inodes[inode.parentid].firstid = idx;\r\n\r\n    this.inodes[olddirid].updatedir = true;\r\n    this.inodes[newdirid].updatedir = true;\r\n    this.inodes[olddirid].nlinks--;\r\n    this.inodes[newdirid].nlinks++;\r\n\r\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\r\n    \r\n    return true;\r\n}\r\n\r\nFS.prototype.Write = function(id, offset, count, GetByte) {\r\n    this.NotifyListeners(id, 'write');\r\n    var inode = this.inodes[id];\r\n    var data = this.inodedata[id];\r\n\r\n    if (!data || data.length < (offset+count)) {\r\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\r\n        inode.size = offset + count;\r\n        data = this.inodedata[id];\r\n    } else\r\n    if (inode.size < (offset+count)) {\r\n        inode.size = offset + count;\r\n    }\r\n    for(var i=0; i<count; i++)\r\n        data[offset+i] = GetByte();\r\n}\r\n\r\nFS.prototype.Search = function(parentid, name) {\r\n    var id = this.inodes[parentid].firstid;\r\n    while(id != -1) {\r\n        if (this.inodes[id].parentid != parentid) { // consistency check\r\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\r\n        }\r\n        if (this.inodes[id].name == name) return id;\r\n        id = this.inodes[id].nextid;\r\n    }\r\n    return -1;\r\n}\r\n\r\nFS.prototype.GetTotalSize = function() {\r\n    return this.used_size;\r\n    //var size = 0;\r\n    //for(var i=0; i<this.inodes.length; i++) {\r\n    //    var d = this.inodes[i].data;\r\n    //    size += d ? d.length : 0;\r\n    //}\r\n    //return size;\r\n}\r\n\r\nFS.prototype.GetSpace = function() {\r\n    return this.total_size;\r\n};\r\n\r\nFS.prototype.GetFullPath = function(idx) {\r\n    var path = \"\";\r\n\r\n    while(idx != 0) {\r\n        path = \"/\" + this.inodes[idx].name + path;\r\n        idx = this.inodes[idx].parentid;\r\n    }\r\n    return path.substring(1);\r\n}\r\n\r\n// no double linked list. So, we need this\r\nFS.prototype.FindPreviousID = function(idx) {\r\n    var inode = this.GetInode(idx);\r\n    var id = this.inodes[inode.parentid].firstid;\r\n    while(id != -1) {\r\n        if (this.inodes[id].nextid == idx) return id;\r\n        id = this.inodes[id].nextid;\r\n    }\r\n    return id;\r\n}\r\n\r\nFS.prototype.Unlink = function(idx) {\r\n    this.NotifyListeners(idx, 'delete');\r\n    if (idx == 0) return false; // root node cannot be deleted\r\n    var inode = this.GetInode(idx);\r\n    //message.Debug(\"Unlink \" + inode.name);\r\n\r\n    // check if directory is not empty\r\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\r\n       if (inode.firstid != -1) return false;\r\n    }\r\n\r\n    // update ids\r\n    if (this.inodes[inode.parentid].firstid == idx) {\r\n        this.inodes[inode.parentid].firstid = inode.nextid;\r\n    } else {\r\n        var id = this.FindPreviousID(idx);\r\n        if (id == -1) {\r\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\r\n            message.Abort();\r\n        }\r\n        this.inodes[id].nextid = inode.nextid;\r\n    }\r\n    // don't delete the content. The file is still accessible\r\n    this.inodes[inode.parentid].updatedir = true;\r\n    this.inodes[inode.parentid].nlinks--;\r\n    inode.status = STATUS_UNLINKED;\r\n    inode.nextid = -1;\r\n    inode.firstid = -1;\r\n    inode.parentid = -1;\r\n    inode.nlinks--;\r\n    return true;\r\n}\r\n\r\nFS.prototype.GetInode = function(idx)\r\n{\r\n    if (isNaN(idx)) {\r\n        message.Debug(\"Error in filesystem: id is not a number \");\r\n        return 0;\r\n    }\r\n\r\n    if ((idx < 0) || (idx > this.inodes.length)) {\r\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\r\n        return 0;\r\n    }\r\n    return this.inodes[idx];\r\n}\r\n\r\nFS.prototype.ChangeSize = function(idx, newsize)\r\n{\r\n    var inode = this.GetInode(idx);\r\n    var temp = this.inodedata[idx];\r\n    //message.Debug(\"change size to: \" + newsize);\r\n    if (newsize == inode.size) return;\r\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\r\n    inode.size = newsize;\r\n    if(!temp) return;\r\n    var size = Math.min(temp.length, inode.size);\r\n    for(var i=0; i<size; i++) {\r\n        data[i] = temp[i];\r\n    }\r\n}\r\n\r\nFS.prototype.SearchPath = function(path) {\r\n    //path = path.replace(/\\/\\//g, \"/\");\r\n    path = path.replace(\"//\", \"/\");\r\n    var walk = path.split(\"/\");\r\n    var n = walk.length;\r\n    if (walk[n-1].length == 0) walk.pop();\r\n    if (walk[0].length == 0) walk.shift();\r\n    n = walk.length;\r\n\r\n    var parentid = 0;\r\n    var id = -1;\r\n    for(var i=0; i<n; i++) {\r\n        id = this.Search(parentid, walk[i]);        \r\n        if (id == -1) {\r\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\r\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\r\n        }\r\n        parentid = id;\r\n    }\r\n    return {id: id, parentid: parentid, name: walk[i]};\r\n}\r\n// -----------------------------------------------------\r\n\r\nFS.prototype.GetRecursiveList = function(dirid, list) {\r\n    var id = this.inodes[dirid].firstid;\r\n    while(id != -1) {\r\n        list.push(id);\r\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\r\n            this.GetRecursiveList(id, list);\r\n        }\r\n        id = this.inodes[id].nextid;\r\n    }\r\n}\r\n\r\nFS.prototype.MergeFile = function(file) {\r\n    message.Debug(\"Merge path:\" + file.name);\r\n    var ids = this.SearchPath(file.name);\r\n    if (ids.parentid == -1) return; // not even the path seems to exist\r\n    if (ids.id == -1) {\r\n        ids.id = this.CreateFile(ids.name, ids.parentid); \r\n    }\r\n    this.inodes[ids.id].data = file.data;\r\n    this.inodes[ids.id].size = file.data.length;\r\n    // Don't forget to update the timestamps !\r\n    this.inodes[ids.id].mtime = Math.floor((new Date()).getTime()/1000);\r\n    this.inodes[ids.id].atime = this.inodes[ids.id].mtime;\r\n    this.inodes[ids.id].ctime = this.inodes[ids.id].mtime;\r\n}\r\n\r\n\r\nFS.prototype.RecursiveDelete = function(path) {\r\n    var toDelete = []\r\n    var ids = this.SearchPath(path);\r\n    if (ids.parentid == -1 || ids.id == -1) return;\r\n    \r\n    this.GetRecursiveList(ids.id, toDelete);\r\n\r\n    for(var i=toDelete.length-1; i>=0; i--)\r\n        this.Unlink(toDelete[i]);\r\n\r\n}\r\n\r\nFS.prototype.DeleteNode = function(path) {\r\n    var ids = this.SearchPath(path);\r\n    if (ids.parentid == -1 || ids.id == -1) return;\r\n    \r\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\r\n        this.Unlink(ids.id);\r\n        return;\r\n    }\r\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\r\n        var toDelete = []\r\n        this.GetRecursiveList(ids.id, toDelete);\r\n        for(var i=toDelete.length-1; i>=0; i--)\r\n            this.Unlink(toDelete[i]);\r\n        this.Unlink(ids.id);\r\n        return;\r\n    }\r\n}\r\n\r\n/** @param {*=} info */\r\nFS.prototype.NotifyListeners = function(id, action, info) {\r\n    //if(info==undefined)\r\n    //    info = {};\r\n\r\n    //var path = this.GetFullPath(id);\r\n    //if (this.watchFiles[path] == true && action=='write') {\r\n    //  message.Send(\"WatchFileEvent\", path);\r\n    //}\r\n    //for (var directory in this.watchDirectories) {\r\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\r\n    //        var indexOf = path.indexOf(directory)\r\n    //        if(indexOf == 0 || indexOf == 1)\r\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \r\n    //    }\r\n    //}\r\n}\r\n\r\n\r\nFS.prototype.Check = function() {\r\n    for(var i=1; i<this.inodes.length; i++)\r\n    {\r\n        if (this.inodes[i].status == STATUS_INVALID) continue;\r\n        if (this.inodes[i].nextid == i) {\r\n            message.Debug(\"Error in filesystem: file points to itself\");\r\n            message.Abort();\r\n        }\r\n\r\n        var inode = this.GetInode(i);\r\n        if (inode.parentid < 0) {\r\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\r\n        }\r\n        var n = inode.name.length;\r\n        if (n == 0) {\r\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\r\n        }\r\n\r\n        for (var j in inode.name) {\r\n            var c = inode.name.charCodeAt(j);\r\n            if (c < 32) {\r\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\r\n            } \r\n        }\r\n    }\r\n}\r\n\r\nFS.prototype.FillDirectory = function(dirid) {\r\n    var inode = this.GetInode(dirid);\r\n    if (!inode.updatedir) return;\r\n    var parentid = inode.parentid;\r\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\r\n\r\n    // first get size\r\n    var size = 0;\r\n    var id = this.inodes[dirid].firstid;\r\n    while(id != -1) {\r\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\r\n        id = this.inodes[id].nextid;\r\n    }\r\n\r\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\r\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\r\n    //message.Debug(\"size of dir entry: \" + size);\r\n    var data = this.inodedata[dirid] = new Uint8Array(size);\r\n    inode.size = size;\r\n\r\n    var offset = 0x0;\r\n    offset += marshall.Marshall(\r\n        [\"Q\", \"d\", \"b\", \"s\"],\r\n        [this.inodes[dirid].qid, \r\n        offset+13+8+1+2+1, \r\n        this.inodes[dirid].mode >> 12, \r\n        \".\"],\r\n        data, offset);\r\n\r\n    offset += marshall.Marshall(\r\n        [\"Q\", \"d\", \"b\", \"s\"],\r\n        [this.inodes[parentid].qid,\r\n        offset+13+8+1+2+2, \r\n        this.inodes[parentid].mode >> 12, \r\n        \"..\"],\r\n        data, offset);\r\n\r\n    id = this.inodes[dirid].firstid;\r\n    while(id != -1) {\r\n        offset += marshall.Marshall(\r\n        [\"Q\", \"d\", \"b\", \"s\"],\r\n        [\r\n            this.inodes[id].qid,\r\n            offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\r\n            this.inodes[id].mode >> 12,\r\n            this.inodes[id].name\r\n        ],\r\n        data, offset);\r\n        id = this.inodes[id].nextid;\r\n    }\r\n    inode.updatedir = false;\r\n}\r\n\r\n\r\n// -----------------------------------------------------\r\n\r\n// only support for security.capabilities\r\n// should return a  \"struct vfs_cap_data\" defined in\r\n// linux/capability for format\r\n// check also:\r\n//   sys/capability.h\r\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\r\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\r\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\r\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\r\nFS.prototype.PrepareCAPs = function(id) {\r\n    var inode = this.GetInode(id);\r\n    if (inode.caps) return inode.caps.length;\r\n    inode.caps = new Uint8Array(12);\r\n    // format is little endian\r\n    // magic_etc (revision=0x01: 12 bytes)\r\n    inode.caps[0]  = 0x00;\r\n    inode.caps[1]  = 0x00;\r\n    inode.caps[2]  = 0x00;\r\n    inode.caps[3]  = 0x01;\r\n    // permitted (full capabilities)\r\n    inode.caps[4]  = 0xFF;\r\n    inode.caps[5]  = 0xFF;\r\n    inode.caps[6]  = 0xFF;\r\n    inode.caps[7]  = 0xFF;\r\n    // inheritable (full capabilities\r\n    inode.caps[8]  = 0xFF;\r\n    inode.caps[9]  = 0xFF;\r\n    inode.caps[10] = 0xFF;\r\n    inode.caps[11] = 0xFF;\r\n\r\n    return inode.caps.length;\r\n}\r\n\r\n","\"use strict\";\r\n\r\n/**\r\n * The ISA IO bus\r\n * Devices register their ports here\r\n *\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction IO(cpu)\r\n{\r\n    /** @const */\r\n    this.ports = [];\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    for(var i = 0; i < 0x10000; i++)\r\n    {\r\n        this.ports[i] = this.create_empty_entry();\r\n    }\r\n\r\n    var memory_size = cpu.memory_size;\r\n\r\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\r\n    {\r\n        // avoid sparse arrays\r\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\r\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\r\n    }\r\n\r\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\r\n        function(addr) {\r\n            // read outside of the memory size\r\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\r\n            return 0xFF;\r\n        },\r\n        function(addr, value) {\r\n            // write outside of the memory size\r\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\r\n        },\r\n        function(addr) {\r\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\r\n            return -1;\r\n        },\r\n        function(addr, value) {\r\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\r\n        }\r\n    );\r\n}\r\n\r\nIO.prototype.create_empty_entry = function()\r\n{\r\n    return {\r\n        read8: this.empty_port_read8,\r\n        read16: this.empty_port_read16,\r\n        read32: this.empty_port_read32,\r\n\r\n        write8: this.empty_port_write,\r\n        write16: this.empty_port_write,\r\n        write32: this.empty_port_write,\r\n\r\n        device: undefined,\r\n    };\r\n};\r\n\r\nIO.prototype.empty_port_read8 = function()\r\n{\r\n    return 0xFF;\r\n};\r\n\r\nIO.prototype.empty_port_read16 = function()\r\n{\r\n    return 0xFFFF;\r\n};\r\n\r\nIO.prototype.empty_port_read32 = function()\r\n{\r\n    return -1;\r\n};\r\n\r\nIO.prototype.empty_port_write = function(x)\r\n{\r\n};\r\n\r\n\r\n/**\r\n * @param {number} port_addr\r\n * @param {Object} device\r\n * @param {function():number=} r8\r\n * @param {function():number=} r16\r\n * @param {function():number=} r32\r\n */\r\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\r\n{\r\n    dbg_assert(typeof port_addr === \"number\");\r\n    dbg_assert(typeof device === \"object\");\r\n    dbg_assert(!r8 || typeof r8 === \"function\");\r\n    dbg_assert(!r16 || typeof r16 === \"function\");\r\n    dbg_assert(!r32 || typeof r32 === \"function\");\r\n    dbg_assert(r8 || r16 || r32);\r\n\r\n    if(DEBUG)\r\n    {\r\n        var fail = function(n) {\r\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\r\n            return -1 >>> (32 - n) | 0;\r\n        };\r\n        if(!r8) r8 = fail.bind(this, 8);\r\n        if(!r16) r16 = fail.bind(this, 16);\r\n        if(!r32) r32 = fail.bind(this, 32);\r\n    }\r\n\r\n    if(r8) this.ports[port_addr].read8 = r8;\r\n    if(r16) this.ports[port_addr].read16 = r16;\r\n    if(r32) this.ports[port_addr].read32 = r32;\r\n    this.ports[port_addr].device = device;\r\n};\r\n\r\n/**\r\n * @param {number} port_addr\r\n * @param {Object} device\r\n * @param {function(number)=} w8\r\n * @param {function(number)=} w16\r\n * @param {function(number)=} w32\r\n */\r\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\r\n{\r\n    dbg_assert(typeof port_addr === \"number\");\r\n    dbg_assert(typeof device === \"object\");\r\n    dbg_assert(!w8 || typeof w8 === \"function\");\r\n    dbg_assert(!w16 || typeof w16 === \"function\");\r\n    dbg_assert(!w32 || typeof w32 === \"function\");\r\n    dbg_assert(w8 || w16 || w32);\r\n\r\n    if(DEBUG)\r\n    {\r\n        var fail = function(n) {\r\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\r\n        };\r\n        if(!w8) w8 = fail.bind(this, 8);\r\n        if(!w16) w16 = fail.bind(this, 16);\r\n        if(!w32) w32 = fail.bind(this, 32);\r\n    }\r\n\r\n    if(w8) this.ports[port_addr].write8 = w8;\r\n    if(w16) this.ports[port_addr].write16 = w16;\r\n    if(w32) this.ports[port_addr].write32 = w32;\r\n    this.ports[port_addr].device = device;\r\n};\r\n\r\n/**\r\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\r\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\r\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\r\n *\r\n * This info is not correct for all ports, but handled by the following functions\r\n *\r\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\r\n * ports and 0 or 1 32-bit ports\r\n *\r\n * @param {number} port_addr\r\n * @param {!Object} device\r\n * @param {function():number} r8_1\r\n * @param {function():number} r8_2\r\n * @param {function():number=} r8_3\r\n * @param {function():number=} r8_4\r\n */\r\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\r\n{\r\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\r\n\r\n    function r16_1()\r\n    {\r\n        return r8_1.call(this) |\r\n                r8_2.call(this) << 8;\r\n    }\r\n    function r16_2()\r\n    {\r\n        return r8_3.call(this) |\r\n                r8_4.call(this) << 8;\r\n    }\r\n    function r32()\r\n    {\r\n        return r8_1.call(this) |\r\n                r8_2.call(this) << 8 |\r\n                r8_3.call(this) << 16 |\r\n                r8_4.call(this) << 24;\r\n    }\r\n\r\n    if(r8_3 && r8_4)\r\n    {\r\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\r\n        this.register_read(port_addr + 1, device, r8_2);\r\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\r\n        this.register_read(port_addr + 3, device, r8_4);\r\n    }\r\n    else\r\n    {\r\n        this.register_read(port_addr, device, r8_1, r16_1);\r\n        this.register_read(port_addr + 1, device, r8_2);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} port_addr\r\n * @param {!Object} device\r\n * @param {function(number)} w8_1\r\n * @param {function(number)} w8_2\r\n * @param {function(number)=} w8_3\r\n * @param {function(number)=} w8_4\r\n */\r\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\r\n{\r\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\r\n\r\n    function w16_1(data)\r\n    {\r\n        w8_1.call(this, data & 0xFF);\r\n        w8_2.call(this, data >> 8 & 0xFF);\r\n    }\r\n    function w16_2(data)\r\n    {\r\n        w8_3.call(this, data & 0xFF);\r\n        w8_4.call(this, data >> 8 & 0xFF);\r\n    }\r\n    function w32(data)\r\n    {\r\n        w8_1.call(this, data & 0xFF);\r\n        w8_2.call(this, data >> 8 & 0xFF);\r\n        w8_3.call(this, data >> 16 & 0xFF);\r\n        w8_4.call(this, data >>> 24);\r\n    }\r\n\r\n    if(w8_3 && w8_4)\r\n    {\r\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\r\n        this.register_write(port_addr + 1, device, w8_2);\r\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\r\n        this.register_write(port_addr + 3, device, w8_4);\r\n    }\r\n    else\r\n    {\r\n        this.register_write(port_addr,     device, w8_1, w16_1);\r\n        this.register_write(port_addr + 1, device, w8_2);\r\n    }\r\n};\r\n\r\nIO.prototype.in_mmap_range = function(start, count)\r\n{\r\n    start >>>= 0;\r\n    count >>>= 0;\r\n\r\n    var end = start + count;\r\n\r\n    if(end >= this.cpu.memory_size)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\r\n    start &= ~(MMAP_BLOCK_SIZE - 1);\r\n\r\n    while(start < end)\r\n    {\r\n        if(this.cpu.in_mapped_range(start))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        start += MMAP_BLOCK_SIZE;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nIO.prototype.mmap_read32_shim = function(addr)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n    var fn = this.cpu.memory_map_read8[aligned_addr];\r\n\r\n    return fn(addr) | fn(addr + 1) << 8 |\r\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\r\n};\r\n\r\nIO.prototype.mmap_write32_shim = function(addr, value)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n    var fn = this.cpu.memory_map_write8[aligned_addr];\r\n\r\n    fn(addr, value & 0xFF);\r\n    fn(addr + 1, value >> 8 & 0xFF);\r\n    fn(addr + 2, value >> 16 & 0xFF);\r\n    fn(addr + 3, value >>> 24);\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} size\r\n * @param {*} read_func8\r\n * @param {*} write_func8\r\n * @param {*=} read_func32\r\n * @param {*=} write_func32\r\n */\r\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\r\n{\r\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\r\n\r\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\r\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\r\n\r\n    if(!read_func32)\r\n        read_func32 = this.mmap_read32_shim.bind(this);\r\n\r\n    if(!write_func32)\r\n        write_func32 = this.mmap_write32_shim.bind(this);\r\n\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n\r\n    for(; size > 0; aligned_addr++)\r\n    {\r\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\r\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\r\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\r\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\r\n\r\n        size -= MMAP_BLOCK_SIZE;\r\n    }\r\n};\r\n\r\n\r\nIO.prototype.port_write8 = function(port_addr, data)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    return entry.write8.call(entry.device, data);\r\n};\r\n\r\nIO.prototype.port_write16 = function(port_addr, data)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    return entry.write16.call(entry.device, data);\r\n};\r\n\r\nIO.prototype.port_write32 = function(port_addr, data)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    return entry.write32.call(entry.device, data);\r\n};\r\n\r\nIO.prototype.port_read8 = function(port_addr)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    var value = entry.read8.call(entry.device);\r\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\r\n    return value;\r\n};\r\n\r\nIO.prototype.port_read16 = function(port_addr)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    var value = entry.read16.call(entry.device);\r\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\r\n    return value;\r\n};\r\n\r\nIO.prototype.port_read32 = function(port_addr)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    var value = entry.read32.call(entry.device);\r\n    dbg_assert((value | 0) === value);\r\n    return value;\r\n};\r\n\r\n// via seabios ioport.h\r\nvar debug_port_list = {\r\n    0x0004: \"PORT_DMA_ADDR_2\",\r\n    0x0005: \"PORT_DMA_CNT_2\",\r\n    0x000a: \"PORT_DMA1_MASK_REG\",\r\n    0x000b: \"PORT_DMA1_MODE_REG\",\r\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\r\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\r\n    0x0020: \"PORT_PIC1_CMD\",\r\n    0x0021: \"PORT_PIC1_DATA\",\r\n    0x0040: \"PORT_PIT_COUNTER0\",\r\n    0x0041: \"PORT_PIT_COUNTER1\",\r\n    0x0042: \"PORT_PIT_COUNTER2\",\r\n    0x0043: \"PORT_PIT_MODE\",\r\n    0x0060: \"PORT_PS2_DATA\",\r\n    0x0061: \"PORT_PS2_CTRLB\",\r\n    0x0064: \"PORT_PS2_STATUS\",\r\n    0x0070: \"PORT_CMOS_INDEX\",\r\n    0x0071: \"PORT_CMOS_DATA\",\r\n    0x0080: \"PORT_DIAG\",\r\n    0x0081: \"PORT_DMA_PAGE_2\",\r\n    0x0092: \"PORT_A20\",\r\n    0x00a0: \"PORT_PIC2_CMD\",\r\n    0x00a1: \"PORT_PIC2_DATA\",\r\n    0x00b2: \"PORT_SMI_CMD\",\r\n    0x00b3: \"PORT_SMI_STATUS\",\r\n    0x00d4: \"PORT_DMA2_MASK_REG\",\r\n    0x00d6: \"PORT_DMA2_MODE_REG\",\r\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\r\n    0x00f0: \"PORT_MATH_CLEAR\",\r\n    0x0170: \"PORT_ATA2_CMD_BASE\",\r\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\r\n    0x0278: \"PORT_LPT2\",\r\n    0x02e8: \"PORT_SERIAL4\",\r\n    0x02f8: \"PORT_SERIAL2\",\r\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\r\n    0x0378: \"PORT_LPT1\",\r\n    0x03e8: \"PORT_SERIAL3\",\r\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\r\n    0x03f0: \"PORT_FD_BASE\",\r\n    0x03f2: \"PORT_FD_DOR\",\r\n    0x03f4: \"PORT_FD_STATUS\",\r\n    0x03f5: \"PORT_FD_DATA\",\r\n    0x03f6: \"PORT_HD_DATA\",\r\n    0x03f7: \"PORT_FD_DIR\",\r\n    0x03f8: \"PORT_SERIAL1\",\r\n    0x0cf8: \"PORT_PCI_CMD\",\r\n    0x0cf9: \"PORT_PCI_REBOOT\",\r\n    0x0cfc: \"PORT_PCI_DATA\",\r\n    0x0402: \"PORT_BIOS_DEBUG\",\r\n    0x0510: \"PORT_QEMU_CFG_CTL\",\r\n    0x0511: \"PORT_QEMU_CFG_DATA\",\r\n    0xb000: \"PORT_ACPI_PM_BASE\",\r\n    0xb100: \"PORT_SMB_BASE\",\r\n    0x8900: \"PORT_BIOS_APM\"\r\n};\r\n\r\nIO.prototype.get_port_description = function(addr)\r\n{\r\n    if(debug_port_list[addr])\r\n    {\r\n        return \"  (\" + debug_port_list[addr] + \")\";\r\n    }\r\n    else\r\n    {\r\n        return \"\";\r\n    }\r\n};\r\n\r\n\r\n","\"use strict\";\r\n\r\nvar\r\n/** @const */ LOG_ALL = -1,\r\n/** @const */ LOG_NONE = 0,\r\n\r\n/** @const */ LOG_OTHER =  0x000001,\r\n/** @const */ LOG_CPU =    0x000002,\r\n/** @const */ LOG_FPU =    0x000004,\r\n/** @const */ LOG_MEM =    0x000008,\r\n/** @const */ LOG_DMA =    0x000010,\r\n/** @const */ LOG_IO =     0x000020,\r\n/** @const */ LOG_PS2 =    0x000040,\r\n/** @const */ LOG_PIC =    0x000080,\r\n/** @const */ LOG_VGA =    0x000100,\r\n/** @const */ LOG_PIT =    0x000200,\r\n/** @const */ LOG_MOUSE =  0x000400,\r\n/** @const */ LOG_PCI =    0x000800,\r\n/** @const */ LOG_BIOS =   0x001000,\r\n/** @const */ LOG_FLOPPY = 0x002000,\r\n/** @const */ LOG_SERIAL = 0x004000,\r\n/** @const */ LOG_DISK =   0x008000,\r\n/** @const */ LOG_RTC =    0x010000,\r\n/** @const */ LOG_HPET =   0x020000,\r\n/** @const */ LOG_ACPI =   0x040000,\r\n/** @const */ LOG_APIC =   0x080000,\r\n/** @const */ LOG_NET =    0x100000,\r\n/** @const */ LOG_VIRTIO = 0x200000,\r\n/** @const */ LOG_9P =     0x400000,\r\n/** @const */ LOG_SB16 =   0x800000;\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Array<Array<string|number>>}\r\n */\r\nvar LOG_NAMES = [\r\n    [1, \"\"],\r\n    [LOG_CPU, \"CPU\"],\r\n    [LOG_DISK, \"DISK\"],\r\n    [LOG_FPU, \"FPU\"],\r\n    [LOG_MEM, \"MEM\"],\r\n    [LOG_DMA, \"DMA\"],\r\n    [LOG_IO, \"IO\"],\r\n    [LOG_PS2, \"PS2\"],\r\n    [LOG_PIC, \"PIC\"],\r\n    [LOG_VGA, \"VGA\"],\r\n    [LOG_PIT, \"PIT\"],\r\n    [LOG_MOUSE, \"MOUS\"],\r\n    [LOG_PCI, \"PCI\"],\r\n    [LOG_BIOS, \"BIOS\"],\r\n    [LOG_FLOPPY, \"FLOP\"],\r\n    [LOG_SERIAL, \"SERI\"],\r\n    [LOG_RTC, \"RTC\"],\r\n    [LOG_HPET, \"HPET\"],\r\n    [LOG_ACPI, \"ACPI\"],\r\n    [LOG_APIC, \"APIC\"],\r\n    [LOG_NET, \"NET\"],\r\n    [LOG_VIRTIO, \"VIO\"],\r\n    [LOG_9P, \"9P\"],\r\n    [LOG_SB16, \"SB16\"]\r\n];\r\n\r\nvar\r\n/** @const */ TLB_SYSTEM_READ = 1,\r\n/** @const */ TLB_SYSTEM_WRITE = 2,\r\n/** @const */ TLB_USER_READ = 4,\r\n/** @const */ TLB_USER_WRITE = 8;\r\n\r\n\r\nvar\r\n\r\n// flags register bitflags\r\n/** @const */ flag_carry = 1,\r\n/** @const */ flag_parity = 4,\r\n/** @const */ flag_adjust = 16,\r\n/** @const */ flag_zero = 64,\r\n/** @const */ flag_sign = 128,\r\n/** @const */ flag_trap = 256,\r\n/** @const */ flag_interrupt = 512,\r\n/** @const */ flag_direction = 1024,\r\n/** @const */ flag_overflow = 2048,\r\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\r\n/** @const */ flag_nt = 1 << 14,\r\n/** @const */ flag_rf = 1 << 16,\r\n/** @const */ flag_vm = 1 << 17,\r\n/** @const */ flag_ac = 1 << 18,\r\n/** @const */ flag_vif = 1 << 19,\r\n/** @const */ flag_vip = 1 << 20,\r\n/** @const */ flag_id = 1 << 21,\r\n\r\n/**\r\n * default values of reserved flags bits\r\n * @const\r\n */\r\nflags_default = 1 << 1,\r\n\r\n/**\r\n * bitmask to select non-reserved flags bits\r\n * @const\r\n */\r\nflags_mask =\r\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\r\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\r\n    flag_vif | flag_vip | flag_id,\r\n\r\n\r\n/**\r\n * all arithmetic flags\r\n * @const\r\n */\r\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\r\n\r\n\r\n/**\r\n * opsizes used by get flag functions\r\n *\r\n * @const\r\n */\r\nOPSIZE_8 = 7,\r\n/** @const */\r\nOPSIZE_16 = 15,\r\n/** @const */\r\nOPSIZE_32 = 31,\r\n\r\n/** @const */\r\nPSE_ENABLED = 128,\r\n\r\n/** @const */ reg_eax = 0,\r\n/** @const */ reg_ecx = 1,\r\n/** @const */ reg_edx = 2,\r\n/** @const */ reg_ebx = 3,\r\n/** @const */ reg_esp = 4,\r\n/** @const */ reg_ebp = 5,\r\n/** @const */ reg_esi = 6,\r\n/** @const */ reg_edi = 7,\r\n\r\n/** @const */ reg_ax = 0,\r\n/** @const */ reg_cx = 2,\r\n/** @const */ reg_dx = 4,\r\n/** @const */ reg_bx = 6,\r\n/** @const */ reg_sp = 8,\r\n/** @const */ reg_bp = 10,\r\n/** @const */ reg_si = 12,\r\n/** @const */ reg_di = 14,\r\n\r\n/** @const */ reg_al = 0,\r\n/** @const */ reg_cl = 4,\r\n/** @const */ reg_dl = 8,\r\n/** @const */ reg_bl = 12,\r\n/** @const */ reg_ah = 1,\r\n/** @const */ reg_ch = 5,\r\n/** @const */ reg_dh = 9,\r\n/** @const */ reg_bh = 13,\r\n\r\n\r\n/** @const */ reg_es = 0,\r\n/** @const */ reg_cs = 1,\r\n/** @const */ reg_ss = 2,\r\n/** @const */ reg_ds = 3,\r\n/** @const */ reg_fs = 4,\r\n/** @const */ reg_gs = 5,\r\n\r\n\r\n/** @const */ reg_tr = 6, // task register\r\n/** @const */ reg_ldtr = 7; // local descriptor table register\r\n\r\nvar\r\n    /**\r\n     * The minimum number of bytes that can be memory-mapped\r\n     * by one device.\r\n     *\r\n     * @const\r\n     */\r\n    MMAP_BLOCK_BITS = 17,\r\n    /** @const */\r\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\r\n\r\n\r\n/** @const */\r\nvar MEM_PAGE_WRITTEN = 1;\r\n\r\n\r\n/** @const */\r\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\r\n\r\n\r\nvar\r\n    /** @const */\r\n    REPEAT_STRING_PREFIX_NONE = 0,\r\n    /** @const */\r\n    REPEAT_STRING_PREFIX_NZ = 1,\r\n    /** @const */\r\n    REPEAT_STRING_PREFIX_Z = 2;\r\n\r\nvar\r\n    /** @const */\r\n    CR0_PE = 1,\r\n    /** @const */\r\n    CR0_MP = 1 << 1,\r\n    /** @const */\r\n    CR0_EM = 1 << 2,\r\n    /** @const */\r\n    CR0_TS = 1 << 3,\r\n    /** @const */\r\n    CR0_ET = 1 << 4,\r\n    /** @const */\r\n    CR0_WP = 1 << 16,\r\n    /** @const */\r\n    CR0_NW = 1 << 29,\r\n    /** @const */\r\n    CR0_CD = 1 << 30,\r\n    /** @const */\r\n    CR0_PG = 1 << 31;\r\n\r\nvar\r\n    /** @const */\r\n    CR4_VME = 1,\r\n    /** @const */\r\n    CR4_PVI = 1 << 1,\r\n    /** @const */\r\n    CR4_TSD = 1 << 2,\r\n    /** @const */\r\n    CR4_PSE = 1 << 4,\r\n    /** @const */\r\n    CR4_DE = 1 << 3,\r\n    /** @const */\r\n    CR4_PAE = 1 << 5,\r\n    /** @const */\r\n    CR4_PGE = 1 << 7,\r\n    /** @const */\r\n    CR4_OSFXSR = 1 << 9,\r\n    /** @const */\r\n    CR4_OSXMMEXCPT = 1 << 10;\r\n\r\n\r\n// Segment prefixes must not collide with reg_*s variables\r\n// _ZERO is a special zero offset segment\r\nvar\r\n    /** @const */\r\n    SEG_PREFIX_NONE = -1,\r\n\r\n    /** @const */\r\n    SEG_PREFIX_ZERO = 7;\r\n\r\n\r\nvar\r\n    /** @const */\r\n    IA32_SYSENTER_CS = 0x174,\r\n\r\n    // Note: These are wrong in Intel's manuals. Fuck Intel\r\n    /** @const */\r\n    IA32_SYSENTER_ESP = 0x175,\r\n\r\n    /** @const */\r\n    IA32_SYSENTER_EIP = 0x176;\r\n\r\n/** @const */\r\nvar IA32_TIME_STAMP_COUNTER = 0x10;\r\n\r\n/** @const */\r\nvar IA32_PLATFORM_ID = 0x17;\r\n\r\n/** @const */\r\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\r\n\r\n/** @const */\r\nvar IA32_APIC_BASE_MSR = 0x1B;\r\n\r\n/** @const */\r\nvar IA32_BIOS_SIGN_ID = 0x8B;\r\n\r\n/** @const */\r\nvar IA32_MISC_ENABLE = 0x1A0;\r\n\r\n/** @const */\r\nvar IA32_RTIT_CTL = 0x570;\r\n\r\n/** @const */\r\nvar MSR_SMI_COUNT = 0x34;\r\n\r\n/** @const */\r\nvar IA32_MCG_CAP = 0x179;\r\n\r\n/** @const */\r\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\r\n\r\n/** @const */\r\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\r\n\r\n\r\n/** @const */\r\nvar IA32_APIC_BASE_BSP = 1 << 8;\r\n/** @const */\r\nvar IA32_APIC_BASE_EXTD = 1 << 10;\r\n/** @const */\r\nvar IA32_APIC_BASE_EN = 1 << 11;\r\n\r\n\r\n/** @const */ var TSR_BACKLINK = 0x00;\r\n/** @const */ var TSR_CR3 = 0x1C;\r\n/** @const */ var TSR_EIP = 0x20;\r\n/** @const */ var TSR_EFLAGS = 0x24;\r\n\r\n/** @const */ var TSR_EAX = 0x28;\r\n/** @const */ var TSR_ECX = 0x2c;\r\n/** @const */ var TSR_EDX = 0x30;\r\n/** @const */ var TSR_EBX = 0x34;\r\n/** @const */ var TSR_ESP = 0x38;\r\n/** @const */ var TSR_EBP = 0x3c;\r\n/** @const */ var TSR_ESI = 0x40;\r\n/** @const */ var TSR_EDI = 0x44;\r\n\r\n/** @const */ var TSR_ES = 0x48;\r\n/** @const */ var TSR_CS = 0x4c;\r\n/** @const */ var TSR_SS = 0x50;\r\n/** @const */ var TSR_DS = 0x54;\r\n/** @const */ var TSR_FS = 0x58;\r\n/** @const */ var TSR_GS = 0x5c;\r\n/** @const */ var TSR_LDT = 0x60;\r\n\r\n\r\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\r\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\r\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\r\n\r\n\r\n/** @const */\r\nvar PREFIX_MASK_REP = 0b11000;\r\n/** @const */\r\nvar PREFIX_REPZ = 0b01000;\r\n/** @const */\r\nvar PREFIX_REPNZ = 0b10000;\r\n\r\n/** @const */\r\nvar PREFIX_MASK_SEGMENT = 0b111;\r\n\r\n/** @const */\r\nvar PREFIX_MASK_OPSIZE = 0b100000;\r\n/** @const */\r\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\r\n\r\n/** @const */\r\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\r\n/** @const */\r\nvar PREFIX_F3 = PREFIX_REPZ; // alias\r\n/** @const */\r\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\r\n\r\n/** @const */\r\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\r\n\r\n\r\n/** @const */\r\nvar MIXER_CHANNEL_LEFT = 0;\r\n/** @const */\r\nvar MIXER_CHANNEL_RIGHT = 1;\r\n/** @const */\r\nvar MIXER_CHANNEL_BOTH = 2;\r\n/** @const */\r\nvar MIXER_SRC_MASTER = 0;\r\n/** @const */\r\nvar MIXER_SRC_PCSPEAKER = 1;\r\n/** @const */\r\nvar MIXER_SRC_DAC = 2;\r\n","\"use strict\";\r\n\r\n/** @constructor */\r\nfunction v86(bus)\r\n{\r\n    /** @type {boolean} */\r\n    this.running = false;\r\n\r\n    /** @type {boolean} */\r\n    this.stopped = false;\r\n\r\n    /** @type {CPU} */\r\n    this.cpu = new CPU(bus);\r\n\r\n    this.bus = bus;\r\n    bus.register(\"cpu-init\", this.init, this);\r\n    bus.register(\"cpu-run\", this.run, this);\r\n    bus.register(\"cpu-stop\", this.stop, this);\r\n    bus.register(\"cpu-restart\", this.restart, this);\r\n\r\n    this.register_tick();\r\n}\r\n\r\nv86.prototype.run = function()\r\n{\r\n    if(!this.running)\r\n    {\r\n        this.bus.send(\"emulator-started\");\r\n        this.fast_next_tick();\r\n    }\r\n};\r\n\r\nv86.prototype.do_tick = function()\r\n{\r\n    if(this.stopped)\r\n    {\r\n        this.stopped = this.running = false;\r\n        this.bus.send(\"emulator-stopped\");\r\n        return;\r\n    }\r\n\r\n    this.running = true;\r\n    var dt = this.cpu.main_run();\r\n\r\n    if(dt <= 0)\r\n    {\r\n        this.fast_next_tick();\r\n    }\r\n    else\r\n    {\r\n        this.next_tick(dt);\r\n    }\r\n};\r\n\r\nv86.prototype.stop = function()\r\n{\r\n    if(this.running)\r\n    {\r\n        this.stopped = true;\r\n    }\r\n};\r\n\r\nv86.prototype.destroy = function()\r\n{\r\n    this.unregister_tick();\r\n};\r\n\r\nv86.prototype.restart = function()\r\n{\r\n    this.cpu.reset();\r\n    this.cpu.load_bios();\r\n};\r\n\r\nv86.prototype.init = function(settings)\r\n{\r\n    this.cpu.init(settings, this.bus);\r\n    this.bus.send(\"emulator-ready\");\r\n};\r\n\r\nif(typeof setImmediate !== \"undefined\")\r\n{\r\n    /** @this {v86} */\r\n    var fast_next_tick = function()\r\n    {\r\n        setImmediate(() => { this.do_tick(); });\r\n    };\r\n\r\n    /** @this {v86} */\r\n    var register_tick = function() {};\r\n\r\n    /** @this {v86} */\r\n    var unregister_tick = function() {};\r\n}\r\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\r\n{\r\n    // setImmediate shim for the browser.\r\n    // TODO: Make this deactivatable, for other applications\r\n    //       using postMessage\r\n\r\n    /** @const */\r\n    let MAGIC_POST_MESSAGE = 0xAA55;\r\n\r\n    /** @this {v86} */\r\n    fast_next_tick = function()\r\n    {\r\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\r\n    };\r\n\r\n    let tick;\r\n\r\n    /** @this {v86} */\r\n    register_tick = function()\r\n    {\r\n        tick = e =>\r\n        {\r\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\r\n            {\r\n                this.do_tick();\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"message\", tick, false);\r\n    };\r\n\r\n    /** @this {v86} */\r\n    unregister_tick = function()\r\n    {\r\n        window.removeEventListener(\"message\", tick);\r\n        tick = null;\r\n    };\r\n}\r\nelse\r\n{\r\n    /** @this {v86} */\r\n    fast_next_tick = function()\r\n    {\r\n        setTimeout(() => { this.do_tick(); }, 0);\r\n    };\r\n\r\n    /** @this {v86} */\r\n    register_tick = function() {};\r\n\r\n    /** @this {v86} */\r\n    unregister_tick = function() {};\r\n}\r\n\r\nv86.prototype.fast_next_tick = fast_next_tick;\r\nv86.prototype.register_tick = register_tick;\r\nv86.prototype.unregister_tick = unregister_tick;\r\n\r\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\r\n{\r\n    /** @this {v86} */\r\n    var next_tick = function(t)\r\n    {\r\n        if(t < 4 || document.hidden)\r\n        {\r\n            // Avoid sleeping for 1 second (happens if page is not\r\n            // visible), it can break boot processes. Also don't try to\r\n            // sleep for less than 4ms, since the value is clamped up\r\n            this.fast_next_tick();\r\n        }\r\n        else\r\n        {\r\n            setTimeout(() => { this.do_tick(); }, t);\r\n        }\r\n    };\r\n}\r\nelse\r\n{\r\n    // In environments that aren't browsers, we might as well use setTimeout\r\n    /** @this {v86} */\r\n    next_tick = function(t)\r\n    {\r\n        setTimeout(() => { this.do_tick(); }, t);\r\n    };\r\n}\r\n\r\nv86.prototype.next_tick = next_tick;\r\n\r\nv86.prototype.save_state = function()\r\n{\r\n    // TODO: Should be implemented here, not on cpu\r\n    return this.cpu.save_state();\r\n};\r\n\r\nv86.prototype.restore_state = function(state)\r\n{\r\n    // TODO: Should be implemented here, not on cpu\r\n    return this.cpu.restore_state(state);\r\n};\r\n\r\n\r\nif(typeof performance === \"object\" && performance.now)\r\n{\r\n    v86.microtick = function()\r\n    {\r\n        return performance.now();\r\n    };\r\n}\r\n//else if(typeof process === \"object\" && process.hrtime)\r\n//{\r\n//    v86.microtick = function()\r\n//    {\r\n//        var t = process.hrtime();\r\n//        return t[0] * 1000 + t[1] / 1e6;\r\n//    };\r\n//}\r\nelse\r\n{\r\n    v86.microtick = Date.now;\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar CPU_LOG_VERBOSE = false;\r\n\r\n\r\n// Resources:\r\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\r\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\r\n// http://ref.x86asm.net/geek32.html\r\n\r\n\r\n// exception bits in the MXCSR Register\r\nvar\r\n    /** @const */\r\n    CPU_EX_P = 1 << 5,\r\n    /** @const */\r\n    CPU_EX_U = 1 << 4,\r\n    /** @const */\r\n    CPU_EX_O = 1 << 3,\r\n    /** @const */\r\n    CPU_EX_Z = 1 << 2,\r\n    /** @const */\r\n    CPU_EX_D = 1 << 1,\r\n    /** @const */\r\n    CPU_EX_I = 1 << 0;\r\n\r\n/** @constructor */\r\nfunction CPU(bus)\r\n{\r\n    /** @type {number} */\r\n    this.memory_size = 0;\r\n\r\n    // Note: Currently unused (degrades performance and not required by any OS\r\n    //       that we support)\r\n    this.a20_enabled = true;\r\n\r\n    this.mem_page_infos = undefined;\r\n\r\n    this.mem8 = new Uint8Array(0);\r\n    this.mem16 = new Uint16Array(this.mem8.buffer);\r\n    this.mem32s = new Int32Array(this.mem8.buffer);\r\n\r\n    this.segment_is_null = new Uint8Array(8);\r\n    this.segment_limits = new Uint32Array(8);\r\n    //this.segment_infos = new Uint32Array(8);\r\n    this.segment_offsets = new Int32Array(8);\r\n\r\n    /**\r\n     * Translation Lookaside Buffer\r\n     * @const\r\n     */\r\n    this.tlb_data = new Int32Array(1 << 20);\r\n\r\n    /**\r\n     * Information about which pages are cached in the tlb.\r\n     * By bit:\r\n     *   0 system, read\r\n     *   1 system, write\r\n     *   2 user, read\r\n     *   3 user, write\r\n     * @const\r\n     */\r\n    this.tlb_info = new Uint8Array(1 << 20);\r\n\r\n    /**\r\n     * Same as tlb_info, except it only contains global pages\r\n     * @const\r\n     */\r\n    this.tlb_info_global = new Uint8Array(1 << 20);\r\n\r\n    /**\r\n     * Wheter or not in protected mode\r\n     * @type {boolean}\r\n     */\r\n    this.protected_mode = false;\r\n\r\n    /**\r\n     * interrupt descriptor table\r\n     * @type {number}\r\n     */\r\n    this.idtr_size = 0;\r\n    /** @type {number} */\r\n    this.idtr_offset = 0;\r\n\r\n    /**\r\n     * global descriptor table register\r\n     * @type {number}\r\n     */\r\n    this.gdtr_size = 0;\r\n    /** @type {number} */\r\n    this.gdtr_offset = 0;\r\n\r\n    this.tss_size_32 = false;\r\n\r\n    /*\r\n     * whether or not a page fault occured\r\n     */\r\n    this.page_fault = false;\r\n\r\n    this.cr = new Int32Array(8);\r\n\r\n    /** @type {number} */\r\n    this.cr[0] = 0;\r\n    /** @type {number} */\r\n    this.cr[2] = 0;\r\n    /** @type {number} */\r\n    this.cr[3] = 0;\r\n    /** @type {number} */\r\n    this.cr[4] = 0;\r\n\r\n    // current privilege level\r\n    /** @type {number} */\r\n    this.cpl = 0;\r\n\r\n    // if false, pages are 4 KiB, else 4 Mib\r\n    /** @type {number} */\r\n    this.page_size_extensions = 0;\r\n\r\n    // current operand/address size\r\n    /** @type {boolean} */\r\n    this.is_32 = false;\r\n\r\n    /** @type {boolean} */\r\n    this.stack_size_32 = false;\r\n\r\n    /**\r\n     * Was the last instruction a hlt?\r\n     * @type {boolean}\r\n     */\r\n    this.in_hlt = false;\r\n\r\n    /** @type {number} */\r\n    this.last_virt_eip = 0;\r\n\r\n    /** @type {number} */\r\n    this.eip_phys = 0;\r\n\r\n    /** @type {number} */\r\n    this.last_virt_esp = 0;\r\n\r\n    /** @type {number} */\r\n    this.esp_phys = 0;\r\n\r\n\r\n    /** @type {number} */\r\n    this.sysenter_cs = 0;\r\n\r\n    /** @type {number} */\r\n    this.sysenter_esp = 0;\r\n\r\n    /** @type {number} */\r\n    this.sysenter_eip = 0;\r\n\r\n    /** @type {number} */\r\n    this.prefixes = 0;\r\n\r\n    /** @type {number} */\r\n    this.flags = 0;\r\n\r\n    /**\r\n     * bitmap of flags which are not updated in the flags variable\r\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\r\n     * @type {number}\r\n     */\r\n    this.flags_changed = 0;\r\n\r\n    /**\r\n     * the last 2 operators and the result and size of the last arithmetic operation\r\n     * @type {number}\r\n     */\r\n    this.last_op1 = 0;\r\n    /** @type {number} */\r\n    this.last_op2 = 0;\r\n    /** @type {number} */\r\n    this.last_op_size = 0;\r\n\r\n    /** @type {number} */\r\n    this.last_add_result = 0;\r\n\r\n    /** @type {number} */\r\n    this.last_result = 0;\r\n\r\n    this.div32_result = new Float64Array(2);\r\n\r\n    this.tsc_offset = 0;\r\n\r\n    /** @type {number} */\r\n    this.modrm_byte = 0;\r\n\r\n    /** @type {number} */\r\n    this.phys_addr = 0;\r\n\r\n    /** @type {number} */\r\n    this.phys_addr_high = 0;\r\n\r\n    /** @type {!Object} */\r\n    this.devices = {};\r\n\r\n    this.table = [];\r\n\r\n    // paging enabled\r\n    /** @type {boolean} */\r\n    this.paging = false;\r\n\r\n    /** @type {number} */\r\n    this.instruction_pointer = 0;\r\n\r\n    /** @type {number} */\r\n    this.previous_ip = 0;\r\n\r\n    this.apic_enabled = true;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.timestamp_counter = 0;\r\n\r\n    // registers\r\n    this.reg32s = new Int32Array(8);\r\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\r\n    this.reg16s = new Int16Array(this.reg32s.buffer);\r\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\r\n    this.reg8s = new Int8Array(this.reg32s.buffer);\r\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\r\n\r\n    // mm0-mm7 split up into 32 bit pairs\r\n    this.reg_mmxs = new Int32Array(16);\r\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\r\n\r\n    this.reg_xmm32s = new Int32Array(8 * 4);\r\n    this.mxcsr = 0x1F80;\r\n\r\n    // segment registers, tr and ldtr\r\n    this.sreg = new Uint16Array(8);\r\n\r\n    // debug registers\r\n    this.dreg = new Int32Array(8);\r\n\r\n\r\n    // managed in io.js\r\n    /** @const */ this.memory_map_read8 = [];\r\n    /** @const */ this.memory_map_write8 = [];\r\n    /** @const */ this.memory_map_read32 = [];\r\n    /** @const */ this.memory_map_write32 = [];\r\n\r\n    /**\r\n     * @const\r\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\r\n     */\r\n    this.bios = {\r\n        main: null,\r\n        vga: null,\r\n    };\r\n\r\n    /** @type {number} */\r\n    this.fw_value = 0;\r\n\r\n    this.io = undefined;\r\n    this.fpu = undefined;\r\n\r\n    this.bus = bus;\r\n\r\n    dbg_assert(this.table16 && this.table32);\r\n    dbg_assert(this.table0F_16 && this.table0F_32);\r\n\r\n    this.update_operand_size();\r\n\r\n    this.tsc_offset = v86.microtick();\r\n\r\n    this.debug_init();\r\n\r\n    this.init2();\r\n\r\n    //Object.seal(this);\r\n}\r\n\r\nCPU.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.memory_size;\r\n    state[1] = this.segment_is_null;\r\n    state[2] = this.segment_offsets;\r\n    state[3] = this.segment_limits;\r\n    state[4] = this.protected_mode;\r\n    state[5] = this.idtr_offset;\r\n    state[6] = this.idtr_size;\r\n    state[7] = this.gdtr_offset;\r\n    state[8] = this.gdtr_size;\r\n    state[9] = this.page_fault;\r\n    state[10] = this.cr;\r\n    state[11] = this.cpl;\r\n    state[12] = this.page_size_extensions;\r\n    state[13] = this.is_32;\r\n\r\n    state[16] = this.stack_size_32;\r\n    state[17] = this.in_hlt;\r\n    state[18] = this.last_virt_eip;\r\n    state[19] = this.eip_phys;\r\n    state[20] = this.last_virt_esp;\r\n    state[21] = this.esp_phys;\r\n    state[22] = this.sysenter_cs;\r\n    state[23] = this.sysenter_eip;\r\n    state[24] = this.sysenter_esp;\r\n    state[25] = this.prefixes;\r\n    state[26] = this.flags;\r\n    state[27] = this.flags_changed;\r\n    state[28] = this.last_op1;\r\n    state[29] = this.last_op2;\r\n    state[30] = this.last_op_size;\r\n    state[31] = this.last_add_result;\r\n    state[32] = this.modrm_byte;\r\n\r\n    state[36] = this.paging;\r\n    state[37] = this.instruction_pointer;\r\n    state[38] = this.previous_ip;\r\n    state[39] = this.reg32s;\r\n    state[40] = this.sreg;\r\n    state[41] = this.dreg;\r\n    state[42] = this.mem8;\r\n    state[43] = this.fpu;\r\n\r\n    state[45] = this.devices.virtio;\r\n    state[46] = this.devices.apic;\r\n    state[47] = this.devices.rtc;\r\n    state[48] = this.devices.pci;\r\n    state[49] = this.devices.dma;\r\n    state[50] = this.devices.acpi;\r\n    state[51] = this.devices.hpet;\r\n    state[52] = this.devices.vga;\r\n    state[53] = this.devices.ps2;\r\n    state[54] = this.devices.uart0;\r\n    state[55] = this.devices.fdc;\r\n    state[56] = this.devices.cdrom;\r\n    state[57] = this.devices.hda;\r\n    state[58] = this.devices.pit;\r\n    state[59] = this.devices.net;\r\n    state[60] = this.devices.pic;\r\n    state[61] = this.devices.sb16;\r\n\r\n    state[62] = this.a20_enabled;\r\n    state[63] = this.fw_value;\r\n\r\n    state[64] = this.devices.ioapic;\r\n\r\n    state[65] = this.tss_size_32;\r\n\r\n    state[66] = this.reg_mmxs;\r\n\r\n    state[67] = this.devices.uart1;\r\n    state[68] = this.devices.uart2;\r\n    state[69] = this.devices.uart3;\r\n\r\n    return state;\r\n};\r\n\r\nCPU.prototype.set_state = function(state)\r\n{\r\n    this.memory_size = state[0];\r\n    this.segment_is_null = state[1];\r\n    this.segment_offsets = state[2];\r\n    this.segment_limits = state[3];\r\n    this.protected_mode = state[4];\r\n    this.idtr_offset = state[5];\r\n    this.idtr_size = state[6];\r\n    this.gdtr_offset = state[7];\r\n    this.gdtr_size = state[8];\r\n    this.page_fault = state[9];\r\n    this.cr = state[10];\r\n    this.cpl = state[11];\r\n    this.page_size_extensions = state[12];\r\n    this.is_32 = state[13];\r\n\r\n    this.stack_size_32 = state[16];\r\n\r\n    this.in_hlt = state[17];\r\n    this.last_virt_eip = state[18];\r\n    this.eip_phys = state[19];\r\n    this.last_virt_esp = state[20];\r\n    this.esp_phys = state[21];\r\n    this.sysenter_cs = state[22];\r\n    this.sysenter_eip = state[23];\r\n    this.sysenter_esp = state[24];\r\n    this.prefixes = state[25];\r\n\r\n    this.flags = state[26];\r\n    this.flags_changed = state[27];\r\n    this.last_op1 = state[28];\r\n    this.last_op2 = state[29];\r\n    this.last_op_size = state[30];\r\n    this.last_add_result = state[31];\r\n    this.modrm_byte = state[32];\r\n\r\n    this.paging = state[36];\r\n    this.instruction_pointer = state[37];\r\n    this.previous_ip = state[38];\r\n    this.reg32s = state[39];\r\n    this.sreg = state[40];\r\n    this.dreg = state[41];\r\n    this.mem8 = state[42];\r\n    this.fpu = state[43];\r\n\r\n    this.devices.virtio = state[45];\r\n    this.devices.apic = state[46];\r\n    this.devices.rtc = state[47];\r\n    this.devices.pci = state[48];\r\n    this.devices.dma = state[49];\r\n    this.devices.acpi = state[50];\r\n    this.devices.hpet = state[51];\r\n    this.devices.vga = state[52];\r\n    this.devices.ps2 = state[53];\r\n    this.devices.uart0 = state[54];\r\n    this.devices.fdc = state[55];\r\n    this.devices.cdrom = state[56];\r\n    this.devices.hda = state[57];\r\n    this.devices.pit = state[58];\r\n    this.devices.net = state[59];\r\n    this.devices.pic = state[60];\r\n    this.devices.sb16 = state[61];\r\n\r\n    this.a20_enabled = state[62];\r\n    this.fw_value = state[63];\r\n\r\n    this.devices.ioapic = state[64];\r\n\r\n    this.tss_size_32 = state[65];\r\n\r\n    this.reg_mmxs = state[66];\r\n\r\n    this.devices.uart1 = state[67];\r\n    this.devices.uart2 = state[68];\r\n    this.devices.uart3 = state[69];\r\n\r\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\r\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\r\n\r\n\r\n    this.full_clear_tlb();\r\n    // tsc_offset?\r\n\r\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\r\n    this.reg16s = new Int16Array(this.reg32s.buffer);\r\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\r\n    this.reg8s = new Int8Array(this.reg32s.buffer);\r\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\r\n\r\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\r\n    this.update_operand_size();\r\n};\r\n\r\n\r\n/**\r\n * @return {number} time in ms until this method should becalled again\r\n */\r\nCPU.prototype.main_run = function()\r\n{\r\n    if(this.in_hlt)\r\n    {\r\n        //if(false)\r\n        //{\r\n        //    var _t = this.hlt_loop();\r\n        //    var t = 0;\r\n        //}\r\n        //else\r\n        //{\r\n            var t = this.hlt_loop();\r\n        //}\r\n\r\n        if(this.in_hlt)\r\n        {\r\n            return t;\r\n        }\r\n    }\r\n\r\n    this.do_run();\r\n\r\n    return 0;\r\n};\r\n\r\nCPU.prototype.exception_cleanup = function(e)\r\n{\r\n    if(e === MAGIC_CPU_EXCEPTION)\r\n    {\r\n        // A legit CPU exception (for instance, a page fault happened)\r\n        // call_interrupt_vector has already been called at this point,\r\n        // so we just need to reset some state\r\n\r\n        this.page_fault = false;\r\n\r\n        // restore state from prefixes\r\n        this.clear_prefixes();\r\n    }\r\n    else\r\n    {\r\n        console.log(e);\r\n        console.log(e.stack);\r\n        //var e = new Error(e.message);\r\n        //Error.captureStackTrace && Error.captureStackTrace(e);\r\n        throw e;\r\n    }\r\n};\r\n\r\nCPU.prototype.reboot_internal = function()\r\n{\r\n    this.reset();\r\n    this.load_bios();\r\n\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.reset = function()\r\n{\r\n    this.a20_enabled = true;\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.segment_is_null[i] = 0;\r\n        this.segment_limits[i] = 0;\r\n        //this.segment_infos = new Uint32Array(8);\r\n        this.segment_offsets[i] = 0;\r\n    }\r\n\r\n    this.full_clear_tlb();\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.reg32s[i] = 0;\r\n        this.sreg[i] = 0;\r\n        this.cr[i] = 0;\r\n        this.dreg[i] = 0;\r\n    }\r\n\r\n    for(let i = 0; i < this.reg_mmxs.length; i++)\r\n    {\r\n        this.reg_mmxs[i] = 0;\r\n    }\r\n\r\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\r\n    {\r\n        this.reg_xmm32s[i] = 0;\r\n    }\r\n    this.mxcsr = 0x1F80;\r\n\r\n    this.protected_mode = false;\r\n\r\n    // http://www.sandpile.org/x86/initial.htm\r\n    this.idtr_size = 0;\r\n    this.idtr_offset = 0;\r\n\r\n    this.gdtr_size = 0;\r\n    this.gdtr_offset = 0;\r\n\r\n    this.page_fault = false;\r\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\r\n    this.cr[2] = 0;\r\n    this.cr[3] = 0;\r\n    this.cr[4] = 0;\r\n    this.dreg[6] = 0xFFFF0FF0|0;\r\n    this.dreg[7] = 0x400;\r\n    this.cpl = 0;\r\n    this.paging = false;\r\n    this.page_size_extensions = 0;\r\n    this.is_32 = false;\r\n    this.stack_size_32 = false;\r\n    this.prefixes = 0;\r\n\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n\r\n    this.update_operand_size();\r\n\r\n    this.timestamp_counter = 0;\r\n    this.previous_ip = 0;\r\n    this.in_hlt = false;\r\n\r\n    this.sysenter_cs = 0;\r\n    this.sysenter_esp = 0;\r\n    this.sysenter_eip = 0;\r\n\r\n    this.flags = flags_default;\r\n    this.flags_changed = 0;\r\n\r\n    this.last_result = 0;\r\n    this.last_add_result = 0;\r\n    this.last_op1 = 0;\r\n    this.last_op2 = 0;\r\n    this.last_op_size = 0;\r\n\r\n    this.tsc_offset = v86.microtick();\r\n\r\n    this.instruction_pointer = 0xFFFF0;\r\n    this.switch_cs_real_mode(0xF000);\r\n\r\n    this.switch_seg(reg_ss, 0x30);\r\n    this.reg16[reg_sp] = 0x100;\r\n\r\n    if(this.devices.virtio)\r\n    {\r\n        this.devices.virtio.reset();\r\n    }\r\n\r\n    this.fw_value = 0;\r\n};\r\n\r\n/** @export */\r\nCPU.prototype.create_memory = function(size)\r\n{\r\n    if(size < 1024 * 1024)\r\n    {\r\n        size = 1024 * 1024;\r\n    }\r\n    else if((size | 0) < 0)\r\n    {\r\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\r\n    }\r\n\r\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\r\n    dbg_assert((size | 0) > 0);\r\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\r\n\r\n    this.memory_size = size;\r\n\r\n    var buffer = new ArrayBuffer(size);\r\n\r\n    this.mem8 = new Uint8Array(buffer);\r\n    this.mem16 = new Uint16Array(buffer);\r\n    this.mem32s = new Int32Array(buffer);\r\n};\r\n\r\nCPU.prototype.init = function(settings, device_bus)\r\n{\r\n    this.create_memory(typeof settings.memory_size === \"number\" ?\r\n        settings.memory_size : 1024 * 1024 * 64);\r\n\r\n    this.reset();\r\n\r\n    var io = new IO(this);\r\n    this.io = io;\r\n\r\n    this.bios.main = settings.bios;\r\n    this.bios.vga = settings.vga_bios;\r\n\r\n    this.load_bios();\r\n\r\n    var a20_byte = 0;\r\n\r\n    io.register_read(0xB3, this, function()\r\n    {\r\n        // seabios smm_relocate_and_restore\r\n        dbg_log(\"port 0xB3 read\");\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(0x92, this, function()\r\n    {\r\n        return a20_byte;\r\n    });\r\n\r\n    io.register_write(0x92, this, function(out_byte)\r\n    {\r\n        a20_byte = out_byte;\r\n    });\r\n\r\n    io.register_read(0x511, this, function()\r\n    {\r\n        // bios config port (used by seabios and kvm-unit-test)\r\n        let result = this.fw_value & 0xFF;\r\n        this.fw_value >>>= 8;\r\n        return result;\r\n    });\r\n    io.register_write(0x510, this, undefined, function(value)\r\n    {\r\n        dbg_log(\"bios config port, index=\" + h(value));\r\n\r\n        if(value === FW_CFG_SIGNATURE)\r\n        {\r\n            // We could pretend to be QEMU here to control certain options in\r\n            // seabios, but for now this isn't needed\r\n            this.fw_value = 0xfab0fab0|0;\r\n        }\r\n        else if(value === FW_CFG_RAM_SIZE)\r\n        {\r\n            this.fw_value = this.memory_size;\r\n        }\r\n        else if(value === FW_CFG_NB_CPUS)\r\n        {\r\n            this.fw_value = 1;\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\r\n            this.fw_value = 0;\r\n        }\r\n    });\r\n\r\n    if(DEBUG)\r\n    {\r\n        // Use by linux for port-IO delay\r\n        // Avoid generating tons of debug messages\r\n        io.register_write(0x80, this, function(out_byte)\r\n        {\r\n        });\r\n    }\r\n\r\n    this.devices = {};\r\n\r\n    // TODO: Make this more configurable\r\n    if(settings.load_devices)\r\n    {\r\n        this.devices.pic = new PIC(this);\r\n        this.devices.pci = new PCI(this);\r\n\r\n        if(ENABLE_ACPI)\r\n        {\r\n            this.devices.ioapic = new IOAPIC(this);\r\n            this.devices.apic = new APIC(this);\r\n            this.devices.acpi = new ACPI(this);\r\n        }\r\n\r\n        this.devices.rtc = new RTC(this);\r\n        this.fill_cmos(this.devices.rtc, settings);\r\n\r\n        this.devices.dma = new DMA(this);\r\n\r\n        if(ENABLE_HPET)\r\n        {\r\n            this.devices.hpet = new HPET(this);\r\n        }\r\n\r\n        this.devices.vga = new VGAScreen(this, device_bus,\r\n                settings.vga_memory_size || 8 * 1024 * 1024);\r\n\r\n        this.fpu = new FPU(this);\r\n\r\n        this.devices.ps2 = new PS2(this, device_bus);\r\n\r\n        this.devices.uart0 = new UART(this, 0x3F8, device_bus);\r\n\r\n        if(settings.uart1)\r\n        {\r\n            this.devices.uart1 = new UART(this, 0x2F8, device_bus);\r\n        }\r\n        if(settings.uart2)\r\n        {\r\n            this.devices.uart2 = new UART(this, 0x3E8, device_bus);\r\n        }\r\n        if(settings.uart3)\r\n        {\r\n            this.devices.uart3 = new UART(this, 0x3E8, device_bus);\r\n        }\r\n\r\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\r\n\r\n        var ide_device_count = 0;\r\n\r\n        if(settings.hda)\r\n        {\r\n            this.devices.hda = new IDEDevice(this, settings.hda, settings.hdb, false, ide_device_count++, device_bus);\r\n        }\r\n\r\n        if(settings.cdrom)\r\n        {\r\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, undefined, true, ide_device_count++, device_bus);\r\n        }\r\n\r\n        this.devices.pit = new PIT(this, device_bus);\r\n\r\n        if(settings.enable_ne2k)\r\n        {\r\n            this.devices.net = new Ne2k(this, device_bus);\r\n        }\r\n\r\n        if(settings.fs9p)\r\n        {\r\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\r\n        }\r\n\r\n        if(true)\r\n        {\r\n            this.devices.sb16 = new SB16(this, device_bus);\r\n        }\r\n    }\r\n\r\n    if(settings.multiboot)\r\n    {\r\n        dbg_assert(settings.multiboot.buffer);\r\n        this.load_multiboot(settings.multiboot.buffer);\r\n    }\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debug.init();\r\n    }\r\n};\r\n\r\nCPU.prototype.load_multiboot = function(buffer)\r\n{\r\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\r\n\r\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\r\n\r\n    const MAGIC = 0x1BADB002;\r\n    const ELF_MAGIC = 0x464C457F;\r\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\r\n    const MULTIBOOT_SEARCH_BYTES = 8192;\r\n\r\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\r\n    {\r\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\r\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\r\n    }\r\n    else\r\n    {\r\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\r\n    }\r\n\r\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\r\n    {\r\n        if(buf32[offset >> 2] === MAGIC)\r\n        {\r\n            var flags = buf32[offset + 4 >> 2];\r\n            var checksum = buf32[offset + 8 >> 2];\r\n            var total = MAGIC + flags + checksum | 0;\r\n\r\n            if(total)\r\n            {\r\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\r\n                continue;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            continue;\r\n        }\r\n\r\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\r\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\r\n\r\n        this.reg32s[reg_eax] = 0x2BADB002;\r\n\r\n        let multiboot_info_addr = 0x7C00;\r\n        this.reg32s[reg_ebx] = multiboot_info_addr;\r\n        this.write32(multiboot_info_addr, 0);\r\n\r\n        this.cr[0] = 1;\r\n        this.protected_mode = true;\r\n        this.flags = flags_default;\r\n        this.update_cs_size(true);\r\n        this.stack_size_32 = true;\r\n\r\n        for(var i = 0; i < 6; i++)\r\n        {\r\n            this.segment_is_null[i] = 0;\r\n            this.segment_offsets[i] = 0;\r\n            this.segment_limits[i] = 0xFFFFFFFF;\r\n\r\n            // Value doesn't matter, OS isn't allowed to reload without setting\r\n            // up a proper GDT\r\n            this.sreg[i] = 0xB002;\r\n        }\r\n\r\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\r\n        {\r\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\r\n\r\n            var header_addr = buf32[offset + 12 >> 2];\r\n            var load_addr = buf32[offset + 16 >> 2];\r\n            var load_end_addr = buf32[offset + 20 >> 2];\r\n            var bss_end_addr = buf32[offset + 24 >> 2];\r\n            var entry_addr = buf32[offset + 28 >> 2];\r\n\r\n            dbg_log(\"header=\" + h(header_addr, 8) +\r\n                    \" load=\" + h(load_addr, 8) +\r\n                    \" load_end=\" + h(load_end_addr, 8) +\r\n                    \" bss_end=\" + h(bss_end_addr, 8) +\r\n                    \" entry=\" + h(entry_addr, 8));\r\n\r\n            dbg_assert(load_addr <= header_addr);\r\n\r\n            var file_start = offset - (header_addr - load_addr);\r\n\r\n            if(load_end_addr === 0)\r\n            {\r\n                var length = undefined;\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(load_end_addr >= load_addr);\r\n                var length = load_end_addr - load_addr;\r\n            }\r\n\r\n            let blob = new Uint8Array(buffer, file_start, length);\r\n            this.write_blob(blob, load_addr);\r\n\r\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\r\n        }\r\n        else if(buf32[0] === ELF_MAGIC)\r\n        {\r\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\r\n\r\n            let elf = read_elf(buffer);\r\n\r\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\r\n\r\n            for(let program of elf.program_headers)\r\n            {\r\n                if(program.type === 0)\r\n                {\r\n                    // null\r\n                }\r\n                else if(program.type === 1)\r\n                {\r\n                    // load\r\n\r\n                    // Since multiboot specifies that paging is disabled,\r\n                    // virtual and physical address must be equal\r\n                    dbg_assert(program.paddr === program.vaddr);\r\n                    dbg_assert(program.filesz <= program.memsz);\r\n\r\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\r\n                    this.write_blob(blob, program.paddr);\r\n                }\r\n                else if(program.type === 4 ||\r\n                        program.type === 0x6474e550 ||\r\n                        program.type === 0x6474e551)\r\n                {\r\n                    // ignore for now\r\n                }\r\n                else\r\n                {\r\n                    dbg_assert(false, \"unimplemented elf section type\");\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false, \"Not a bootable multiboot format\");\r\n        }\r\n\r\n        // only for kvm-unit-test\r\n        this.io.register_write_consecutive(0xF4, this,\r\n            function(value)\r\n            {\r\n                console.log(\"Test exited with code \" + h(value, 2));\r\n                throw \"HALT\";\r\n            },\r\n            function() {},\r\n            function() {},\r\n            function() {});\r\n\r\n        // only for kvm-unit-test\r\n        for(let i = 0xE; i <= 0xF; i++)\r\n        {\r\n            this.io.register_write(0x2000 + i, this,\r\n                function(value)\r\n                {\r\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\r\n                    if(value)\r\n                    {\r\n                        this.device_raise_irq(i);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.device_lower_irq(i);\r\n                    }\r\n                });\r\n        }\r\n\r\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\r\n        this.debug.dump_state();\r\n        this.debug.dump_regs();\r\n\r\n        break;\r\n    }\r\n};\r\n\r\nCPU.prototype.fill_cmos = function(rtc, settings)\r\n{\r\n    var boot_order = settings.boot_order || 0x213;\r\n\r\n    // Used by seabios to determine the boot order\r\n    //   Nibble\r\n    //   1: FloppyPrio\r\n    //   2: HDPrio\r\n    //   3: CDPrio\r\n    //   4: BEVPrio\r\n    // bootflag 1, high nibble, lowest priority\r\n    // Low nibble: Disable floppy signature check (1)\r\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\r\n\r\n    // bootflag 2, both nibbles, high and middle priority\r\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\r\n\r\n    // 640k or less if less memory is used\r\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\r\n\r\n    var memory_above_1m = 0; // in k\r\n    if(this.memory_size >= 1024 * 1024)\r\n    {\r\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\r\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\r\n    }\r\n\r\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\r\n\r\n    var memory_above_16m = 0; // in 64k blocks\r\n    if(this.memory_size >= 16 * 1024 * 1024)\r\n    {\r\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\r\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\r\n    }\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\r\n\r\n    // memory above 4G (not supported by this emulator)\r\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\r\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\r\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\r\n\r\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\r\n\r\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\r\n\r\n    // Used by bochs BIOS to skip the boot menu delay.\r\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\r\n};\r\n\r\nCPU.prototype.load_bios = function()\r\n{\r\n    var bios = this.bios.main;\r\n    var vga_bios = this.bios.vga;\r\n\r\n    if(!bios)\r\n    {\r\n        dbg_log(\"Warning: No BIOS\");\r\n        return;\r\n    }\r\n\r\n    // load bios\r\n    var data = new Uint8Array(bios),\r\n        start = 0x100000 - bios.byteLength;\r\n\r\n    this.write_blob(data, start);\r\n\r\n    if(vga_bios)\r\n    {\r\n        // load vga bios\r\n        var vga_bios8 = new Uint8Array(vga_bios);\r\n\r\n        // older versions of seabios\r\n        this.write_blob(vga_bios8, 0xC0000);\r\n\r\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\r\n        this.io.mmap_register(0xFEB00000, 0x100000,\r\n            function(addr)\r\n            {\r\n                addr = (addr - 0xFEB00000) | 0;\r\n                if(addr < vga_bios8.length)\r\n                {\r\n                    return vga_bios8[addr];\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            },\r\n            function(addr, value)\r\n            {\r\n                dbg_assert(false, \"Unexpected write to VGA rom\");\r\n            });\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Warning: No VGA BIOS\");\r\n    }\r\n\r\n    // seabios expects the bios to be mapped to 0xFFF00000 also\r\n    this.io.mmap_register(0xFFF00000, 0x100000,\r\n        function(addr)\r\n        {\r\n            addr &= 0xFFFFF;\r\n            return this.mem8[addr];\r\n        }.bind(this),\r\n        function(addr, value)\r\n        {\r\n            addr &= 0xFFFFF;\r\n            this.mem8[addr] = value;\r\n        }.bind(this));\r\n};\r\n\r\nCPU.prototype.do_run = function()\r\n{\r\n    /** @type {number} */\r\n    var start = v86.microtick();\r\n\r\n    /** @type {number} */\r\n    var now = start;\r\n\r\n    // outer loop:\r\n    // runs cycles + timers\r\n    for(; now - start < TIME_PER_FRAME;)\r\n    {\r\n        this.run_hardware_timers(now);\r\n        this.handle_irqs();\r\n\r\n        this.do_many_cycles();\r\n\r\n        if(this.in_hlt)\r\n        {\r\n            return;\r\n        }\r\n\r\n        now = v86.microtick();\r\n    }\r\n};\r\n\r\nCPU.prototype.do_many_cycles = function()\r\n{\r\n    try {\r\n        this.do_many_cycles_unsafe();\r\n    }\r\n    catch(e)\r\n    {\r\n        this.exception_cleanup(e);\r\n    }\r\n};\r\n\r\nCPU.prototype.do_many_cycles_unsafe = function()\r\n{\r\n    // inner loop:\r\n    // runs only cycles\r\n    for(var k = LOOP_COUNTER; k--;)\r\n    {\r\n        this.cycle_internal();\r\n    }\r\n};\r\n\r\n/** @const */\r\nvar PROFILING = false;\r\n\r\nif(PROFILING)\r\n{\r\n    var instruction_total = new Float64Array(256);\r\n    var instruction_count = new Float64Array(256);\r\n\r\n    window[\"print_profiling\"] = function print_profiling()\r\n    {\r\n        var prof_instructions = [];\r\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\r\n            n: h(i, 2),\r\n            total: instruction_total[i],\r\n            count: instruction_count[i],\r\n            per: (instruction_total[i] / instruction_count[i]) || 0,\r\n        };\r\n\r\n        console.log(\"count:\");\r\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\r\n\r\n        console.log(\"time:\");\r\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\r\n\r\n        console.log(\"time/count:\");\r\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\r\n    };\r\n}\r\n\r\n/**\r\n * execute a single instruction cycle on the cpu\r\n * this includes reading all prefixes and the whole instruction\r\n */\r\nCPU.prototype.cycle_internal = function()\r\n{\r\n    this.previous_ip = this.instruction_pointer;\r\n\r\n    this.timestamp_counter++;\r\n\r\n    if(PROFILING)\r\n    {\r\n        var start = performance.now();\r\n    }\r\n\r\n    var opcode = this.read_imm8();\r\n    //this.translate_address_read(this.instruction_pointer + 15|0)\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\r\n    }\r\n\r\n    // call the instruction\r\n    this.table[opcode](this);\r\n\r\n    if(PROFILING)\r\n    {\r\n        var end = performance.now();\r\n        instruction_total[opcode] += end - start;\r\n        instruction_count[opcode]++;\r\n    }\r\n\r\n    if(this.flags & flag_trap)\r\n    {\r\n        // TODO\r\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\r\n    }\r\n};\r\n\r\n/** @export */\r\nCPU.prototype.cycle = function()\r\n{\r\n    try\r\n    {\r\n        this.cycle_internal();\r\n    }\r\n    catch(e)\r\n    {\r\n        this.exception_cleanup(e);\r\n    }\r\n};\r\n\r\nCPU.prototype.segment_prefix_op = function(sreg)\r\n{\r\n    dbg_assert(sreg <= 5);\r\n    this.prefixes |= sreg + 1;\r\n    this.run_prefix_instruction();\r\n    this.prefixes = 0;\r\n};\r\n\r\nCPU.prototype.run_prefix_instruction = function()\r\n{\r\n    if(this.is_osize_32())\r\n    {\r\n        this.table32[this.read_imm8()](this);\r\n    }\r\n    else\r\n    {\r\n        this.table16[this.read_imm8()](this);\r\n    }\r\n};\r\n\r\nCPU.prototype.hlt_loop = function()\r\n{\r\n    dbg_assert(this.flags & flag_interrupt);\r\n    //dbg_log(\"In HLT loop\", LOG_CPU);\r\n\r\n    this.run_hardware_timers(v86.microtick());\r\n    this.handle_irqs();\r\n\r\n    return 0;\r\n};\r\n\r\nCPU.prototype.run_hardware_timers = function(now)\r\n{\r\n    if(ENABLE_HPET)\r\n    {\r\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\r\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\r\n        this.devices.hpet.timer(now);\r\n    }\r\n    else\r\n    {\r\n        var pit_time = this.devices.pit.timer(now, false);\r\n        var rtc_time = this.devices.rtc.timer(now, false);\r\n    }\r\n\r\n    if(ENABLE_ACPI)\r\n    {\r\n        this.devices.acpi.timer(now);\r\n        this.devices.apic.timer(now);\r\n    }\r\n};\r\n\r\nCPU.prototype.clear_prefixes = function()\r\n{\r\n    this.prefixes = 0;\r\n};\r\n\r\nCPU.prototype.set_cr0 = function(cr0)\r\n{\r\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\r\n\r\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\r\n    {\r\n        // cannot load PG without PE\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    this.cr[0] = cr0;\r\n\r\n    if(!this.fpu)\r\n    {\r\n        // if there's no FPU, keep emulation set\r\n        this.cr[0] |= CR0_EM;\r\n    }\r\n    this.cr[0] |= CR0_ET;\r\n\r\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\r\n\r\n    dbg_assert(typeof this.paging === \"boolean\");\r\n    if(new_paging !== this.paging)\r\n    {\r\n        this.paging = new_paging;\r\n        this.full_clear_tlb();\r\n    }\r\n\r\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\r\n};\r\n\r\nCPU.prototype.set_cr4 = function(cr4)\r\n{\r\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\r\n    {\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if((this.cr[4] ^ cr4) & CR4_PGE)\r\n    {\r\n        if(cr4 & CR4_PGE)\r\n        {\r\n            // The PGE bit has been enabled. The global TLB is\r\n            // still empty, so we only have to copy it over\r\n            this.clear_tlb();\r\n        }\r\n        else\r\n        {\r\n            // Clear the global TLB\r\n            this.full_clear_tlb();\r\n        }\r\n    }\r\n\r\n    this.cr[4] = cr4;\r\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\r\n\r\n    if(cr4 & CR4_PAE)\r\n    {\r\n        throw this.debug.unimpl(\"PAE\");\r\n    }\r\n\r\n    if(cr4 & 0xFFFFF900)\r\n    {\r\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\r\n        this.trigger_ud();\r\n    }\r\n\r\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\r\n};\r\n\r\nCPU.prototype.cpl_changed = function()\r\n{\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n};\r\n\r\nCPU.prototype.read_imm8 = function()\r\n{\r\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\r\n    {\r\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\r\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\r\n    }\r\n\r\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\r\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\r\n\r\n    return data8;\r\n};\r\n\r\nCPU.prototype.read_imm8s = function()\r\n{\r\n    return this.read_imm8() << 24 >> 24;\r\n};\r\n\r\nCPU.prototype.read_imm16 = function()\r\n{\r\n    // Two checks in one comparison:\r\n    //    1. Did the high 20 bits of eip change\r\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\r\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\r\n    {\r\n        return this.read_imm8() | this.read_imm8() << 8;\r\n    }\r\n\r\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\r\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\r\n\r\n    return data16;\r\n};\r\n\r\nCPU.prototype.read_imm32s = function()\r\n{\r\n    // Analogue to the above comment\r\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\r\n    {\r\n        return this.read_imm16() | this.read_imm16() << 16;\r\n    }\r\n\r\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\r\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\r\n\r\n    return data32;\r\n};\r\n\r\n/*\r\n * Create an internal data unit to represent 64 bits of data\r\n */\r\nCPU.prototype.create_atom64s = function(low, high)\r\n{\r\n    let data = new Int32Array(2);\r\n    data[0] = low;\r\n    data[1] = high;\r\n    return data;\r\n};\r\n\r\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\r\n{\r\n    let data = new Int32Array(4);\r\n    data[0] = d0;\r\n    data[1] = d1;\r\n    data[2] = d2;\r\n    data[3] = d3;\r\n    return data;\r\n}\r\n\r\nCPU.prototype.read_modrm_byte = function()\r\n{\r\n    this.modrm_byte = this.read_imm8();\r\n};\r\n\r\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\r\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\r\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\r\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\r\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\r\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\r\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\r\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\r\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\r\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\r\n\r\nCPU.prototype.init2 = function () {};\r\nCPU.prototype.branch_taken = function () {};\r\nCPU.prototype.branch_not_taken = function () {};\r\nCPU.prototype.diverged = function () {};\r\n\r\nCPU.prototype.modrm_resolve = function(modrm_byte)\r\n{\r\n    dbg_assert(modrm_byte < 0xC0);\r\n\r\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\r\n};\r\n\r\nCPU.prototype.sib_resolve = function(mod)\r\n{\r\n    return this.sib_table[this.read_sib()](this, mod);\r\n};\r\n\r\nCPU.prototype.clear_instruction_cache = function() {};\r\n\r\n// read word from a page boundary, given 2 physical addresses\r\nCPU.prototype.virt_boundary_read16 = function(low, high)\r\n{\r\n    dbg_assert((low & 0xFFF) === 0xFFF);\r\n    dbg_assert((high & 0xFFF) === 0);\r\n\r\n    return this.read8(low) | this.read8(high) << 8;\r\n};\r\n\r\n// read doubleword from a page boundary, given 2 addresses\r\nCPU.prototype.virt_boundary_read32s = function(low, high)\r\n{\r\n    dbg_assert((low & 0xFFF) >= 0xFFD);\r\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\r\n\r\n    var mid;\r\n\r\n    if(low & 1)\r\n    {\r\n        if(low & 2)\r\n        {\r\n            // 0xFFF\r\n            mid = this.read_aligned16(high - 2 >> 1);\r\n        }\r\n        else\r\n        {\r\n            // 0xFFD\r\n            mid = this.read_aligned16(low + 1 >> 1);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // 0xFFE\r\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\r\n    }\r\n\r\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\r\n};\r\n\r\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\r\n{\r\n    dbg_assert((low & 0xFFF) === 0xFFF);\r\n    dbg_assert((high & 0xFFF) === 0);\r\n\r\n    this.write8(low, value);\r\n    this.write8(high, value >> 8);\r\n};\r\n\r\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\r\n{\r\n    dbg_assert((low & 0xFFF) >= 0xFFD);\r\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\r\n\r\n    this.write8(low, value);\r\n    this.write8(high, value >> 24);\r\n\r\n    if(low & 1)\r\n    {\r\n        if(low & 2)\r\n        {\r\n            // 0xFFF\r\n            this.write8(high - 2, value >> 8);\r\n            this.write8(high - 1, value >> 16);\r\n        }\r\n        else\r\n        {\r\n            // 0xFFD\r\n            this.write8(low + 1 | 0, value >> 8);\r\n            this.write8(low + 2 | 0, value >> 16);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // 0xFFE\r\n        this.write8(low + 1 | 0, value >> 8);\r\n        this.write8(high - 1, value >> 16);\r\n    }\r\n};\r\n\r\n// safe_read, safe_write\r\n// read or write byte, word or dword to the given *virtual* address,\r\n// and be safe on page boundaries\r\n\r\nCPU.prototype.safe_read8 = function(addr)\r\n{\r\n    dbg_assert(addr < 0x80000000);\r\n    return this.read8(this.translate_address_read(addr));\r\n};\r\n\r\nCPU.prototype.safe_read16 = function(addr)\r\n{\r\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\r\n    {\r\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\r\n    }\r\n    else\r\n    {\r\n        return this.read16(this.translate_address_read(addr));\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_read32s = function(addr)\r\n{\r\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\r\n    {\r\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\r\n    }\r\n    else\r\n    {\r\n        return this.read32s(this.translate_address_read(addr));\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_read64s = function(addr)\r\n{\r\n    let data = this.create_atom64s(0, 0);\r\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\r\n    {\r\n        data[0] = this.safe_read32s(addr);\r\n        data[1] = this.safe_read32s(addr + 4 | 0);\r\n    }\r\n    else\r\n    {\r\n        data[0] = this.read32s(this.translate_address_read(addr));\r\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\r\n    }\r\n    return data;\r\n};\r\n\r\nCPU.prototype.safe_read128s_aligned = function(addr)\r\n{\r\n    dbg_assert((addr & 0xF) === 0);\r\n    let phys = this.translate_address_read(addr);\r\n    return this.create_atom128s(\r\n        this.read32s(phys),\r\n        this.read32s(phys + 4 | 0),\r\n        this.read32s(phys + 8 | 0),\r\n        this.read32s(phys + 12 | 0)\r\n    );\r\n};\r\n\r\nCPU.prototype.safe_read128s_unaligned = function(addr)\r\n{\r\n    return this.create_atom128s(\r\n        this.safe_read32s(addr),\r\n        this.safe_read32s(addr + 4 | 0),\r\n        this.safe_read32s(addr + 8 | 0),\r\n        this.safe_read32s(addr + 12 | 0)\r\n    );\r\n};\r\n\r\nCPU.prototype.safe_write8 = function(addr, value)\r\n{\r\n    dbg_assert(addr < 0x80000000);\r\n    this.write8(this.translate_address_write(addr), value);\r\n};\r\n\r\nCPU.prototype.safe_write16 = function(addr, value)\r\n{\r\n    var phys_low = this.translate_address_write(addr);\r\n\r\n    if((addr & 0xFFF) === 0xFFF)\r\n    {\r\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\r\n    }\r\n    else\r\n    {\r\n        this.write16(phys_low, value);\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_write32 = function(addr, value)\r\n{\r\n    var phys_low = this.translate_address_write(addr);\r\n\r\n    if((addr & 0xFFF) >= 0xFFD)\r\n    {\r\n        // XXX\r\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\r\n    }\r\n    else\r\n    {\r\n        this.write32(phys_low, value);\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_write64 = function(addr, low, high)\r\n{\r\n    this.writable_or_pagefault(addr, 8);\r\n    this.safe_write32(addr, low);\r\n    this.safe_write32(addr + 4 | 0, high);\r\n};\r\n\r\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\r\n{\r\n    this.writable_or_pagefault(addr, 16);\r\n    this.safe_write32(addr, d0);\r\n    this.safe_write32(addr + 4 | 0, d1);\r\n    this.safe_write32(addr + 8 | 0, d2);\r\n    this.safe_write32(addr + 12 | 0, d3);\r\n};\r\n\r\n\r\n// read 2 or 4 byte from ip, depending on address size attribute\r\nCPU.prototype.read_moffs = function()\r\n{\r\n    if(this.is_asize_32())\r\n    {\r\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\r\n    }\r\n    else\r\n    {\r\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\r\n    }\r\n};\r\n\r\nCPU.prototype.getiopl = function()\r\n{\r\n    return this.flags >> 12 & 3;\r\n};\r\n\r\nCPU.prototype.vm86_mode = function()\r\n{\r\n    return !!(this.flags & flag_vm);\r\n};\r\n\r\nCPU.prototype.get_eflags = function()\r\n{\r\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\r\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\r\n};\r\n\r\n/**\r\n * Update the flags register depending on iopl and cpl\r\n */\r\nCPU.prototype.update_eflags = function(new_flags)\r\n{\r\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\r\n        clear = ~flag_vip & ~flag_vif & flags_mask;\r\n\r\n    if(this.flags & flag_vm)\r\n    {\r\n        // other case needs to be handled in popf or iret\r\n        dbg_assert(this.getiopl() === 3);\r\n\r\n        dont_update |= flag_iopl;\r\n\r\n        // don't clear vip or vif\r\n        clear |= flag_vip | flag_vif;\r\n    }\r\n    else\r\n    {\r\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\r\n\r\n        if(this.cpl)\r\n        {\r\n            // cpl > 0\r\n            // cannot update iopl\r\n            dont_update |= flag_iopl;\r\n\r\n            if(this.cpl > this.getiopl())\r\n            {\r\n                // cpl > iopl\r\n                // cannot update interrupt flag\r\n                dont_update |= flag_interrupt;\r\n            }\r\n        }\r\n    }\r\n\r\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\r\n\r\n    this.flags_changed = 0;\r\n};\r\n\r\nCPU.prototype.get_stack_reg = function()\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        return this.reg32s[reg_esp];\r\n    }\r\n    else\r\n    {\r\n        return this.reg16[reg_sp];\r\n    }\r\n};\r\n\r\nCPU.prototype.set_stack_reg = function(value)\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        this.reg32s[reg_esp] = value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_sp] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.adjust_stack_reg = function(value)\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        this.reg32s[reg_esp] += value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_sp] += value;\r\n    }\r\n};\r\n\r\nCPU.prototype.get_stack_pointer = function(mod)\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\r\n    }\r\n    else\r\n    {\r\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\r\n    }\r\n};\r\n\r\n/*\r\n * returns the \"real\" instruction pointer,\r\n * without segment offset\r\n */\r\nCPU.prototype.get_real_eip = function()\r\n{\r\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\r\n};\r\n\r\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\r\n{\r\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\r\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\r\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\r\n\r\n    this.debug.debug_interrupt(interrupt_nr);\r\n\r\n    dbg_assert(error_code === false || typeof error_code === \"number\");\r\n\r\n    // we have to leave hlt_loop at some point, this is a\r\n    // good place to do it\r\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\r\n    this.in_hlt = false;\r\n\r\n    if(this.protected_mode)\r\n    {\r\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\r\n        {\r\n            throw this.debug.unimpl(\"VME\");\r\n        }\r\n\r\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\r\n        {\r\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\r\n        {\r\n            dbg_log(interrupt_nr, LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\r\n        dbg_assert((addr & 0xFFF) < 0xFF8);\r\n\r\n        if(this.paging)\r\n        {\r\n            addr = this.translate_address_system_read(addr);\r\n        }\r\n\r\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\r\n        var selector = this.read16(addr + 2 | 0);\r\n        var access = this.read8(addr + 5 | 0);\r\n        var dpl = access >> 5 & 3;\r\n        var type = access & 31;\r\n\r\n        if((access & 0x80) === 0)\r\n        {\r\n            // present bit not set\r\n            throw this.debug.unimpl(\"#NP handler\");\r\n        }\r\n\r\n        if(is_software_int && dpl < this.cpl)\r\n        {\r\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(interrupt_nr << 3 | 2);\r\n        }\r\n\r\n        if(type === 5)\r\n        {\r\n            // task gate\r\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n\r\n            this.do_task_switch(selector, error_code);\r\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\r\n            return;\r\n        }\r\n\r\n        if((type & ~1 & ~8) !== 6)\r\n        {\r\n            // invalid type\r\n            dbg_trace(LOG_CPU);\r\n            dbg_log(\"invalid type: \" + h(type));\r\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        var is_trap = (type & 1) === 1;\r\n        var is_16 = (type & 8) === 0;\r\n\r\n        var info = this.lookup_segment_selector(selector);\r\n\r\n        dbg_assert((base >>> 0) <= info.effective_limit);\r\n        dbg_assert(info.is_valid);\r\n\r\n        if(info.is_null)\r\n        {\r\n            dbg_log(\"is null\");\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n        if(!info.is_executable || info.dpl > this.cpl)\r\n        {\r\n            dbg_log(\"not exec\");\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n        if(!info.is_present)\r\n        {\r\n            // kvm-unit-test\r\n            dbg_log(\"not present\");\r\n            this.trigger_np(interrupt_nr << 3 | 2);\r\n        }\r\n\r\n        var old_flags = this.get_eflags();\r\n\r\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\r\n\r\n        if(!info.dc_bit && info.dpl < this.cpl)\r\n        {\r\n            // inter privilege level interrupt\r\n            // interrupt from vm86 mode\r\n\r\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\r\n            //this.debug.dump_regs();\r\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\r\n\r\n            if(this.tss_size_32)\r\n            {\r\n                var new_esp = this.read32s(tss_stack_addr);\r\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\r\n            }\r\n            else\r\n            {\r\n                var new_esp = this.read16(tss_stack_addr);\r\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\r\n            }\r\n            var ss_info = this.lookup_segment_selector(new_ss);\r\n\r\n            // Disabled: Incorrect handling of direction bit\r\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\r\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\r\n            //    debugger;\r\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\r\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\r\n\r\n            if(ss_info.is_null)\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n            if(!ss_info.is_present)\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n\r\n            var old_esp = this.reg32s[reg_esp];\r\n            var old_ss = this.sreg[reg_ss];\r\n\r\n            if(old_flags & flag_vm)\r\n            {\r\n                //dbg_log(\"return from vm86 mode\");\r\n                //this.debug.dump_regs();\r\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\r\n            }\r\n\r\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\r\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\r\n\r\n            // XXX: with new cpl or with cpl 0?\r\n            this.translate_address_system_write(new_stack_pointer);\r\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\r\n\r\n            // no exceptions below\r\n\r\n            this.cpl = info.dpl;\r\n            this.cpl_changed();\r\n\r\n            this.update_cs_size(info.size);\r\n\r\n            this.flags &= ~flag_vm & ~flag_rf;\r\n\r\n            this.switch_seg(reg_ss, new_ss);\r\n            this.set_stack_reg(new_esp);\r\n\r\n            if(old_flags & flag_vm)\r\n            {\r\n                if(is_16)\r\n                {\r\n                    dbg_assert(false);\r\n                }\r\n                else\r\n                {\r\n                    this.push32(this.sreg[reg_gs]);\r\n                    this.push32(this.sreg[reg_fs]);\r\n                    this.push32(this.sreg[reg_ds]);\r\n                    this.push32(this.sreg[reg_es]);\r\n                }\r\n            }\r\n\r\n            if(is_16)\r\n            {\r\n                this.push16(old_ss);\r\n                this.push16(old_esp);\r\n            }\r\n            else\r\n            {\r\n                this.push32(old_ss);\r\n                this.push32(old_esp);\r\n            }\r\n        }\r\n        else if(info.dc_bit || info.dpl === this.cpl)\r\n        {\r\n            // intra privilege level interrupt\r\n\r\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\r\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\r\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\r\n            //this.debug.dump_regs();\r\n\r\n            if(this.flags & flag_vm)\r\n            {\r\n                dbg_assert(false, \"check error code\");\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n\r\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\r\n\r\n            // XXX: with current cpl or with cpl 0?\r\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\r\n\r\n            // no exceptions below\r\n        }\r\n        else\r\n        {\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        if(is_16)\r\n        {\r\n            this.push16(old_flags);\r\n            this.push16(this.sreg[reg_cs]);\r\n            this.push16(this.get_real_eip());\r\n\r\n            if(error_code !== false)\r\n            {\r\n                this.push16(error_code);\r\n            }\r\n\r\n            base &= 0xFFFF;\r\n        }\r\n        else\r\n        {\r\n            this.push32(old_flags);\r\n            this.push32(this.sreg[reg_cs]);\r\n            this.push32(this.get_real_eip());\r\n\r\n            if(error_code !== false)\r\n            {\r\n                this.push32(error_code);\r\n            }\r\n        }\r\n\r\n        if(old_flags & flag_vm)\r\n        {\r\n            this.switch_seg(reg_gs, 0);\r\n            this.switch_seg(reg_fs, 0);\r\n            this.switch_seg(reg_ds, 0);\r\n            this.switch_seg(reg_es, 0);\r\n        }\r\n\r\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\r\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\r\n\r\n        this.update_cs_size(info.size);\r\n\r\n        this.segment_limits[reg_cs] = info.effective_limit;\r\n        this.segment_offsets[reg_cs] = info.base;\r\n\r\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\r\n\r\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\r\n\r\n        if(!is_trap)\r\n        {\r\n            // clear int flag for interrupt gates\r\n            this.flags &= ~flag_interrupt;\r\n        }\r\n        else\r\n        {\r\n            if((this.flags & flag_interrupt) && !(old_flags & flag_interrupt))\r\n            {\r\n                if(!this.page_fault[0]) // XXX\r\n                {\r\n                    this.handle_irqs();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\r\n\r\n        var index = interrupt_nr << 2;\r\n        var new_ip = this.read16(index);\r\n        var new_cs = this.read16(index + 2 | 0);\r\n\r\n        // push flags, cs:ip\r\n        this.push16(this.get_eflags());\r\n        this.push16(this.sreg[reg_cs]);\r\n        this.push16(this.get_real_eip());\r\n\r\n        this.flags &= ~flag_interrupt;\r\n\r\n        this.switch_cs_real_mode(new_cs);\r\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\r\n    }\r\n\r\n    //dbg_log(\"int to:\", LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\r\n};\r\n\r\nCPU.prototype.iret16 = function()\r\n{\r\n    this.iret(true);\r\n};\r\n\r\nCPU.prototype.iret32 = function()\r\n{\r\n    this.iret(false);\r\n};\r\n\r\nCPU.prototype.iret = function(is_16)\r\n{\r\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\r\n    //this.debug.dump_regs();\r\n\r\n    if(this.vm86_mode() && this.getiopl() < 3)\r\n    {\r\n        // vm86 mode, iopl != 3\r\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(is_16)\r\n    {\r\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\r\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\r\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\r\n    }\r\n    else\r\n    {\r\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\r\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\r\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\r\n    }\r\n\r\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\r\n    {\r\n        if(new_eip & 0xFFFF0000)\r\n        {\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        this.switch_cs_real_mode(new_cs);\r\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\r\n\r\n        if(is_16)\r\n        {\r\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\r\n            this.adjust_stack_reg(3 * 2);\r\n        }\r\n        else\r\n        {\r\n            this.update_eflags(new_flags);\r\n            this.adjust_stack_reg(3 * 4);\r\n        }\r\n\r\n        //dbg_log(\"iret32 to:\", LOG_CPU);\r\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\r\n\r\n        this.handle_irqs();\r\n        return;\r\n    }\r\n\r\n    dbg_assert(!this.vm86_mode());\r\n\r\n    if(this.flags & flag_nt)\r\n    {\r\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(new_flags & flag_vm)\r\n    {\r\n        if(this.cpl === 0)\r\n        {\r\n            // return to virtual 8086 mode\r\n\r\n            // vm86 cannot be set in 16 bit flag\r\n            dbg_assert(!is_16);\r\n\r\n            dbg_assert((new_eip & ~0xFFFF) === 0);\r\n\r\n            //dbg_log(\"in vm86 mode now \" +\r\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\r\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\r\n\r\n\r\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\r\n\r\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\r\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\r\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\r\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\r\n\r\n            // no exceptions below\r\n\r\n            this.update_eflags(new_flags);\r\n            this.flags |= flag_vm;\r\n\r\n            this.switch_cs_real_mode(new_cs);\r\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\r\n\r\n            this.switch_seg(reg_es, new_es);\r\n            this.switch_seg(reg_ds, new_ds);\r\n            this.switch_seg(reg_fs, new_fs);\r\n            this.switch_seg(reg_gs, new_gs);\r\n\r\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\r\n\r\n            this.reg32s[reg_esp] = temp_esp;\r\n            this.switch_seg(reg_ss, temp_ss);\r\n\r\n            this.cpl = 3;\r\n            this.cpl_changed();\r\n\r\n            this.update_cs_size(false);\r\n\r\n            //dbg_log(\"iret32 to:\", LOG_CPU);\r\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\r\n            //this.debug.dump_regs();\r\n\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\r\n            new_flags &= ~flag_vm;\r\n        }\r\n    }\r\n\r\n    // protected mode return\r\n\r\n    var info = this.lookup_segment_selector(new_cs);\r\n\r\n    dbg_assert(info.is_valid);\r\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\r\n\r\n    if(info.is_null)\r\n    {\r\n        throw this.debug.unimpl(\"is null\");\r\n    }\r\n    if(!info.is_present)\r\n    {\r\n        throw this.debug.unimpl(\"not present\");\r\n    }\r\n    if(!info.is_executable)\r\n    {\r\n        throw this.debug.unimpl(\"not exec\");\r\n    }\r\n    if(info.rpl < this.cpl)\r\n    {\r\n        throw this.debug.unimpl(\"rpl < cpl\");\r\n    }\r\n    if(info.dc_bit && info.dpl > info.rpl)\r\n    {\r\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\r\n    }\r\n\r\n    if(!info.dc_bit && info.rpl !== info.dpl)\r\n    {\r\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\r\n        this.trigger_gp(new_cs & ~3);\r\n    }\r\n\r\n    if(info.rpl > this.cpl)\r\n    {\r\n        // outer privilege return\r\n        if(is_16)\r\n        {\r\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\r\n        }\r\n        else\r\n        {\r\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\r\n        }\r\n\r\n        var ss_info = this.lookup_segment_selector(temp_ss);\r\n        var new_cpl = info.rpl;\r\n\r\n        if(ss_info.is_null)\r\n        {\r\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        if(!ss_info.is_valid ||\r\n           ss_info.is_system ||\r\n           ss_info.rpl !== new_cpl ||\r\n           !ss_info.is_writable ||\r\n           ss_info.dpl !== new_cpl)\r\n        {\r\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(temp_ss & ~3);\r\n        }\r\n\r\n        if(!ss_info.is_present)\r\n        {\r\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_ss(temp_ss & ~3);\r\n        }\r\n\r\n        // no exceptions below\r\n\r\n        if(is_16)\r\n        {\r\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\r\n        }\r\n        else\r\n        {\r\n            this.update_eflags(new_flags);\r\n        }\r\n\r\n        this.cpl = info.rpl;\r\n        this.cpl_changed();\r\n\r\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\r\n\r\n        this.switch_seg(reg_ss, temp_ss);\r\n\r\n        this.set_stack_reg(temp_esp);\r\n\r\n        if(this.cpl === 0)\r\n        {\r\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\r\n        }\r\n\r\n\r\n        // XXX: Set segment to 0 if it's not usable in the new cpl\r\n        // XXX: Use cached segment information\r\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\r\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\r\n        // ...\r\n    }\r\n    else if(info.rpl === this.cpl)\r\n    {\r\n        // same privilege return\r\n        // no exceptions below\r\n        if(is_16)\r\n        {\r\n            this.adjust_stack_reg(3 * 2);\r\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\r\n        }\r\n        else\r\n        {\r\n            this.adjust_stack_reg(3 * 4);\r\n            this.update_eflags(new_flags);\r\n        }\r\n\r\n        // update vip and vif, which are not changed by update_eflags\r\n        if(this.cpl === 0)\r\n        {\r\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false);\r\n    }\r\n\r\n    this.sreg[reg_cs] = new_cs;\r\n    dbg_assert((new_cs & 3) === this.cpl);\r\n\r\n    this.update_cs_size(info.size);\r\n\r\n    this.segment_limits[reg_cs] = info.effective_limit;\r\n    this.segment_offsets[reg_cs] = info.base;\r\n\r\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\r\n\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\r\n\r\n    this.handle_irqs();\r\n};\r\n\r\nCPU.prototype.switch_cs_real_mode = function(selector)\r\n{\r\n    dbg_assert(!this.protected_mode || this.vm86_mode());\r\n\r\n    this.sreg[reg_cs] = selector;\r\n    this.segment_is_null[reg_cs] = 0;\r\n    this.segment_offsets[reg_cs] = selector << 4;\r\n};\r\n\r\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\r\n{\r\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\r\n\r\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\r\n\r\n    if(!this.protected_mode)\r\n    {\r\n        dbg_assert(!this.is_32);\r\n        //dbg_assert(!this.stack_size_32);\r\n    }\r\n\r\n    if(!this.protected_mode || this.vm86_mode())\r\n    {\r\n        this.switch_cs_real_mode(selector);\r\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\r\n        return;\r\n    }\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"null cs\", LOG_CPU);\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(!info.is_valid)\r\n    {\r\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.is_system)\r\n    {\r\n        dbg_assert(false, \"is system in far return\");\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(!info.is_executable)\r\n    {\r\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.rpl < this.cpl)\r\n    {\r\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.dc_bit && info.dpl > info.rpl)\r\n    {\r\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(!info.dc_bit && info.dpl !== info.rpl)\r\n    {\r\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\r\n        dbg_trace(LOG_CPU);\r\n        this.trigger_np(selector & ~3);\r\n    }\r\n\r\n    if(info.rpl > this.cpl)\r\n    {\r\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\r\n\r\n        if(this.is_osize_32())\r\n        {\r\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\r\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\r\n            //dbg_log(\"esp=\" + h(temp_esp));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\r\n        }\r\n        else\r\n        {\r\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\r\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\r\n            //dbg_log(\"esp=\" + h(temp_esp));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\r\n        }\r\n\r\n        this.cpl = info.rpl;\r\n        this.cpl_changed();\r\n\r\n        // XXX: Can raise, conditions should be checked before side effects\r\n        this.switch_seg(reg_ss, temp_ss);\r\n        this.set_stack_reg(temp_esp + stack_adjust);\r\n\r\n        //if(this.is_osize_32())\r\n        //{\r\n        //    this.adjust_stack_reg(2 * 4);\r\n        //}\r\n        //else\r\n        //{\r\n        //    this.adjust_stack_reg(2 * 2);\r\n        //}\r\n\r\n        //throw this.debug.unimpl(\"privilege change\");\r\n\r\n        //this.adjust_stack_reg(stack_adjust);\r\n    }\r\n    else\r\n    {\r\n        if(this.is_osize_32())\r\n        {\r\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\r\n        }\r\n        else\r\n        {\r\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\r\n        }\r\n    }\r\n\r\n    //dbg_assert(this.cpl === info.dpl);\r\n\r\n    this.update_cs_size(info.size);\r\n\r\n    this.segment_is_null[reg_cs] = 0;\r\n    this.segment_limits[reg_cs] = info.effective_limit;\r\n    //this.segment_infos[reg_cs] = 0; // TODO\r\n\r\n    this.segment_offsets[reg_cs] = info.base;\r\n    this.sreg[reg_cs] = selector;\r\n\r\n    dbg_assert((selector & 3) === this.cpl);\r\n\r\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n\r\n    //dbg_log(\"far return to:\", LOG_CPU)\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\r\n};\r\n\r\nCPU.prototype.far_jump = function(eip, selector, is_call)\r\n{\r\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\r\n\r\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\r\n\r\n    if(!this.protected_mode || this.vm86_mode())\r\n    {\r\n        if(is_call)\r\n        {\r\n            if(this.is_osize_32())\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                this.push32(this.sreg[reg_cs]);\r\n                this.push32(this.get_real_eip());\r\n            }\r\n            else\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                this.push16(this.sreg[reg_cs]);\r\n                this.push16(this.get_real_eip());\r\n            }\r\n        }\r\n        this.switch_cs_real_mode(selector);\r\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n        return;\r\n    }\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"#gp null cs\", LOG_CPU);\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(!info.is_valid)\r\n    {\r\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.is_system)\r\n    {\r\n        dbg_assert(is_call, \"TODO: Jump\");\r\n\r\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\r\n\r\n        if(info.type === 0xC || info.type === 4)\r\n        {\r\n            // call gate\r\n            var is_16 = info.type === 4;\r\n\r\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\r\n            {\r\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n\r\n            if(!info.is_present)\r\n            {\r\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\r\n                this.trigger_np(selector & ~3);\r\n            }\r\n\r\n            var cs_selector = info.raw0 >>> 16;\r\n            var cs_info = this.lookup_segment_selector(cs_selector);\r\n\r\n            if(cs_info.is_null)\r\n            {\r\n                dbg_log(\"#gp null cs\", LOG_CPU);\r\n                this.trigger_gp(0);\r\n            }\r\n\r\n            if(!cs_info.is_valid)\r\n            {\r\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\r\n                this.trigger_gp(cs_selector & ~3);\r\n            }\r\n\r\n            if(!cs_info.is_executable)\r\n            {\r\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\r\n                this.trigger_gp(cs_selector & ~3);\r\n            }\r\n\r\n            if(cs_info.dpl > this.cpl)\r\n            {\r\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\r\n                this.trigger_gp(cs_selector & ~3);\r\n            }\r\n\r\n            if(!cs_info.is_present)\r\n            {\r\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\r\n                this.trigger_np(cs_selector & ~3);\r\n            }\r\n\r\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\r\n            {\r\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\r\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\r\n\r\n                if(this.tss_size_32)\r\n                {\r\n                    var new_esp = this.read32s(tss_stack_addr);\r\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\r\n                }\r\n                else\r\n                {\r\n                    var new_esp = this.read16(tss_stack_addr);\r\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\r\n                }\r\n                var ss_info = this.lookup_segment_selector(new_ss);\r\n\r\n                // Disabled: Incorrect handling of direction bit\r\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\r\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\r\n                //    debugger;\r\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\r\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\r\n\r\n                if(ss_info.is_null)\r\n                {\r\n                    throw this.debug.unimpl(\"#TS handler\");\r\n                }\r\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\r\n                {\r\n                    throw this.debug.unimpl(\"#TS handler\");\r\n                }\r\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\r\n                {\r\n                    throw this.debug.unimpl(\"#TS handler\");\r\n                }\r\n                if(!ss_info.is_present)\r\n                {\r\n                    throw this.debug.unimpl(\"#SS handler\");\r\n                }\r\n\r\n                var parameter_count = info.raw1 & 0x1F;\r\n                var stack_space = is_16 ? 4 : 8;\r\n                if(is_call)\r\n                {\r\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\r\n                }\r\n                if(ss_info.size)\r\n                {\r\n                    //try {\r\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\r\n                    //} catch(e) { debugger; }\r\n                }\r\n                else\r\n                {\r\n                    //try {\r\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\r\n                    //} catch(e) { debugger; }\r\n                }\r\n\r\n                var old_esp = this.reg32s[reg_esp];\r\n                var old_ss = this.sreg[reg_ss];\r\n                var old_stack_pointer = this.get_stack_pointer(0);\r\n\r\n                //dbg_log(\"old_esp=\" + h(old_esp));\r\n\r\n                this.cpl = cs_info.dpl;\r\n                this.cpl_changed();\r\n\r\n                this.update_cs_size(cs_info.size);\r\n\r\n                this.switch_seg(reg_ss, new_ss);\r\n                this.set_stack_reg(new_esp);\r\n\r\n                //dbg_log(\"parameter_count=\" + parameter_count);\r\n                //dbg_assert(parameter_count === 0, \"TODO\");\r\n\r\n                if(is_16)\r\n                {\r\n                    this.push16(old_ss);\r\n                    this.push16(old_esp);\r\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\r\n                }\r\n                else\r\n                {\r\n                    this.push32(old_ss);\r\n                    this.push32(old_esp);\r\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\r\n                }\r\n\r\n                if(is_call)\r\n                {\r\n                    if(is_16)\r\n                    {\r\n                        for(var i = parameter_count - 1; i >= 0; i--)\r\n                        {\r\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\r\n                            this.push16(parameter);\r\n                        }\r\n\r\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                        this.push16(this.sreg[reg_cs]);\r\n                        this.push16(this.get_real_eip());\r\n                    }\r\n                    else\r\n                    {\r\n                        for(var i = parameter_count - 1; i >= 0; i--)\r\n                        {\r\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\r\n                            this.push32(parameter);\r\n                        }\r\n\r\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                        this.push32(this.sreg[reg_cs]);\r\n                        this.push32(this.get_real_eip());\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\r\n                // ok\r\n\r\n                if(is_call)\r\n                {\r\n                    if(is_16)\r\n                    {\r\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                        this.push16(this.sreg[reg_cs]);\r\n                        this.push16(this.get_real_eip());\r\n                    }\r\n                    else\r\n                    {\r\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                        this.push32(this.sreg[reg_cs]);\r\n                        this.push32(this.get_real_eip());\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Note: eip from call is ignored\r\n            var new_eip = info.raw0 & 0xFFFF;\r\n            if(!is_16)\r\n            {\r\n                new_eip |= info.raw1 & 0xFFFF0000;\r\n            }\r\n\r\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\r\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\r\n\r\n            this.update_cs_size(cs_info.size);\r\n\r\n            this.segment_is_null[reg_cs] = 0;\r\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\r\n            //this.segment_infos[reg_cs] = 0; // TODO\r\n            this.segment_offsets[reg_cs] = cs_info.base;\r\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\r\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\r\n\r\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\r\n        }\r\n        else\r\n        {\r\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\r\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(!info.is_executable)\r\n        {\r\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\r\n            this.trigger_gp(selector & ~3);\r\n        }\r\n\r\n        if(info.dc_bit)\r\n        {\r\n            // conforming code segment\r\n            if(info.dpl > this.cpl)\r\n            {\r\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // non-conforming code segment\r\n\r\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\r\n            {\r\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n        }\r\n\r\n        if(!info.is_present)\r\n        {\r\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_np(selector & ~3);\r\n        }\r\n\r\n        if(is_call)\r\n        {\r\n            if(this.is_osize_32())\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                this.push32(this.sreg[reg_cs]);\r\n                this.push32(this.get_real_eip());\r\n            }\r\n            else\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                this.push16(this.sreg[reg_cs]);\r\n                this.push16(this.get_real_eip());\r\n            }\r\n        }\r\n\r\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\r\n\r\n        this.update_cs_size(info.size);\r\n\r\n        this.segment_is_null[reg_cs] = 0;\r\n        this.segment_limits[reg_cs] = info.effective_limit;\r\n        //this.segment_infos[reg_cs] = 0; // TODO\r\n\r\n        this.segment_offsets[reg_cs] = info.base;\r\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\r\n\r\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n    }\r\n\r\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\r\n};\r\n\r\nCPU.prototype.get_tss_stack_addr = function(dpl)\r\n{\r\n    if(this.tss_size_32)\r\n    {\r\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\r\n\r\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\r\n        {\r\n            throw this.debug.unimpl(\"#TS handler\");\r\n        }\r\n\r\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\r\n\r\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\r\n    }\r\n    else\r\n    {\r\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\r\n\r\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\r\n        {\r\n            throw this.debug.unimpl(\"#TS handler\");\r\n        }\r\n\r\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\r\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\r\n    }\r\n\r\n    if(this.paging)\r\n    {\r\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\r\n    }\r\n\r\n    return tss_stack_addr;\r\n};\r\n\r\nCPU.prototype.do_task_switch = function(selector, error_code)\r\n{\r\n    dbg_assert(this.tss_size_32, \"TODO\");\r\n\r\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\r\n    var descriptor = this.lookup_segment_selector(selector);\r\n\r\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\r\n    var tss_is_16 = descriptor.type <= 3;\r\n    var tss_is_busy = (descriptor.type & 2) === 2;\r\n\r\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\r\n    {\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if((descriptor.access & 31) === 0xB)\r\n    {\r\n        // is busy\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!descriptor.is_present)\r\n    {\r\n        throw this.debug.unimpl(\"#NP handler\");\r\n    }\r\n\r\n    if(descriptor.effective_limit < 103)\r\n    {\r\n        throw this.debug.unimpl(\"#NP handler\");\r\n    }\r\n\r\n    var tsr_size = this.segment_limits[reg_tr];\r\n    var tsr_offset = this.segment_offsets[reg_tr];\r\n\r\n    var old_eflags = this.get_eflags();\r\n\r\n    if(tss_is_busy)\r\n    {\r\n        old_eflags &= ~flag_nt;\r\n    }\r\n\r\n    this.writable_or_pagefault(tsr_offset, 0x66);\r\n\r\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\r\n\r\n    // TODO: Write 16 bit values if old tss is 16 bit\r\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\r\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\r\n\r\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\r\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\r\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\r\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\r\n\r\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\r\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\r\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\r\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\r\n\r\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\r\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\r\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\r\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\r\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\r\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\r\n\r\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\r\n\r\n    if(true /* is jump or call or int */)\r\n    {\r\n        // mark as busy\r\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\r\n    }\r\n\r\n    //var new_tsr_size = descriptor.effective_limit;\r\n    var new_tsr_offset = descriptor.base;\r\n\r\n    dbg_assert(!tss_is_16, \"unimplemented\");\r\n\r\n    if(true /* is call or int */)\r\n    {\r\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\r\n    }\r\n\r\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\r\n\r\n    this.flags &= ~flag_vm;\r\n\r\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\r\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\r\n    var info = this.lookup_segment_selector(new_cs);\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"null cs\", LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.is_valid)\r\n    {\r\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(info.is_system)\r\n    {\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.is_executable)\r\n    {\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(info.dc_bit && info.dpl > info.rpl)\r\n    {\r\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.dc_bit && info.dpl !== info.rpl)\r\n    {\r\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    this.segment_is_null[reg_cs] = 0;\r\n    this.segment_limits[reg_cs] = info.effective_limit;\r\n    this.segment_offsets[reg_cs] = info.base;\r\n    this.sreg[reg_cs] = new_cs;\r\n\r\n    this.cpl = info.dpl;\r\n    this.cpl_changed();\r\n\r\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\r\n\r\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\r\n    this.update_cs_size(info.size);\r\n\r\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\r\n\r\n    if(true /* is call or int */)\r\n    {\r\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\r\n        new_eflags |= flag_nt;\r\n    }\r\n\r\n    if(new_eflags & flag_vm)\r\n    {\r\n        throw this.debug.unimpl(\"task switch to VM mode\");\r\n    }\r\n\r\n    this.update_eflags(new_eflags);\r\n\r\n    if(true /* call or int */)\r\n    {\r\n        this.flags |= flag_nt;\r\n    }\r\n\r\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\r\n    this.load_ldt(new_ldt);\r\n\r\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\r\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\r\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\r\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\r\n\r\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\r\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\r\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\r\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\r\n\r\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\r\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\r\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\r\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\r\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\r\n\r\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\r\n\r\n    this.segment_offsets[reg_tr] = descriptor.base;\r\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\r\n    this.sreg[reg_tr] = selector;\r\n\r\n    this.cr[3] = new_cr3;\r\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\r\n    this.clear_tlb();\r\n\r\n    this.cr[0] |= CR0_TS;\r\n\r\n    if(error_code !== false)\r\n    {\r\n        if(tss_is_16)\r\n        {\r\n            this.push16(error_code & 0xFFFF);\r\n        }\r\n        else\r\n        {\r\n            this.push32(error_code);\r\n        }\r\n    }\r\n};\r\n\r\nCPU.prototype.hlt_op = function()\r\n{\r\n    if(this.cpl)\r\n    {\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if((this.flags & flag_interrupt) === 0)\r\n    {\r\n        this.debug.show(\"cpu halted\");\r\n        this.bus.send(\"cpu-event-halt\");\r\n        if(DEBUG) this.debug.dump_regs();\r\n        throw \"HALT\";\r\n    }\r\n    else\r\n    {\r\n        // get out of here and into hlt_loop\r\n        this.in_hlt = true;\r\n\r\n        //if(false) // possibly unsafe, test in safari\r\n        //{\r\n        //    this.hlt_loop();\r\n        //    this.diverged();\r\n        //    if(this.in_hlt)\r\n        //    {\r\n        //        throw MAGIC_CPU_EXCEPTION;\r\n        //    }\r\n        //}\r\n        //else\r\n        {\r\n            throw MAGIC_CPU_EXCEPTION;\r\n        }\r\n    }\r\n};\r\n\r\n// assumes ip to point to the byte before the next instruction\r\nCPU.prototype.raise_exception = function(interrupt_nr)\r\n{\r\n    //if(DEBUG && interrupt_nr !== 7)\r\n    //{\r\n    //    // show interesting exceptions\r\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\r\n    //    dbg_trace(LOG_CPU);\r\n    //    this.debug.dump_regs();\r\n    //    this.debug.dump_state();\r\n    //}\r\n\r\n    this.call_interrupt_vector(interrupt_nr, false, false);\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\r\n{\r\n    dbg_assert(typeof error_code === \"number\");\r\n\r\n    //if(DEBUG)\r\n    //{\r\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\r\n    //    dbg_trace(LOG_CPU);\r\n    //    this.debug.dump_regs();\r\n    //}\r\n\r\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.trigger_de = function()\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception(0);\r\n};\r\n\r\nCPU.prototype.trigger_ud = function()\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception(6);\r\n};\r\n\r\nCPU.prototype.trigger_nm = function()\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception(7);\r\n};\r\n\r\nCPU.prototype.trigger_ts = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(10, code);\r\n};\r\n\r\nCPU.prototype.trigger_gp = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(13, code);\r\n};\r\n\r\nCPU.prototype.trigger_np = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(11, code);\r\n};\r\n\r\nCPU.prototype.trigger_ss = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(12, code);\r\n};\r\n\r\n// used before fpu instructions\r\nCPU.prototype.task_switch_test = function()\r\n{\r\n    if(this.cr[0] & (CR0_EM | CR0_TS))\r\n    {\r\n        this.trigger_nm();\r\n    }\r\n};\r\n\r\n// used before mmx instructions\r\nCPU.prototype.task_switch_test_mmx = function()\r\n{\r\n    if(this.cr[0] & (CR0_EM | CR0_TS))\r\n    {\r\n        if(this.cr[0] & CR0_TS)\r\n        {\r\n            this.trigger_nm();\r\n        }\r\n        else\r\n        {\r\n            this.trigger_ud();\r\n        }\r\n    }\r\n\r\n};\r\n\r\nCPU.prototype.todo = function()\r\n{\r\n    if(DEBUG)\r\n    {\r\n        dbg_trace();\r\n        throw \"TODO\";\r\n    }\r\n\r\n    this.trigger_ud();\r\n};\r\n\r\nCPU.prototype.undefined_instruction = function()\r\n{\r\n    dbg_assert(false, \"Possible fault: undefined instruction\");\r\n    this.trigger_ud();\r\n};\r\n\r\nCPU.prototype.unimplemented_sse = function()\r\n{\r\n    dbg_log(\"No SSE\", LOG_CPU);\r\n    dbg_assert(false);\r\n    this.trigger_ud();\r\n};\r\n\r\nCPU.prototype.get_seg_prefix_ds = function()\r\n{\r\n    return this.get_seg_prefix(reg_ds);\r\n};\r\n\r\nCPU.prototype.get_seg_prefix_ss = function()\r\n{\r\n    return this.get_seg_prefix(reg_ss);\r\n};\r\n\r\nCPU.prototype.get_seg_prefix_cs = function()\r\n{\r\n    return this.get_seg_prefix(reg_cs);\r\n};\r\n\r\n/**\r\n * Get segment base by prefix or default\r\n * @param {number} default_segment\r\n */\r\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\r\n{\r\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\r\n\r\n    if(prefix)\r\n    {\r\n        if(prefix === SEG_PREFIX_ZERO)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return this.get_seg(prefix - 1 /*, offset*/);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return this.get_seg(default_segment /*, offset*/);\r\n    }\r\n};\r\n\r\n/**\r\n * Get segment base\r\n * @param {number} segment\r\n */\r\nCPU.prototype.get_seg = function(segment /*, offset*/)\r\n{\r\n    dbg_assert(segment >= 0 && segment < 8);\r\n\r\n    if(this.protected_mode)\r\n    {\r\n        if(this.segment_is_null[segment])\r\n        {\r\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\r\n            dbg_trace();\r\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\r\n\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        // TODO:\r\n        // - validate segment limits\r\n        // - validate if segment is writable\r\n    }\r\n\r\n    return this.segment_offsets[segment];\r\n};\r\n\r\nCPU.prototype.read_e8 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_e8s = function()\r\n{\r\n    return this.read_e8() << 24 >> 24;\r\n};\r\n\r\nCPU.prototype.read_e16 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.reg16[this.modrm_byte << 1 & 14];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_e16s = function()\r\n{\r\n    return this.read_e16() << 16 >> 16;\r\n};\r\n\r\nCPU.prototype.read_e32s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.reg32s[this.modrm_byte & 7];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_e32 = function()\r\n{\r\n    return this.read_e32s() >>> 0;\r\n};\r\n\r\nCPU.prototype.read_mmx_mem32s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        // Returning lower dword of qword\r\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_mmx_mem64s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.create_atom64s(\r\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\r\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.read_xmm_mem64s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        let i = (this.modrm_byte & 7) << 2;\r\n        return this.create_atom64s(\r\n            this.reg_xmm32s[i],\r\n            this.reg_xmm32s[i | 1]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.read_xmm_mem128s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        let i = (this.modrm_byte & 7) << 2;\r\n        return this.create_atom128s(\r\n            this.reg_xmm32s[i],\r\n            this.reg_xmm32s[i | 1],\r\n            this.reg_xmm32s[i | 2],\r\n            this.reg_xmm32s[i | 3]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.read_xmm_mem128s_unaligned = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        let i = (this.modrm_byte & 7) << 2;\r\n        return this.create_atom128s(\r\n            this.reg_xmm32s[i],\r\n            this.reg_xmm32s[i | 1],\r\n            this.reg_xmm32s[i | 2],\r\n            this.reg_xmm32s[i | 3]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.set_e8 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write8(addr, value);\r\n    } else {\r\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_e16 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write16(addr, value);\r\n    } else {\r\n        this.reg16[this.modrm_byte << 1 & 14] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_e32 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write32(addr, value);\r\n    } else {\r\n        this.reg32s[this.modrm_byte & 7] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_mmx_mem64s = function(low, high)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write64(addr, low, high);\r\n    } else {\r\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\r\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_write_e8 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\r\n        this.phys_addr = this.translate_address_write(virt_addr);\r\n        return this.read8(this.phys_addr);\r\n    } else {\r\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\r\n    }\r\n};\r\n\r\nCPU.prototype.write_e8 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        this.write8(this.phys_addr, value);\r\n    }\r\n    else {\r\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_write_e16 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\r\n        this.phys_addr = this.translate_address_write(virt_addr);\r\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\r\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\r\n            dbg_assert(this.phys_addr_high);\r\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\r\n        } else {\r\n            this.phys_addr_high = 0;\r\n            return this.read16(this.phys_addr);\r\n        }\r\n    } else {\r\n        return this.reg16[this.modrm_byte << 1 & 14];\r\n    }\r\n};\r\n\r\nCPU.prototype.write_e16 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        if(this.phys_addr_high) {\r\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\r\n        } else {\r\n            this.write16(this.phys_addr, value);\r\n        }\r\n    } else {\r\n        this.reg16[this.modrm_byte << 1 & 14] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_write_e32 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\r\n        this.phys_addr = this.translate_address_write(virt_addr);\r\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\r\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\r\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\r\n            dbg_assert(this.phys_addr_high);\r\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\r\n        } else {\r\n            this.phys_addr_high = 0;\r\n            return this.read32s(this.phys_addr);\r\n        }\r\n    } else {\r\n        return this.reg32s[this.modrm_byte & 7];\r\n    }\r\n};\r\n\r\nCPU.prototype.write_e32 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        if(this.phys_addr_high) {\r\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\r\n        } else {\r\n            this.write32(this.phys_addr, value);\r\n        }\r\n    } else {\r\n        this.reg32s[this.modrm_byte & 7] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_reg_e16 = function()\r\n{\r\n    return this.reg16[this.modrm_byte << 1 & 14];\r\n};\r\n\r\nCPU.prototype.write_reg_e16 = function(value)\r\n{\r\n    this.reg16[this.modrm_byte << 1 & 14] = value;\r\n};\r\n\r\nCPU.prototype.read_reg_e32s = function()\r\n{\r\n    return this.reg32s[this.modrm_byte & 7];\r\n};\r\n\r\nCPU.prototype.write_reg_e32 = function(value)\r\n{\r\n    this.reg32s[this.modrm_byte & 7] = value;\r\n};\r\n\r\nCPU.prototype.read_g8 = function()\r\n{\r\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\r\n};\r\n\r\nCPU.prototype.write_g8 = function(value)\r\n{\r\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\r\n};\r\n\r\nCPU.prototype.read_g16 = function()\r\n{\r\n    return this.reg16[this.modrm_byte >> 2 & 14];\r\n};\r\n\r\nCPU.prototype.read_g16s = function()\r\n{\r\n    return this.reg16s[this.modrm_byte >> 2 & 14];\r\n};\r\n\r\nCPU.prototype.write_g16 = function(value)\r\n{\r\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\r\n};\r\n\r\nCPU.prototype.read_g32s = function()\r\n{\r\n    return this.reg32s[this.modrm_byte >> 3 & 7];\r\n};\r\n\r\nCPU.prototype.write_g32 = function(value)\r\n{\r\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\r\n};\r\n\r\nCPU.prototype.read_xmm64s = function()\r\n{\r\n    return this.create_atom64s(\r\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\r\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\r\n    );\r\n};\r\n\r\nCPU.prototype.read_xmm128s = function()\r\n{\r\n    let i = (this.modrm_byte >> 3 & 7) << 2;\r\n    return this.create_atom128s(\r\n        this.reg_xmm32s[i | 0],\r\n        this.reg_xmm32s[i | 1],\r\n        this.reg_xmm32s[i | 2],\r\n        this.reg_xmm32s[i | 3]\r\n    );\r\n};\r\n\r\nCPU.prototype.read_mmx64s = function()\r\n{\r\n    return this.create_atom64s(\r\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\r\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\r\n    );\r\n};\r\n\r\nCPU.prototype.write_mmx64s = function(low, high)\r\n{\r\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\r\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\r\n};\r\n\r\nCPU.prototype.write_xmm64 = function(low, high)\r\n{\r\n    let i = (this.modrm_byte >> 3 & 7) << 2;\r\n    this.reg_xmm32s[i] = low;\r\n    this.reg_xmm32s[i + 1] = high;\r\n};\r\n\r\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\r\n{\r\n    let i = (this.modrm_byte >> 3 & 7) << 2;\r\n    this.reg_xmm32s[i] = d0;\r\n    this.reg_xmm32s[i + 1] = d1;\r\n    this.reg_xmm32s[i + 2] = d2;\r\n    this.reg_xmm32s[i + 3] = d3;\r\n};\r\n\r\nCPU.prototype.pic_call_irq = function(int)\r\n{\r\n    try\r\n    {\r\n        this.previous_ip = this.instruction_pointer;\r\n        this.call_interrupt_vector(int, false, false);\r\n    }\r\n    catch(e)\r\n    {\r\n        this.exception_cleanup(e);\r\n    }\r\n};\r\n\r\nCPU.prototype.handle_irqs = function()\r\n{\r\n    dbg_assert(!this.page_fault);\r\n\r\n    this.diverged();\r\n\r\n    if((this.flags & flag_interrupt) && !this.page_fault)\r\n    {\r\n        if(this.devices.pic)\r\n        {\r\n            this.devices.pic.acknowledge_irq();\r\n        }\r\n\r\n        if(this.devices.apic)\r\n        {\r\n            this.devices.apic.acknowledge_irq();\r\n        }\r\n    }\r\n};\r\n\r\nCPU.prototype.device_raise_irq = function(i)\r\n{\r\n    dbg_assert(arguments.length === 1);\r\n    if(this.devices.pic)\r\n    {\r\n        this.devices.pic.set_irq(i);\r\n    }\r\n\r\n    if(this.devices.ioapic)\r\n    {\r\n        this.devices.ioapic.set_irq(i);\r\n    }\r\n};\r\n\r\nCPU.prototype.device_lower_irq = function(i)\r\n{\r\n    if(this.devices.pic)\r\n    {\r\n        this.devices.pic.clear_irq(i);\r\n    }\r\n\r\n    if(this.devices.ioapic)\r\n    {\r\n        this.devices.ioapic.clear_irq(i);\r\n    }\r\n};\r\n\r\nCPU.prototype.test_privileges_for_io = function(port, size)\r\n{\r\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\r\n    {\r\n        if(!this.tss_size_32)\r\n        {\r\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\r\n            CPU_LOG_VERBOSE && this.debug.dump_state();\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        var tsr_size = this.segment_limits[reg_tr];\r\n        var tsr_offset = this.segment_offsets[reg_tr];\r\n\r\n        if(tsr_size >= 0x67)\r\n        {\r\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\r\n\r\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\r\n                high_port = port + size - 1 | 0;\r\n\r\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\r\n            {\r\n                var mask = ((1 << size) - 1) << (port & 7),\r\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\r\n                    port_info = (mask & 0xFF00) ?\r\n                        this.read16(addr) : this.read8(addr);\r\n\r\n                dbg_assert((addr & 0xFFF) < 0xFFF);\r\n\r\n                if(!(port_info & mask))\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\r\n        CPU_LOG_VERBOSE && this.debug.dump_state();\r\n        this.trigger_gp(0);\r\n    }\r\n};\r\n\r\nCPU.prototype.cpuid = function()\r\n{\r\n    // cpuid\r\n    // TODO: Fill in with less bogus values\r\n\r\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\r\n    // http://www.sandpile.org/x86/cpuid.htm\r\n\r\n    var eax = 0;\r\n    var ecx = 0;\r\n    var edx = 0;\r\n    var ebx = 0;\r\n\r\n    var winnt_fix = false;\r\n\r\n    switch(this.reg32s[reg_eax])\r\n    {\r\n        case 0:\r\n            // maximum supported level\r\n            if(winnt_fix)\r\n            {\r\n                eax = 2;\r\n            }\r\n            else\r\n            {\r\n                eax = 5;\r\n            }\r\n\r\n            ebx = 0x756E6547|0; // Genu\r\n            edx = 0x49656E69|0; // ineI\r\n            ecx = 0x6C65746E|0; // ntel\r\n            break;\r\n\r\n        case 1:\r\n            // pentium\r\n            eax = 3 | 6 << 4 | 15 << 8;\r\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\r\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\r\n            var vme = 0 << 1;\r\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\r\n            edx = (this.fpu ? 1 : 0) |                // fpu\r\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\r\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\r\n                    0 << 23 | 0 << 24 | 0 << 25 | 0 << 26;   // mmx, fxsr, sse, sse2\r\n\r\n            if(ENABLE_ACPI && this.apic_enabled)\r\n            {\r\n                edx |= 1 << 9; // apic\r\n            }\r\n            break;\r\n\r\n        case 2:\r\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\r\n            eax = 0x665B5001|0;\r\n            ebx = 0;\r\n            ecx = 0;\r\n            edx = 0x007A7000;\r\n            break;\r\n\r\n        case 4:\r\n            // from my local machine\r\n            switch(this.reg32s[reg_ecx])\r\n            {\r\n                case 0:\r\n                    eax = 0x00000121;\r\n                    ebx = 0x01c0003f;\r\n                    ecx = 0x0000003f;\r\n                    edx = 0x00000001;\r\n                    break;\r\n                case 1:\r\n                    eax = 0x00000122;\r\n                    ebx = 0x01c0003f;\r\n                    ecx = 0x0000003f;\r\n                    edx = 0x00000001;\r\n                    break;\r\n                case 2:\r\n                    eax = 0x00000143;\r\n                    ebx = 0x05c0003f;\r\n                    ecx = 0x00000fff;\r\n                    edx = 0x00000001;\r\n                    break;\r\n            }\r\n            break;\r\n\r\n        case 5:\r\n            // from my local machine\r\n            eax = 0x40;\r\n            ebx = 0x40;\r\n            ecx = 3;\r\n            edx = 0x00142120;\r\n            break;\r\n\r\n        case 0x80000000|0:\r\n            // maximum supported extended level\r\n            eax = 5;\r\n            // other registers are reserved\r\n            break;\r\n\r\n        case 0x40000000|0: // hypervisor\r\n            if(VMWARE_HYPERVISOR_PORT)\r\n            {\r\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\r\n                ebx = 0x61774D56|0; // VMwa\r\n                ecx = 0x4D566572|0; // reVM\r\n                edx = 0x65726177|0; // ware\r\n            }\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\r\n    }\r\n\r\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\r\n\r\n    this.reg32s[reg_eax] = eax;\r\n    this.reg32s[reg_ecx] = ecx;\r\n    this.reg32s[reg_edx] = edx;\r\n    this.reg32s[reg_ebx] = ebx;\r\n};\r\n\r\nCPU.prototype.update_cs_size = function(new_size)\r\n{\r\n    dbg_assert(typeof new_size === \"boolean\");\r\n\r\n    if(this.is_32 !== new_size)\r\n    {\r\n        this.clear_instruction_cache();\r\n        this.is_32 = new_size;\r\n        this.update_operand_size();\r\n    }\r\n};\r\n\r\nCPU.prototype.update_operand_size = function()\r\n{\r\n    if(this.is_32)\r\n    {\r\n        this.table = this.table32;\r\n    }\r\n    else\r\n    {\r\n        this.table = this.table16;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} selector\r\n */\r\nCPU.prototype.lookup_segment_selector = function(selector)\r\n{\r\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\r\n\r\n    var is_gdt = (selector & 4) === 0,\r\n        selector_offset = selector & ~7,\r\n        info,\r\n        table_offset,\r\n        table_limit;\r\n\r\n    info = {\r\n        rpl: selector & 3,\r\n        from_gdt: is_gdt,\r\n        is_null: false,\r\n        is_valid: true,\r\n\r\n        base: 0,\r\n        access: 0,\r\n        flags: 0,\r\n        type: 0,\r\n        dpl: 0,\r\n        is_system: false,\r\n        is_present: false,\r\n        is_executable: false,\r\n        rw_bit: false,\r\n        dc_bit: false,\r\n        size: false,\r\n\r\n        is_conforming_executable: false,\r\n\r\n        // limit after applying granularity\r\n        effective_limit: 0,\r\n\r\n        is_writable: false,\r\n        is_readable: false,\r\n        table_offset: 0,\r\n\r\n        raw0: 0,\r\n        raw1: 0,\r\n    };\r\n\r\n    if(is_gdt)\r\n    {\r\n        table_offset = this.gdtr_offset;\r\n        table_limit = this.gdtr_size;\r\n    }\r\n    else\r\n    {\r\n        table_offset = this.segment_offsets[reg_ldtr];\r\n        table_limit = this.segment_limits[reg_ldtr];\r\n    }\r\n\r\n    if(is_gdt && selector_offset === 0)\r\n    {\r\n        info.is_null = true;\r\n        return info;\r\n    }\r\n\r\n    // limit is the number of entries in the table minus one\r\n    if((selector | 7) > table_limit)\r\n    {\r\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\r\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\r\n        info.is_valid = false;\r\n        return info;\r\n    }\r\n\r\n    table_offset = table_offset + selector_offset | 0;\r\n\r\n    if(this.paging)\r\n    {\r\n        table_offset = this.translate_address_system_read(table_offset);\r\n    }\r\n    info.table_offset = table_offset;\r\n\r\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\r\n                this.read8(table_offset + 7 | 0) << 24;\r\n    info.access = this.read8(table_offset + 5 | 0);\r\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\r\n\r\n    info.raw0 = this.read32s(table_offset     | 0);\r\n    info.raw1 = this.read32s(table_offset + 4 | 0);\r\n\r\n    //this.write8(table_offset + 5 | 0, info.access | 1);\r\n\r\n    // used if system\r\n    info.type = info.access & 0xF;\r\n\r\n    info.dpl = info.access >> 5 & 3;\r\n\r\n    info.is_system = (info.access & 0x10) === 0;\r\n    info.is_present = (info.access & 0x80) === 0x80;\r\n    info.is_executable = (info.access & 8) === 8;\r\n\r\n    info.rw_bit = (info.access & 2) === 2;\r\n    info.dc_bit = (info.access & 4) === 4;\r\n\r\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\r\n\r\n    info.size = (info.flags & 4) === 4;\r\n\r\n    var limit = this.read16(table_offset) |\r\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\r\n\r\n    if(info.flags & 8)\r\n    {\r\n        // granularity set\r\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\r\n    }\r\n    else\r\n    {\r\n        info.effective_limit = limit;\r\n    }\r\n\r\n    info.is_writable = info.rw_bit && !info.is_executable;\r\n    info.is_readable = info.rw_bit || !info.is_executable;\r\n\r\n    return info;\r\n};\r\n\r\n/**\r\n * @param {number} reg\r\n * @param {number} selector\r\n */\r\nCPU.prototype.switch_seg = function(reg, selector)\r\n{\r\n    dbg_assert(reg >= 0 && reg <= 5);\r\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\r\n\r\n    if(!this.protected_mode || this.vm86_mode())\r\n    {\r\n        this.sreg[reg] = selector;\r\n        this.segment_is_null[reg] = 0;\r\n        this.segment_offsets[reg] = selector << 4;\r\n\r\n        if(reg === reg_ss)\r\n        {\r\n            this.stack_size_32 = false;\r\n        }\r\n        return;\r\n    }\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(reg === reg_ss)\r\n    {\r\n        if(info.is_null)\r\n        {\r\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        if(!info.is_valid ||\r\n           info.is_system ||\r\n           info.rpl !== this.cpl ||\r\n           !info.is_writable ||\r\n           info.dpl !== this.cpl)\r\n        {\r\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(selector & ~3);\r\n        }\r\n\r\n        if(!info.is_present)\r\n        {\r\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_ss(selector & ~3);\r\n        }\r\n\r\n        this.stack_size_32 = info.size;\r\n    }\r\n    else if(reg === reg_cs)\r\n    {\r\n        // handled by switch_cs_real_mode, far_return or far_jump\r\n        dbg_assert(false);\r\n    }\r\n    else\r\n    {\r\n        // es, ds, fs, gs\r\n        if(info.is_null)\r\n        {\r\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\r\n            //dbg_trace(LOG_CPU);\r\n            this.sreg[reg] = selector;\r\n            this.segment_is_null[reg] = 1;\r\n            return;\r\n        }\r\n\r\n        if(!info.is_valid ||\r\n           info.is_system ||\r\n           !info.is_readable ||\r\n           (!info.is_conforming_executable &&\r\n            (info.rpl > info.dpl || this.cpl > info.dpl))\r\n        ) {\r\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\r\n            this.debug.dump_state();\r\n            this.debug.dump_regs();\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(selector & ~3);\r\n        }\r\n\r\n        if(!info.is_present)\r\n        {\r\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_np(selector & ~3);\r\n        }\r\n    }\r\n\r\n    this.segment_is_null[reg] = 0;\r\n    this.segment_limits[reg] = info.effective_limit;\r\n    //this.segment_infos[reg] = 0; // TODO\r\n\r\n    this.segment_offsets[reg] = info.base;\r\n    this.sreg[reg] = selector;\r\n};\r\n\r\nCPU.prototype.load_tr = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    dbg_assert(info.is_valid);\r\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\r\n\r\n    if(!info.from_gdt)\r\n    {\r\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\r\n    }\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!info.is_system)\r\n    {\r\n        dbg_log(\"#GP | ltr: not a system entry\");\r\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\r\n    }\r\n\r\n    if(info.type !== 9 && info.type !== 1)\r\n    {\r\n        // 0xB: busy 386 TSS (GP)\r\n        // 0x9: 386 TSS\r\n        // 0x3: busy 286 TSS (GP)\r\n        // 0x1: 286 TSS (??)\r\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"#NT | present bit not set (ltr)\");\r\n        throw this.debug.unimpl(\"#NT handler\");\r\n    }\r\n\r\n    this.tss_size_32 = info.type === 9;\r\n    this.segment_offsets[reg_tr] = info.base;\r\n    this.segment_limits[reg_tr] = info.effective_limit;\r\n    this.sreg[reg_tr] = selector;\r\n\r\n    // Mark task as busy\r\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\r\n\r\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\r\n};\r\n\r\nCPU.prototype.load_ldt = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(info.is_null)\r\n    {\r\n        // invalid\r\n        this.segment_offsets[reg_ldtr] = 0;\r\n        this.segment_limits[reg_ldtr] = 0;\r\n        return;\r\n    }\r\n\r\n    dbg_assert(info.is_valid);\r\n\r\n    if(!info.from_gdt)\r\n    {\r\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"lldt: present bit not set\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!info.is_system)\r\n    {\r\n        dbg_log(\"lldt: not a system entry\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(info.type !== 2)\r\n    {\r\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    this.segment_offsets[reg_ldtr] = info.base;\r\n    this.segment_limits[reg_ldtr] = info.effective_limit;\r\n    this.sreg[reg_ldtr] = selector;\r\n\r\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\r\n};\r\n\r\nCPU.prototype.arpl = function(seg, r16)\r\n{\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    if((seg & 3) < (this.reg16[r16] & 3))\r\n    {\r\n        this.flags |= flag_zero;\r\n        return seg & ~3 | this.reg16[r16] & 3;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n        return seg;\r\n    }\r\n};\r\n\r\nCPU.prototype.lar = function(selector, original)\r\n{\r\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\r\n\r\n    /** @const */\r\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\r\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\r\n\r\n    if(info.is_null || !info.is_valid ||\r\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\r\n                         !info.is_conforming_executable && dpl_bad)\r\n    ) {\r\n        this.flags &= ~flag_zero;\r\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\r\n        return original;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= flag_zero;\r\n        return info.raw1 & 0x00FFFF00;\r\n    }\r\n};\r\n\r\nCPU.prototype.lsl = function(selector, original)\r\n{\r\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\r\n\r\n    /** @const */\r\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\r\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\r\n\r\n    if(info.is_null || !info.is_valid ||\r\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\r\n                         !info.is_conforming_executable && dpl_bad)\r\n    ) {\r\n        this.flags &= ~flag_zero;\r\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\r\n        return original;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= flag_zero;\r\n        return info.effective_limit | 0;\r\n    }\r\n\r\n};\r\n\r\nCPU.prototype.verr = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\r\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\r\n    {\r\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\r\n        this.flags &= ~flag_zero;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\r\n        this.flags |= flag_zero;\r\n    }\r\n};\r\n\r\nCPU.prototype.verw = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\r\n       info.dpl < this.cpl || info.dpl < info.rpl)\r\n    {\r\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\r\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\r\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\r\n        this.flags &= ~flag_zero;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"verw valid\", LOG_CPU);\r\n        this.flags |= flag_zero;\r\n    }\r\n};\r\n\r\nCPU.prototype.clear_tlb = function()\r\n{\r\n    // clear tlb excluding global pages\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n\r\n    this.tlb_info.set(this.tlb_info_global);\r\n\r\n    //dbg_log(\"page table loaded\", LOG_CPU);\r\n};\r\n\r\nCPU.prototype.full_clear_tlb = function()\r\n{\r\n    //dbg_log(\"TLB full clear\", LOG_CPU);\r\n\r\n    // clear tlb including global pages\r\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\r\n    for(var i = 0; i < (1 << 18); )\r\n    {\r\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\r\n    }\r\n\r\n    this.clear_tlb();\r\n};\r\n\r\nCPU.prototype.invlpg = function(addr)\r\n{\r\n    var page = addr >>> 12;\r\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\r\n\r\n    this.tlb_info[page] = 0;\r\n    this.tlb_info_global[page] = 0;\r\n\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n};\r\n\r\nCPU.prototype.translate_address_read = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    if(this.cpl === 3)\r\n    {\r\n        return this.translate_address_user_read(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.translate_address_system_read(addr);\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_write = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    if(this.cpl === 3)\r\n    {\r\n        return this.translate_address_user_write(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.translate_address_system_write(addr);\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_user_write = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_USER_WRITE)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_user_read = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_USER_READ)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_system_write = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_system_read = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\r\n{\r\n    var page = addr >>> 12,\r\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\r\n        page_dir_entry = this.mem32s[page_dir_addr],\r\n        high,\r\n        can_write = true,\r\n        global,\r\n        cachable = true,\r\n        allow_user = true;\r\n\r\n    dbg_assert(addr < 0x80000000);\r\n\r\n    if(!(page_dir_entry & 1))\r\n    {\r\n        // to do at this place:\r\n        //\r\n        // - set cr2 = addr (which caused the page fault)\r\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\r\n        // - prevent execution of the function that triggered this call\r\n        //dbg_log(\"#PF not present\", LOG_CPU);\r\n\r\n        this.cr[2] = addr;\r\n        this.trigger_pagefault(for_writing, user, 0);\r\n\r\n        // never reached as this.trigger_pagefault throws up\r\n        dbg_assert(false);\r\n    }\r\n\r\n    if((page_dir_entry & 2) === 0)\r\n    {\r\n        can_write = false;\r\n\r\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\r\n        {\r\n            this.cr[2] = addr;\r\n            this.trigger_pagefault(for_writing, user, 1);\r\n            dbg_assert(false);\r\n        }\r\n    }\r\n\r\n    if((page_dir_entry & 4) === 0)\r\n    {\r\n        allow_user = false;\r\n\r\n        if(user)\r\n        {\r\n            // \"Page Fault: page table accessed by non-supervisor\";\r\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\r\n            this.cr[2] = addr;\r\n            this.trigger_pagefault(for_writing, user, 1);\r\n            dbg_assert(false);\r\n        }\r\n    }\r\n\r\n    if(page_dir_entry & this.page_size_extensions)\r\n    {\r\n        // size bit is set\r\n\r\n        // set the accessed and dirty bits\r\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\r\n\r\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\r\n        global = page_dir_entry & 0x100;\r\n    }\r\n    else\r\n    {\r\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\r\n            page_table_entry = this.mem32s[page_table_addr];\r\n\r\n        if((page_table_entry & 1) === 0)\r\n        {\r\n            //dbg_log(\"#PF not present table\", LOG_CPU);\r\n            this.cr[2] = addr;\r\n            this.trigger_pagefault(for_writing, user, 0);\r\n            dbg_assert(false);\r\n        }\r\n\r\n        if((page_table_entry & 2) === 0)\r\n        {\r\n            can_write = false;\r\n\r\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\r\n            {\r\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\r\n                this.cr[2] = addr;\r\n                this.trigger_pagefault(for_writing, user, 1);\r\n                dbg_assert(false);\r\n            }\r\n        }\r\n\r\n        if((page_table_entry & 4) === 0)\r\n        {\r\n            allow_user = false;\r\n\r\n            if(user)\r\n            {\r\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\r\n                this.cr[2] = addr;\r\n                this.trigger_pagefault(for_writing, user, 1);\r\n                dbg_assert(false);\r\n            }\r\n        }\r\n\r\n        // set the accessed and dirty bits\r\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\r\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\r\n\r\n        high = page_table_entry & 0xFFFFF000;\r\n        global = page_table_entry & 0x100;\r\n    }\r\n\r\n    this.tlb_data[page] = high ^ page << 12;\r\n\r\n    var allowed_flag;\r\n\r\n    if(allow_user)\r\n    {\r\n        if(can_write)\r\n        {\r\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\r\n        }\r\n        else\r\n        {\r\n            // TODO: Consider if cr0.wp is not set\r\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(can_write)\r\n        {\r\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\r\n        }\r\n        else\r\n        {\r\n            allowed_flag = TLB_SYSTEM_READ;\r\n        }\r\n    }\r\n\r\n    this.tlb_info[page] = allowed_flag;\r\n\r\n    if(global && (this.cr[4] & CR4_PGE))\r\n    {\r\n        this.tlb_info_global[page] = allowed_flag;\r\n    }\r\n\r\n    return high;\r\n};\r\n\r\nCPU.prototype.writable_or_pagefault = function(addr, size)\r\n{\r\n    dbg_assert(size < 0x1000, \"not supported yet\");\r\n    dbg_assert(size > 0);\r\n\r\n    if(!this.paging)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var user = this.cpl === 3 ? 1 : 0,\r\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\r\n        page = addr >>> 12;\r\n\r\n    if((this.tlb_info[page] & mask) === 0)\r\n    {\r\n        this.do_page_translation(addr, 1, user);\r\n    }\r\n\r\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\r\n    {\r\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\r\n        {\r\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\r\n        }\r\n    }\r\n};\r\n\r\nCPU.prototype.trigger_pagefault = function(write, user, present)\r\n{\r\n    if(LOG_PAGE_FAULTS)\r\n    {\r\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\r\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\r\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\r\n        dbg_trace(LOG_CPU);\r\n    }\r\n\r\n    if(this.page_fault)\r\n    {\r\n        dbg_trace(LOG_CPU);\r\n        throw this.debug.unimpl(\"Double fault\");\r\n    }\r\n\r\n    // invalidate tlb entry\r\n    var page = this.cr[2] >>> 12;\r\n    this.tlb_info[page] = 0;\r\n    this.tlb_info_global[page] = 0;\r\n\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.page_fault = true;\r\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\r\n\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.is_osize_32 = function()\r\n{\r\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\r\n};\r\n\r\nCPU.prototype.is_asize_32 = function()\r\n{\r\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\r\n};\r\n\r\nCPU.prototype.get_reg_asize = function(reg)\r\n{\r\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\r\n    var r = this.reg32s[reg];\r\n\r\n    if(this.is_asize_32())\r\n    {\r\n        return r;\r\n    }\r\n    else\r\n    {\r\n        return r & 0xFFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_ecx_asize = function(value)\r\n{\r\n    if(this.is_asize_32())\r\n    {\r\n        this.reg32s[reg_ecx] = value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_cx] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.add_reg_asize = function(reg, value)\r\n{\r\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\r\n    if(this.is_asize_32())\r\n    {\r\n        this.reg32s[reg] += value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg << 1] += value;\r\n    }\r\n};\r\n\r\nCPU.prototype.decr_ecx_asize = function()\r\n{\r\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\r\n};\r\n\r\nCPU.prototype.invalid_arithmatic = function()\r\n{\r\n    this.mxcsr |= CPU_EX_I;\r\n};\r\n\r\nCPU.prototype.is_SNaN32 = function(value)\r\n{\r\n    let exponent = (value >>> 23) & 0xFF;\r\n    let most_significand = (value >>> 22) & 1;\r\n    let less_significand = (value >>> 0) & 0x3FFFFF;\r\n\r\n    return exponent === 0xFF && most_significand === 0 && less_significand > 0;\r\n};\r\n\r\n// Closure Compiler's way of exporting\r\nif(typeof window !== \"undefined\")\r\n{\r\n    window[\"CPU\"] = CPU;\r\n}\r\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\r\n{\r\n    module.exports[\"CPU\"] = CPU;\r\n}\r\nelse if(typeof importScripts === \"function\")\r\n{\r\n    self[\"CPU\"] = CPU;\r\n}\r\n","\"use strict\";\r\n/*\r\n * Compile time configuration, some only relevant for debug mode\r\n */\r\n\r\n/**\r\n * @define {boolean}\r\n * Overridden for production by closure compiler\r\n */\r\nvar DEBUG = true;\r\n\r\n/** @const */\r\nvar LOG_TO_FILE = false;\r\n\r\n/**\r\n * @const\r\n * Enables logging all IO port reads and writes. Very verbose\r\n */\r\nvar LOG_ALL_IO = false;\r\n\r\n/**\r\n * @const\r\n * Enables logging of page faults, quite verbose\r\n */\r\nvar LOG_PAGE_FAULTS = false;\r\n\r\n\r\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\r\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\r\n\r\n/**\r\n * @const\r\n * Draws entire buffer and visualizes the layers that would be drawn\r\n */\r\nvar DEBUG_SCREEN_LAYERS = DEBUG && false;\r\n\r\n\r\n/** @const */\r\nvar ENABLE_HPET = DEBUG && false;\r\n\r\n/**\r\n * @define {boolean}\r\n * Overridden by closure compiler\r\n */\r\nvar ENABLE_ACPI = false;\r\n\r\n\r\n/**\r\n * @const\r\n * How many cycles the CPU does at a time before running hardware timers\r\n */\r\nvar LOOP_COUNTER = 11001;\r\n\r\n/**\r\n * @const\r\n * How often, in milliseconds, to yield to the browser for rendering and\r\n * running events\r\n */\r\nvar TIME_PER_FRAME = 1;\r\n\r\n/**\r\n * @const\r\n * How many ticks the TSC does per millisecond\r\n */\r\nvar TSC_RATE = 8 * 1024;\r\n\r\n\r\n/** @const */\r\nvar APIC_TIMER_FREQ = TSC_RATE;\r\n\r\n\r\n/** @const */\r\nvar VMWARE_HYPERVISOR_PORT = true;\r\n","\"use strict\";\r\n\r\nvar v86util = v86util || {};\r\n\r\n// pad string with spaces on the right\r\nv86util.pads = function(str, len)\r\n{\r\n    str = str ? str + \"\" : \"\";\r\n\r\n    while(str.length < len)\r\n    {\r\n        str = str + \" \";\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\n// pad string with zeros on the left\r\nv86util.pad0 = function(str, len)\r\n{\r\n    str = str ? str + \"\" : \"\";\r\n\r\n    while(str.length < len)\r\n    {\r\n        str = \"0\" + str;\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\n/**\r\n * number to hex\r\n * @param {number} n\r\n * @param {number=} len\r\n * @return {string}\r\n */\r\nfunction h(n, len)\r\n{\r\n    if(!n)\r\n    {\r\n        var str = \"\";\r\n    }\r\n    else\r\n    {\r\n        var str = n.toString(16);\r\n    }\r\n\r\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\r\n}\r\n\r\n\r\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\r\n{\r\n    let rand_data = new Int32Array(1);\r\n\r\n    v86util.has_rand_int = function()\r\n    {\r\n        return true;\r\n    };\r\n\r\n    v86util.get_rand_int = function()\r\n    {\r\n        window.crypto.getRandomValues(rand_data);\r\n        return rand_data[0];\r\n    };\r\n}\r\nelse\r\n{\r\n    v86util.has_rand_int = function()\r\n    {\r\n        return false;\r\n    };\r\n\r\n    v86util.get_rand_int = function()\r\n    {\r\n        console.assert(false);\r\n    };\r\n}\r\n\r\n\r\n/**\r\n * Synchronous access to ArrayBuffer\r\n * @constructor\r\n */\r\nfunction SyncBuffer(buffer)\r\n{\r\n    this.buffer = buffer;\r\n    this.byteLength = buffer.byteLength;\r\n    this.onload = undefined;\r\n    this.onprogress = undefined;\r\n}\r\n\r\nSyncBuffer.prototype.load = function()\r\n{\r\n    this.onload && this.onload({ buffer: this.buffer });\r\n};\r\n\r\n/**\r\n * @param {number} start\r\n * @param {number} len\r\n * @param {function(!Uint8Array)} fn\r\n */\r\nSyncBuffer.prototype.get = function(start, len, fn)\r\n{\r\n    dbg_assert(start + len <= this.byteLength);\r\n    fn(new Uint8Array(this.buffer, start, len));\r\n};\r\n\r\n/**\r\n * @param {number} start\r\n * @param {!Uint8Array} slice\r\n * @param {function()} fn\r\n */\r\nSyncBuffer.prototype.set = function(start, slice, fn)\r\n{\r\n    dbg_assert(start + slice.byteLength <= this.byteLength);\r\n\r\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\r\n    fn();\r\n};\r\n\r\n/**\r\n * @param {function(!ArrayBuffer)} fn\r\n */\r\nSyncBuffer.prototype.get_buffer = function(fn)\r\n{\r\n    fn(this.buffer);\r\n};\r\n\r\n\r\n\r\n(function()\r\n{\r\n    if(typeof Math.clz32 === \"function\" && Math.clz32(0) === 32 &&\r\n       Math.clz32(0x12345) === 15 && Math.clz32(-1) === 0)\r\n    {\r\n        /**\r\n         * calculate the integer logarithm base 2 of a byte\r\n         * @param {number} x\r\n         * @return {number}\r\n         */\r\n        v86util.int_log2_byte = function(x)\r\n        {\r\n            dbg_assert(x > 0);\r\n            dbg_assert(x < 0x100);\r\n\r\n            return 31 - Math.clz32(x);\r\n        };\r\n\r\n        /**\r\n         * calculate the integer logarithm base 2\r\n         * @param {number} x\r\n         * @return {number}\r\n         */\r\n        v86util.int_log2 = function(x)\r\n        {\r\n            dbg_assert(x > 0);\r\n\r\n            return 31 - Math.clz32(x);\r\n        };\r\n\r\n        return;\r\n    }\r\n\r\n    var int_log2_table = new Int8Array(256);\r\n\r\n    for(var i = 0, b = -2; i < 256; i++)\r\n    {\r\n        if(!(i & i - 1))\r\n            b++;\r\n\r\n        int_log2_table[i] = b;\r\n    }\r\n\r\n    /**\r\n     * calculate the integer logarithm base 2 of a byte\r\n     * @param {number} x\r\n     * @return {number}\r\n     */\r\n    v86util.int_log2_byte = function(x)\r\n    {\r\n        dbg_assert(x > 0);\r\n        dbg_assert(x < 0x100);\r\n\r\n        return int_log2_table[x];\r\n    };\r\n\r\n    /**\r\n     * calculate the integer logarithm base 2\r\n     * @param {number} x\r\n     * @return {number}\r\n     */\r\n    v86util.int_log2 = function(x)\r\n    {\r\n        dbg_assert(x > 0);\r\n\r\n        // http://jsperf.com/integer-log2/6\r\n        var tt = x >>> 16;\r\n\r\n        if(tt)\r\n        {\r\n            var t = tt >>> 8;\r\n            if(t)\r\n            {\r\n                return 24 + int_log2_table[t];\r\n            }\r\n            else\r\n            {\r\n                return 16 + int_log2_table[tt];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var t = x >>> 8;\r\n            if(t)\r\n            {\r\n                return 8 + int_log2_table[t];\r\n            }\r\n            else\r\n            {\r\n                return int_log2_table[x];\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\n\r\nv86util.mul_low = v86util.imul_low =\r\n    typeof Math.imul === \"function\" &&\r\n    Math.imul(0x01234567, 0x89abcdef) === -0x36b1b9d7 ? Math.imul : function(a, b) {\r\n        b |= 0;\r\n        return (a & 0x003fffff) * b + ((a & 0xffc00000) * b | 0) | 0;\r\n    };\r\n\r\n\r\nv86util.imul_high = function(a, b) {\r\n    return Math.floor(a * b / 0x100000000) | 0;\r\n};\r\n\r\nv86util.mul_high = function(a, b) {\r\n    return Math.floor((a >>> 0) * (b >>> 0) / 0x100000000) | 0;\r\n};\r\n\r\n/**\r\n * @constructor\r\n *\r\n * Queue wrapper around Uint8Array\r\n * Used by devices such as the PS2 controller\r\n */\r\nfunction ByteQueue(size)\r\n{\r\n    var data = new Uint8Array(size),\r\n        start,\r\n        end;\r\n\r\n    dbg_assert((size & size - 1) === 0);\r\n\r\n    this.length = 0;\r\n\r\n    this.push = function(item)\r\n    {\r\n        if(this.length === size)\r\n        {\r\n            // intentional overwrite\r\n        }\r\n        else\r\n        {\r\n            this.length++;\r\n        }\r\n\r\n        data[end] = item;\r\n        end = end + 1 & size - 1;\r\n    };\r\n\r\n    this.shift = function()\r\n    {\r\n        if(!this.length)\r\n        {\r\n            return -1;\r\n        }\r\n        else\r\n        {\r\n            var item = data[start];\r\n\r\n            start = start + 1 & size - 1;\r\n            this.length--;\r\n\r\n            return item;\r\n        }\r\n    };\r\n\r\n    this.peek = function()\r\n    {\r\n        if(!this.length)\r\n        {\r\n            return -1;\r\n        }\r\n        else\r\n        {\r\n            return data[start];\r\n        }\r\n    };\r\n\r\n    this.clear = function()\r\n    {\r\n        start = 0;\r\n        end = 0;\r\n        this.length = 0;\r\n    };\r\n\r\n    this.clear();\r\n}\r\n\r\n\r\n/**\r\n * @constructor\r\n *\r\n * Queue wrapper around Float32Array\r\n * Used by devices such as the sound blaster sound card\r\n */\r\nfunction FloatQueue(size)\r\n{\r\n    this.size = size;\r\n    this.data = new Float32Array(size);\r\n    this.start = 0;\r\n    this.end = 0;\r\n    this.length = 0;\r\n\r\n    dbg_assert((size & size - 1) === 0);\r\n}\r\n\r\nFloatQueue.prototype.push = function(item)\r\n{\r\n    if(this.length === this.size)\r\n    {\r\n        // intentional overwrite\r\n        this.start = this.start + 1 & this.size - 1;\r\n    }\r\n    else\r\n    {\r\n        this.length++;\r\n    }\r\n\r\n    this.data[this.end] = item;\r\n    this.end = this.end + 1 & this.size - 1;\r\n};\r\n\r\nFloatQueue.prototype.shift = function()\r\n{\r\n    if(!this.length)\r\n    {\r\n        return undefined;\r\n    }\r\n    else\r\n    {\r\n        var item = this.data[this.start];\r\n\r\n        this.start = this.start + 1 & this.size - 1;\r\n        this.length--;\r\n\r\n        return item;\r\n    }\r\n};\r\n\r\nFloatQueue.prototype.shift_block = function(count)\r\n{\r\n    var slice = new Float32Array(count);\r\n\r\n    if(count > this.length)\r\n    {\r\n        count = this.length;\r\n    }\r\n    var slice_end = this.start + count;\r\n\r\n    var partial = this.data.subarray(this.start, slice_end);\r\n\r\n    slice.set(partial);\r\n    if(slice_end >= this.size)\r\n    {\r\n        slice_end -= this.size;\r\n        slice.set(this.data.subarray(0, slice_end), partial.length);\r\n    }\r\n    this.start = slice_end;\r\n\r\n    this.length -= count;\r\n\r\n    return slice;\r\n};\r\n\r\nFloatQueue.prototype.peek = function()\r\n{\r\n    if(!this.length)\r\n    {\r\n        return undefined;\r\n    }\r\n    else\r\n    {\r\n        return this.data[this.start];\r\n    }\r\n};\r\n\r\nFloatQueue.prototype.clear = function()\r\n{\r\n    this.start = 0;\r\n    this.end = 0;\r\n    this.length = 0;\r\n};\r\n\r\n\r\n/**\r\n * Simple circular queue for logs\r\n *\r\n * @param {number} size\r\n * @constructor\r\n */\r\nfunction CircularQueue(size)\r\n{\r\n    this.data = [];\r\n    this.index = 0;\r\n    this.size = size;\r\n}\r\n\r\nCircularQueue.prototype.add = function(item)\r\n{\r\n    this.data[this.index] = item;\r\n    this.index = (this.index + 1) % this.size;\r\n};\r\n\r\nCircularQueue.prototype.toArray = function()\r\n{\r\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\r\n};\r\n\r\nCircularQueue.prototype.clear = function()\r\n{\r\n    this.data = [];\r\n    this.index = 0;\r\n};\r\n\r\n/**\r\n * @param {Array} new_data\r\n */\r\nCircularQueue.prototype.set = function(new_data)\r\n{\r\n    this.data = new_data;\r\n    this.index = 0;\r\n};\r\n\r\nfunction dump_file(ab, name)\r\n{\r\n    if(!(ab instanceof Array))\r\n    {\r\n        ab = [ab];\r\n    }\r\n\r\n    var blob = new Blob(ab);\r\n    download(blob, name);\r\n}\r\n\r\nfunction download(file_or_blob, name)\r\n{\r\n    var a = document.createElement(\"a\");\r\n    a[\"download\"] = name;\r\n    a.href = window.URL.createObjectURL(file_or_blob);\r\n    a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\r\n\r\n    if(document.createEvent)\r\n    {\r\n        var ev = document.createEvent(\"MouseEvent\");\r\n        ev.initMouseEvent(\"click\", true, true, window,\r\n                          0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n        a.dispatchEvent(ev);\r\n    }\r\n    else\r\n    {\r\n        a.click();\r\n    }\r\n\r\n    window.URL.revokeObjectURL(a.href);\r\n}\r\n","\"use strict\";\r\n\r\n// Useful documentation, articles, and source codes for reference:\r\n// ===============================================================\r\n//\r\n// Official Hardware Programming Guide\r\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\r\n//\r\n// Official Yamaha YMF262 Manual\r\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\r\n//\r\n// OPL3 Programming Guide\r\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\r\n//\r\n// DOSBox\r\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\r\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\r\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\r\n//\r\n// QEMU\r\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\r\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\r\n//\r\n// VirtualBox\r\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\r\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\r\n\r\nvar\r\n\r\n    // Used for drivers to identify device (DSP command 0xE3).\r\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\r\n\r\n    // Value of the current DSP command that indicates that the\r\n    // next command/data write in port 2xC should be interpreted\r\n    // as a command number.\r\n/** @const */ DSP_NO_COMMAND = 0,\r\n\r\n    // Size (bytes) of the DSP write/read buffers\r\n/** @const */ DSP_BUFSIZE = 64,\r\n\r\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\r\n/** @const */ DSP_DACSIZE = 65536,\r\n\r\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\r\n    // stored before being processed.\r\n/** @const */ SB_DMA_BUFSIZE = 65536,\r\n\r\n    // Number of samples to attempt to retrieve per transfer.\r\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\r\n\r\n    // Usable DMA channels.\r\n/** @const */ SB_DMA0 = 0,\r\n/** @const */ SB_DMA1 = 1,\r\n/** @const */ SB_DMA3 = 3,\r\n/** @const */ SB_DMA5 = 5,\r\n/** @const */ SB_DMA6 = 6,\r\n/** @const */ SB_DMA7 = 7,\r\n\r\n    // Default DMA channels.\r\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\r\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\r\n\r\n    // Usable IRQ channels.\r\n/** @const */ SB_IRQ2 = 2,\r\n/** @const */ SB_IRQ5 = 5,\r\n/** @const */ SB_IRQ7 = 7,\r\n/** @const */ SB_IRQ10 = 10,\r\n\r\n    // Default IRQ channel.\r\n/** @const */ SB_IRQ = SB_IRQ5,\r\n\r\n    // Indices to the irq_triggered register.\r\n/** @const */ SB_IRQ_8BIT = 0x1,\r\n/** @const */ SB_IRQ_16BIT = 0x2,\r\n/** @const */ SB_IRQ_MIDI = 0x1,\r\n/** @const */ SB_IRQ_MPU = 0x4;\r\n\r\n\r\n// Probably less efficient, but it's more maintainable, instead\r\n// of having a single large unorganised and decoupled table.\r\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\r\nvar DSP_COMMAND_HANDLERS = [];\r\nvar MIXER_READ_HANDLERS = [];\r\nvar MIXER_WRITE_HANDLERS = [];\r\nvar MIXER_REGISTER_IS_LEGACY = new Uint8Array(256);\r\nvar FM_HANDLERS = [];\r\n\r\n\r\n/**\r\n * Sound Blaster 16 Emulator, or so it seems.\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n */\r\nfunction SB16(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    // I/O Buffers.\r\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\r\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\r\n    this.read_buffer_lastvalue = 0;\r\n\r\n    // Current DSP command info.\r\n    this.command = DSP_NO_COMMAND;\r\n    this.command_size = 0;\r\n\r\n    // Mixer.\r\n    this.mixer_current_address = 0;\r\n    this.mixer_registers = new Uint8Array(256);\r\n    this.mixer_reset();\r\n\r\n    // Dummy status and test registers.\r\n    this.dummy_speaker_enabled = false;\r\n    this.test_register = 0;\r\n\r\n    // DSP state.\r\n    this.dsp_highspeed = false;\r\n    this.dsp_stereo = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_signed = false;\r\n\r\n    // DAC buffer.\r\n    // The final destination for audio data before being sent off\r\n    // to Web Audio APIs.\r\n    // Format:\r\n    // Floating precision linear PCM, nominal between -1 and 1.\r\n    this.dac_buffers = [\r\n      new FloatQueue(DSP_DACSIZE),\r\n      new FloatQueue(DSP_DACSIZE),\r\n    ];\r\n\r\n    // Direct Memory Access transfer info.\r\n    this.dma = cpu.devices.dma;\r\n    this.dma_sample_count = 0;\r\n    this.dma_bytes_count = 0;\r\n    this.dma_bytes_left = 0;\r\n    this.dma_bytes_block = 0;\r\n    this.dma_irq = 0;\r\n    this.dma_channel = 0;\r\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\r\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\r\n    this.dma_autoinit = false;\r\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\r\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\r\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\r\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\r\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\r\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\r\n    this.dma_waiting_transfer = false;\r\n    this.dma_paused = false;\r\n    this.sampling_rate = 22050;\r\n    bus.send(\"dac-tell-sampling-rate\", this.sampling_rate);\r\n    this.bytes_per_sample = 1;\r\n\r\n    // DMA identification data.\r\n    this.e2_value = 0xAA;\r\n    this.e2_count = 0;\r\n\r\n    // ASP data: not understood by me.\r\n    this.asp_registers = new Uint8Array(256);\r\n\r\n    // MPU.\r\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\r\n    this.mpu_read_buffer_lastvalue = 0;\r\n\r\n    // FM Synthesizer.\r\n    this.fm_current_address0 = 0;\r\n    this.fm_current_address1 = 0;\r\n    this.fm_waveform_select_enable = false;\r\n\r\n    // Interrupts.\r\n    this.irq = SB_IRQ;\r\n    this.irq_triggered = new Uint8Array(0x10);\r\n\r\n    // IO Ports.\r\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\r\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\r\n\r\n    cpu.io.register_read_consecutive(0x220, this,\r\n        this.port2x0_read, this.port2x1_read, this.port2x2_read, this.port2x3_read);\r\n    cpu.io.register_read_consecutive(0x388, this,\r\n        this.port2x0_read, this.port2x1_read);\r\n\r\n    cpu.io.register_read_consecutive(0x224, this,\r\n        this.port2x4_read, this.port2x5_read);\r\n\r\n    cpu.io.register_read(0x226, this, this.port2x6_read);\r\n    cpu.io.register_read(0x227, this, this.port2x7_read);\r\n    cpu.io.register_read(0x228, this, this.port2x8_read);\r\n    cpu.io.register_read(0x229, this, this.port2x9_read);\r\n\r\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\r\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\r\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\r\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\r\n\r\n    cpu.io.register_read_consecutive(0x22E, this,\r\n        this.port2xE_read, this.port2xF_read);\r\n\r\n    cpu.io.register_write_consecutive(0x220, this,\r\n        this.port2x0_write, this.port2x1_write, this.port2x2_write, this.port2x3_write);\r\n    cpu.io.register_write_consecutive(0x388, this,\r\n        this.port2x0_write, this.port2x1_write);\r\n\r\n    cpu.io.register_write_consecutive(0x224, this,\r\n        this.port2x4_write, this.port2x5_write);\r\n\r\n    cpu.io.register_write(0x226, this, this.port2x6_write);\r\n    cpu.io.register_write(0x227, this, this.port2x7_write);\r\n\r\n    cpu.io.register_write_consecutive(0x228, this,\r\n        this.port2x8_write, this.port2x9_write);\r\n\r\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\r\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\r\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\r\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\r\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\r\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\r\n\r\n    cpu.io.register_read_consecutive(0x330, this, this.port3x0_read, this.port3x1_read);\r\n    cpu.io.register_write_consecutive(0x330, this, this.port3x0_write, this.port3x1_write);\r\n\r\n    this.dma.on_unmask(this.dma_on_unmask, this);\r\n\r\n    bus.register(\"dac-request-data\", function()\r\n    {\r\n        this.dac_handle_request();\r\n    }, this);\r\n    bus.register(\"speaker-has-initialized\", function()\r\n    {\r\n        this.mixer_reset();\r\n    }, this);\r\n    bus.send(\"speaker-confirm-initialized\");\r\n\r\n    this.dsp_reset();\r\n}\r\n\r\n//\r\n// General\r\n//\r\n\r\nSB16.prototype.dsp_reset = function()\r\n{\r\n    this.write_buffer.clear();\r\n    this.read_buffer.clear();\r\n\r\n    this.command = DSP_NO_COMMAND;\r\n    this.command_size = 0;\r\n\r\n    this.dummy_speaker_enabled = false;\r\n    this.test_register = 0;\r\n\r\n    this.dsp_highspeed = false;\r\n    this.dsp_stereo = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_signed = false;\r\n\r\n    this.dac_buffers[0].clear();\r\n    this.dac_buffers[1].clear();\r\n\r\n    this.dma_sample_count = 0;\r\n    this.dma_bytes_count = 0;\r\n    this.dma_bytes_left = 0;\r\n    this.dma_bytes_block = 0;\r\n    this.dma_irq = 0;\r\n    this.dma_channel = 0;\r\n    this.dma_autoinit = false;\r\n    this.dma_buffer_uint8.fill(0);\r\n    this.dma_waiting_transfer = false;\r\n    this.dma_paused = false;\r\n\r\n    this.e2_value = 0xAA;\r\n    this.e2_count = 0;\r\n\r\n    this.sampling_rate = 22050;\r\n    this.bytes_per_sample = 1;\r\n\r\n    this.lower_irq(SB_IRQ_8BIT);\r\n    this.irq_triggered.fill(0);\r\n\r\n    this.asp_registers.fill(0);\r\n    this.asp_registers[5] = 0x01;\r\n    this.asp_registers[9] = 0xF8;\r\n};\r\n\r\nSB16.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    // state[0] = this.write_buffer;\r\n    // state[1] = this.read_buffer;\r\n    state[2] = this.read_buffer_lastvalue;\r\n\r\n    state[3] = this.command;\r\n    state[4] = this.command_size;\r\n\r\n    state[5] = this.mixer_current_address;\r\n    state[6] = this.mixer_registers;\r\n\r\n    state[7] = this.dummy_speaker_enabled;\r\n    state[8] = this.test_register;\r\n\r\n    state[9] = this.dsp_highspeed;\r\n    state[10] = this.dsp_stereo;\r\n    state[11] = this.dsp_16bit;\r\n    state[12] = this.dsp_signed;\r\n\r\n    // state[13] = this.dac_buffers;\r\n    //state[14]\r\n\r\n    state[15] = this.dma_sample_count;\r\n    state[16] = this.dma_bytes_count;\r\n    state[17] = this.dma_bytes_left;\r\n    state[18] = this.dma_bytes_block;\r\n    state[19] = this.dma_irq;\r\n    state[20] = this.dma_channel;\r\n    state[21] = this.dma_channel_8bit;\r\n    state[22] = this.dma_channel_16bit;\r\n    state[23] = this.dma_autoinit;\r\n    state[24] = this.dma_buffer_uint8;\r\n    state[25] = this.dma_waiting_transfer;\r\n    state[26] = this.dma_paused;\r\n    state[27] = this.sampling_rate;\r\n    state[28] = this.bytes_per_sample;\r\n\r\n    state[29] = this.e2_value;\r\n    state[30] = this.e2_count;\r\n\r\n    state[31] = this.asp_registers;\r\n\r\n    // state[32] = this.mpu_read_buffer;\r\n    state[33] = this.mpu_read_buffer_last_value;\r\n\r\n    state[34] = this.irq;\r\n    state[35] = this.irq_triggered;\r\n    //state[36]\r\n\r\n    return state;\r\n};\r\n\r\nSB16.prototype.set_state = function(state)\r\n{\r\n    // this.write_buffer = state[0];\r\n    // this.read_buffer = state[1];\r\n    this.read_buffer_lastvalue = state[2];\r\n\r\n    this.command = state[3];\r\n    this.command_size = state[4];\r\n\r\n    this.mixer_current_address = state[5];\r\n    this.mixer_registers = state[6];\r\n    this.mixer_full_update();\r\n\r\n    this.dummy_speaker_enabled = state[7];\r\n    this.test_register = state[8];\r\n\r\n    this.dsp_highspeed = state[9];\r\n    this.dsp_stereo = state[10];\r\n    this.dsp_16bit = state[11];\r\n    this.dsp_signed = state[12];\r\n\r\n    // this.dac_buffers = state[13];\r\n    //state[14]\r\n\r\n    this.dma_sample_count = state[15];\r\n    this.dma_bytes_count = state[16];\r\n    this.dma_bytes_left = state[17];\r\n    this.dma_bytes_block = state[18];\r\n    this.dma_irq = state[19];\r\n    this.dma_channel = state[20];\r\n    this.dma_channel_8bit = state[21];\r\n    this.dma_channel_16bit = state[22];\r\n    this.dma_autoinit = state[23];\r\n    this.dma_buffer_uint8 = state[24];\r\n    this.dma_waiting_transfer = state[25];\r\n    this.dma_paused = state[26];\r\n    this.sampling_rate = state[27];\r\n    this.bytes_per_sample = state[28];\r\n\r\n    this.e2_value = state[29];\r\n    this.e2_count = state[30];\r\n\r\n    this.asp_registers = state[31];\r\n\r\n    // this.mpu_read_buffer = state[32];\r\n    this.mpu_read_buffer_last_value = state[33];\r\n\r\n    this.irq = state[34];\r\n    this.irq_triggered = state[35];\r\n    //state[36];\r\n\r\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\r\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\r\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\r\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\r\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\r\n\r\n    if(this.dma_paused)\r\n    {\r\n        this.bus.send(\"dac-disable\");\r\n    }\r\n    else\r\n    {\r\n        this.bus.send(\"dac-enable\");\r\n    }\r\n};\r\n\r\n//\r\n// I/O handlers\r\n//\r\n\r\nSB16.prototype.port2x0_read = function()\r\n{\r\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x1_read = function()\r\n{\r\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x2_read = function()\r\n{\r\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x3_read = function()\r\n{\r\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Mixer Address Port.\r\nSB16.prototype.port2x4_read = function()\r\n{\r\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\r\n    return this.mixer_current_address;\r\n};\r\n\r\n// Mixer Data Port.\r\nSB16.prototype.port2x5_read = function()\r\n{\r\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\r\n    return this.mixer_read(this.mixer_current_address);\r\n};\r\n\r\nSB16.prototype.port2x6_read = function()\r\n{\r\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x7_read = function()\r\n{\r\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x8_read = function()\r\n{\r\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x9_read = function()\r\n{\r\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Read Data.\r\n// Used to access in-bound DSP data.\r\nSB16.prototype.port2xA_read = function()\r\n{\r\n    dbg_log(\"22A read: read data\", LOG_SB16);\r\n    if(this.read_buffer.length)\r\n    {\r\n        this.read_buffer_lastvalue = this.read_buffer.shift();\r\n    }\r\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\r\n    return this.read_buffer_lastvalue;\r\n};\r\n\r\nSB16.prototype.port2xB_read = function()\r\n{\r\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Write-Buffer Status.\r\n// Indicates whether the DSP is ready to accept commands or data.\r\nSB16.prototype.port2xC_read = function()\r\n{\r\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\r\n    // Always return ready (bit-7 set to low)\r\n    return 0x7F;\r\n};\r\n\r\nSB16.prototype.port2xD_read = function()\r\n{\r\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Read-Buffer Status.\r\n// Indicates whether there is any in-bound data available for reading.\r\n// Also used to acknowledge DSP 8-bit interrupt.\r\nSB16.prototype.port2xE_read = function()\r\n{\r\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\r\n    if(this.irq_triggered[SB_IRQ_8BIT])\r\n    {\r\n        this.lower_irq(SB_IRQ_8BIT);\r\n    }\r\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\r\n    return (ready << 7) | 0x7F;\r\n};\r\n\r\n// DSP 16-bit interrupt acknowledgement.\r\nSB16.prototype.port2xF_read = function()\r\n{\r\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\r\n    this.lower_irq(SB_IRQ_16BIT);\r\n    return 0;\r\n};\r\n\r\n\r\n// FM Address Port - primary register.\r\nSB16.prototype.port2x0_write = function(value)\r\n{\r\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\r\n    this.fm_current_address0 = 0;\r\n};\r\n\r\n// FM Data Port - primary register.\r\nSB16.prototype.port2x1_write = function(value)\r\n{\r\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\r\n    var handler = FM_HANDLERS[this.fm_current_address0];\r\n    if(!handler)\r\n    {\r\n        handler = this.fm_default_write;\r\n    }\r\n    handler.call(this, value, 0, this.fm_current_address0);\r\n};\r\n\r\n// FM Address Port - secondary register.\r\nSB16.prototype.port2x2_write = function(value)\r\n{\r\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\r\n    this.fm_current_address1 = 0;\r\n};\r\n\r\n// FM Data Port - secondary register.\r\nSB16.prototype.port2x3_write = function(value)\r\n{\r\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\r\n    var handler = FM_HANDLERS[this.fm_current_address1];\r\n    if(!handler)\r\n    {\r\n        handler = this.fm_default_write;\r\n    }\r\n    handler.call(this, value, 1, this.fm_current_address1);\r\n};\r\n\r\n// Mixer Address Port.\r\nSB16.prototype.port2x4_write = function(value)\r\n{\r\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\r\n    this.mixer_current_address = value;\r\n};\r\n\r\n// Mixer Data Port.\r\nSB16.prototype.port2x5_write = function(value)\r\n{\r\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\r\n    this.mixer_write(this.mixer_current_address, value);\r\n};\r\n\r\n// Reset.\r\n// Used to reset the DSP to its default state and to exit highspeed mode.\r\nSB16.prototype.port2x6_write = function(yesplease)\r\n{\r\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\r\n\r\n    if(this.dsp_highspeed)\r\n    {\r\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\r\n        this.dsp_highspeed = false;\r\n    }\r\n    else if(yesplease)\r\n    {\r\n        dbg_log(\" -> reset\", LOG_SB16);\r\n        this.dsp_reset();\r\n    }\r\n\r\n    // Signal completion.\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(0xAA);\r\n};\r\n\r\nSB16.prototype.port2x7_write = function(value)\r\n{\r\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2x8_write = function(value)\r\n{\r\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2x9_write = function(value)\r\n{\r\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xA_write = function(value)\r\n{\r\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xB_write = function(value)\r\n{\r\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\r\n};\r\n\r\n// Write Command/Data.\r\n// Used to send commands or data to the DSP.\r\nSB16.prototype.port2xC_write = function(value)\r\n{\r\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\r\n\r\n    if(this.command === DSP_NO_COMMAND)\r\n    {\r\n        // New command.\r\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\r\n        this.command = value;\r\n        this.write_buffer.clear();\r\n        this.command_size = DSP_COMMAND_SIZES[value];\r\n    }\r\n    else\r\n    {\r\n        // More data for current command.\r\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\r\n        this.write_buffer.push(value);\r\n    }\r\n\r\n    // Perform command when we have all the needed data.\r\n    if(this.write_buffer.length >= this.command_size)\r\n    {\r\n        this.command_do();\r\n    }\r\n};\r\n\r\nSB16.prototype.port2xD_write = function(value)\r\n{\r\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xE_write = function(value)\r\n{\r\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xF_write = function(value)\r\n{\r\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\r\n};\r\n\r\n\r\n// MPU UART Mode - Data Port\r\nSB16.prototype.port3x0_read = function()\r\n{\r\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\r\n\r\n    if(this.mpu_read_buffer.length)\r\n    {\r\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\r\n    }\r\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\r\n\r\n    return this.mpu_read_buffer_lastvalue;\r\n};\r\nSB16.prototype.port3x0_write = function(value)\r\n{\r\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\r\n};\r\n\r\n// MPU UART Mode - Status Port\r\nSB16.prototype.port3x1_read = function()\r\n{\r\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\r\n\r\n    var status = 0;\r\n    status |= 0x40 * 0; // Output Ready\r\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\r\n\r\n    return status;\r\n};\r\n\r\n// MPU UART Mode - Command Port\r\nSB16.prototype.port3x1_write = function(value)\r\n{\r\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\r\n    if(value == 0xFF)\r\n    {\r\n        // Command acknowledge.\r\n        this.mpu_read_buffer.clear();\r\n        this.mpu_read_buffer.push(0xFE);\r\n    }\r\n};\r\n\r\n//\r\n// DSP command handlers\r\n//\r\n\r\nSB16.prototype.command_do = function()\r\n{\r\n    var handler = DSP_COMMAND_HANDLERS[this.command];\r\n    if(!handler)\r\n    {\r\n        handler = this.dsp_default_handler;\r\n    }\r\n    handler.call(this);\r\n\r\n    // Reset Inputs.\r\n    this.command = DSP_NO_COMMAND;\r\n    this.command_size = 0;\r\n    this.write_buffer.clear();\r\n};\r\n\r\nSB16.prototype.dsp_default_handler = function()\r\n{\r\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\r\n};\r\n\r\n/**\r\n * @param {Array} commands\r\n * @param {number} size\r\n * @param {function()=} handler\r\n */\r\nfunction register_dsp_command(commands, size, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.dsp_default_handler;\r\n    }\r\n    for(var i = 0; i < commands.length; i++)\r\n    {\r\n        DSP_COMMAND_SIZES[commands[i]] = size;\r\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\r\n    }\r\n}\r\n\r\nfunction any_first_digit(base)\r\n{\r\n    var commands = [];\r\n    for(var i = 0; i < 16; i++)\r\n    {\r\n        commands.push(base + i);\r\n    }\r\n    return commands;\r\n}\r\n\r\n// ASP set register\r\nregister_dsp_command([0x0E], 2, function()\r\n{\r\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\r\n});\r\n\r\n// ASP get register\r\nregister_dsp_command([0x0F], 1, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\r\n});\r\n\r\n// 8-bit direct mode single byte digitized sound output.\r\nregister_dsp_command([0x10], 1, function()\r\n{\r\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\r\n\r\n    this.dac_buffers[0].push(value);\r\n    this.dac_buffers[1].push(value);\r\n    this.bus.send(\"dac-enable\");\r\n});\r\n\r\n// 8-bit single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x14, 0x15], 2, function()\r\n{\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = false;\r\n    this.dsp_signed = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_highspeed = false;\r\n    this.dma_transfer_size_set();\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x16], 2);\r\n\r\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\r\n// with reference byte.\r\nregister_dsp_command([0x17], 2);\r\n\r\n// 8-bit auto-init DMA mode digitized sound output.\r\nregister_dsp_command([0x1C], 0, function()\r\n{\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = true;\r\n    this.dsp_signed = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_highspeed = false;\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\r\n// with reference byte.\r\nregister_dsp_command([0x1F], 0);\r\n\r\n// 8-bit direct mode single byte digitized sound input.\r\nregister_dsp_command([0x20], 0, function()\r\n{\r\n    // Fake silent input.\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(0x7f);\r\n});\r\n\r\n// 8-bit single-cycle DMA mode digitized sound input.\r\nregister_dsp_command([0x24], 2);\r\n\r\n// 8-bit auto-init DMA mode digitized sound input.\r\nregister_dsp_command([0x2C], 0);\r\n\r\n// Polling mode MIDI input.\r\nregister_dsp_command([0x30], 0);\r\n\r\n// Interrupt mode MIDI input.\r\nregister_dsp_command([0x31], 0);\r\n\r\n// UART polling mode MIDI I/O.\r\nregister_dsp_command([0x34], 0);\r\n\r\n// UART interrupt mode MIDI I/O.\r\nregister_dsp_command([0x35], 0);\r\n\r\n// UART polling mode MIDI I/O with time stamping.\r\nregister_dsp_command([0x36], 0);\r\n\r\n// UART interrupt mode MIDI I/O with time stamping.\r\nregister_dsp_command([0x37], 0);\r\n\r\n// MIDI output.\r\nregister_dsp_command([0x38], 0);\r\n\r\n// Set digitized sound transfer Time Constant.\r\nregister_dsp_command([0x40], 1, function()\r\n{\r\n    // Note: bTimeConstant = 256 * time constant\r\n    this.sampling_rate_change(\r\n        1000000\r\n        / (256 - this.write_buffer.shift())\r\n        / this.get_channel_count()\r\n    );\r\n});\r\n\r\n// Set digitized sound output sampling rate.\r\n// Set digitized sound input sampling rate.\r\nregister_dsp_command([0x41, 0x42], 2, function()\r\n{\r\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\r\n});\r\n\r\n// Set DSP block transfer size.\r\nregister_dsp_command([0x48], 2, function()\r\n{\r\n    // TODO: should be in bytes, but if this is only used\r\n    // for 8 bit transfers, then this number is the same\r\n    // as number of samples?\r\n    // Wrong: e.g. stereo requires two bytes per sample.\r\n    this.dma_transfer_size_set();\r\n});\r\n\r\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x74], 2);\r\n\r\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\r\n// with referene byte.\r\nregister_dsp_command([0x75], 2);\r\n\r\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x76], 2);\r\n\r\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\r\n// with referene byte.\r\nregister_dsp_command([0x77], 2);\r\n\r\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\r\n// with reference byte.\r\nregister_dsp_command([0x7D], 0);\r\n\r\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\r\n// with reference byte.\r\nregister_dsp_command([0x7F], 0);\r\n\r\n// Pause DAC for a duration.\r\nregister_dsp_command([0x80], 2);\r\n\r\n// 8-bit high-speed auto-init DMA mode digitized sound output.\r\nregister_dsp_command([0x90], 0, function()\r\n{\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = true;\r\n    this.dsp_signed = false;\r\n    this.dsp_highspeed = true;\r\n    this.dsp_16bit = false;\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\r\nregister_dsp_command([0x91], 0);\r\n\r\n// 8-bit high-speed auto-init DMA mode digitized sound input.\r\nregister_dsp_command([0x98], 0);\r\n\r\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\r\nregister_dsp_command([0x99], 0);\r\n\r\n// Set input mode to mono.\r\nregister_dsp_command([0xA0], 0);\r\n\r\n// Set input mode to stereo.\r\nregister_dsp_command([0xA8], 0);\r\n\r\n// Program 16-bit DMA mode digitized sound I/O.\r\nregister_dsp_command(any_first_digit(0xB0), 3, function()\r\n{\r\n    if(this.command & (1 << 3))\r\n    {\r\n        // Analogue to digital not implemented.\r\n        this.dsp_default_handler();\r\n        return;\r\n    }\r\n    var mode = this.write_buffer.shift();\r\n    this.dma_irq = SB_IRQ_16BIT;\r\n    this.dma_channel = this.dma_channel_16bit;\r\n    this.dma_autoinit = !!(this.command & (1 << 2));\r\n    this.dsp_signed = !!(mode & (1 << 4));\r\n    this.dsp_stereo = !!(mode & (1 << 5));\r\n    this.dsp_16bit = true;\r\n    this.dma_transfer_size_set();\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Program 8-bit DMA mode digitized sound I/O.\r\nregister_dsp_command(any_first_digit(0xC0), 3, function()\r\n{\r\n    if(this.command & (1 << 3))\r\n    {\r\n        // Analogue to digital not implemented.\r\n        this.dsp_default_handler();\r\n        return;\r\n    }\r\n    var mode = this.write_buffer.shift();\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = !!(this.command & (1 << 2));\r\n    this.dsp_signed = !!(mode & (1 << 4));\r\n    this.dsp_stereo = !!(mode & (1 << 5));\r\n    this.dsp_16bit = false;\r\n    this.dma_transfer_size_set();\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Pause 8-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD0], 0, function()\r\n{\r\n    this.dma_paused = true;\r\n    this.bus.send(\"dac-disable\");\r\n});\r\n\r\n// Turn on speaker.\r\n// Documented to have no effect on SB16.\r\nregister_dsp_command([0xD1], 0, function()\r\n{\r\n    this.dummy_speaker_enabled = true;\r\n});\r\n\r\n// Turn off speaker.\r\n// Documented to have no effect on SB16.\r\nregister_dsp_command([0xD3], 0, function()\r\n{\r\n    this.dummy_speaker_enabled = false;\r\n});\r\n\r\n// Continue 8-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD4], 0, function()\r\n{\r\n    this.dma_paused = false;\r\n    this.bus.send(\"dac-enable\");\r\n});\r\n\r\n// Pause 16-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD5], 0, function()\r\n{\r\n    this.dma_paused = true;\r\n    this.bus.send(\"dac-disable\");\r\n});\r\n\r\n// Continue 16-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD6], 0, function()\r\n{\r\n    this.dma_paused = false;\r\n    this.bus.send(\"dac-enable\");\r\n});\r\n\r\n// Get speaker status.\r\nregister_dsp_command([0xD8], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\r\n});\r\n\r\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\r\n// Exit 8-bit auto-init mode digitized sound I/O.\r\nregister_dsp_command([0xD9, 0xDA], 0, function()\r\n{\r\n    this.dma_autoinit = false;\r\n});\r\n\r\n// DSP identification\r\nregister_dsp_command([0xE0], 1, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(~this.write_buffer.shift());\r\n});\r\n\r\n// Get DSP version number.\r\nregister_dsp_command([0xE1], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(4);\r\n    this.read_buffer.push(5);\r\n});\r\n\r\n// DMA identification.\r\nregister_dsp_command([0xE2], 1);\r\n\r\n// Get DSP copyright.\r\nregister_dsp_command([0xE3], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\r\n    {\r\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\r\n    }\r\n    // Null terminator.\r\n    this.read_buffer.push(0);\r\n});\r\n\r\n// Write test register.\r\nregister_dsp_command([0xE4], 1, function()\r\n{\r\n    this.test_register = this.write_buffer.shift();\r\n});\r\n\r\n// Read test register.\r\nregister_dsp_command([0xE8], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(this.test_register);\r\n});\r\n\r\n// Trigger IRQ\r\nregister_dsp_command([0xF2, 0xF3], 0, function()\r\n{\r\n    this.raise_irq();\r\n});\r\n\r\n// ASP - unknown function\r\nvar SB_F9 = new Uint8Array(256);\r\nSB_F9[0x0E] = 0xFF;\r\nSB_F9[0x0F] = 0x07;\r\nSB_F9[0x37] = 0x38;\r\nregister_dsp_command([0xF9], 1, function()\r\n{\r\n    var input = this.write_buffer.shift();\r\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\r\n\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(SB_F9[input]);\r\n});\r\n\r\n//\r\n// Mixer Handlers (CT1745)\r\n//\r\n\r\nSB16.prototype.mixer_read = function(address)\r\n{\r\n    var handler = MIXER_READ_HANDLERS[address];\r\n    var data;\r\n    if(handler)\r\n    {\r\n        data = handler.call(this);\r\n    }\r\n    else\r\n    {\r\n        data = this.mixer_registers[address];\r\n        dbg_log(\"unhandled mixer register read. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\r\n    }\r\n    return data;\r\n};\r\n\r\nSB16.prototype.mixer_write = function(address, data)\r\n{\r\n    var handler = MIXER_WRITE_HANDLERS[address];\r\n    if(handler)\r\n    {\r\n        handler.call(this, data);\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"unhandled mixer register write. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\r\n    }\r\n};\r\n\r\nSB16.prototype.mixer_default_read = function()\r\n{\r\n    dbg_log(\"mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\r\n    return this.mixer_registers[this.mixer_current_address];\r\n};\r\n\r\nSB16.prototype.mixer_default_write = function(data)\r\n{\r\n    dbg_log(\"mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\r\n    this.mixer_registers[this.mixer_current_address] = data;\r\n};\r\n\r\nSB16.prototype.mixer_reset = function()\r\n{\r\n    // Values intentionally in decimal.\r\n    // Default values available at\r\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\r\n    this.mixer_registers[0x04] = 12 << 4 | 12;\r\n    this.mixer_registers[0x22] = 12 << 4 | 12;\r\n    this.mixer_registers[0x26] = 12 << 4 | 12;\r\n    this.mixer_registers[0x28] = 0;\r\n    this.mixer_registers[0x2E] = 0;\r\n    this.mixer_registers[0x0A] = 0;\r\n    this.mixer_registers[0x30] = 24 << 3;\r\n    this.mixer_registers[0x31] = 24 << 3;\r\n    this.mixer_registers[0x32] = 24 << 3;\r\n    this.mixer_registers[0x33] = 24 << 3;\r\n    this.mixer_registers[0x34] = 24 << 3;\r\n    this.mixer_registers[0x35] = 24 << 3;\r\n    this.mixer_registers[0x36] = 0;\r\n    this.mixer_registers[0x37] = 0;\r\n    this.mixer_registers[0x38] = 0;\r\n    this.mixer_registers[0x39] = 0;\r\n    this.mixer_registers[0x3B] = 0;\r\n    this.mixer_registers[0x3C] = 0x1F;\r\n    this.mixer_registers[0x3D] = 0x15;\r\n    this.mixer_registers[0x3E] = 0x0B;\r\n    this.mixer_registers[0x3F] = 0;\r\n    this.mixer_registers[0x40] = 0;\r\n    this.mixer_registers[0x41] = 0;\r\n    this.mixer_registers[0x42] = 0;\r\n    this.mixer_registers[0x43] = 0;\r\n    this.mixer_registers[0x44] = 8 << 4;\r\n    this.mixer_registers[0x45] = 8 << 4;\r\n    this.mixer_registers[0x46] = 8 << 4;\r\n    this.mixer_registers[0x47] = 8 << 4;\r\n\r\n    this.mixer_full_update();\r\n};\r\n\r\nSB16.prototype.mixer_full_update = function()\r\n{\r\n    // Start at 1. Don't re-reset.\r\n    for(var i = 1; i < this.mixer_registers.length; i++)\r\n    {\r\n        if(MIXER_REGISTER_IS_LEGACY[i])\r\n        {\r\n            // Legacy registers are actually mapped to other register locations. Update\r\n            // using the new registers rather than the legacy registers.\r\n            continue;\r\n        }\r\n        this.mixer_write(i, this.mixer_registers[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @param{number} address\r\n * @param{function():number=} handler\r\n */\r\nfunction register_mixer_read(address, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.mixer_default_read;\r\n    }\r\n    MIXER_READ_HANDLERS[address] = handler;\r\n}\r\n\r\n/**\r\n * @param{number} address\r\n * @param{function(number)=} handler\r\n */\r\nfunction register_mixer_write(address, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.mixer_default_write;\r\n    }\r\n    MIXER_WRITE_HANDLERS[address] = handler;\r\n}\r\n\r\n// Legacy registers map each nibble to the last 4 bits of the new registers\r\nfunction register_mixer_legacy(address_old, address_new_left, address_new_right)\r\n{\r\n    MIXER_REGISTER_IS_LEGACY[address_old] = 1;\r\n\r\n    /** @this {SB16} */\r\n    MIXER_READ_HANDLERS[address_old] = function()\r\n    {\r\n        var left = this.mixer_registers[address_new_left] & 0xF0;\r\n        var right = this.mixer_registers[address_new_right] >>> 4;\r\n        return left | right;\r\n    };\r\n\r\n    /** @this {SB16} */\r\n    MIXER_WRITE_HANDLERS[address_old] = function(data)\r\n    {\r\n        this.mixer_registers[address_old] = data;\r\n        var prev_left = this.mixer_registers[address_new_left];\r\n        var prev_right = this.mixer_registers[address_new_right];\r\n        var left = (data & 0xF0) | (prev_left & 0x0F);\r\n        var right = (data << 4 & 0xF0) | (prev_right & 0x0F);\r\n\r\n        this.mixer_write(address_new_left, left);\r\n        this.mixer_write(address_new_right, right);\r\n    };\r\n}\r\n\r\n/**\r\n * @param {number} address\r\n * @param {number} mixer_source\r\n * @param {number} channel\r\n */\r\nfunction register_mixer_volume(address, mixer_source, channel)\r\n{\r\n    MIXER_READ_HANDLERS[address] = SB16.prototype.mixer_default_read;\r\n\r\n    /** @this {SB16} */\r\n    MIXER_WRITE_HANDLERS[address] = function(data)\r\n    {\r\n        this.mixer_registers[address] = data;\r\n        this.bus.send(\"mixer-volume\",\r\n        [\r\n            mixer_source,\r\n            channel,\r\n            (data >>> 2) - 62\r\n        ]);\r\n    };\r\n}\r\n\r\n// Reset.\r\nregister_mixer_read(0x00, function()\r\n{\r\n    this.mixer_reset();\r\n    return 0;\r\n});\r\nregister_mixer_write(0x00);\r\n\r\n// Legacy Voice Volume Left/Right.\r\nregister_mixer_legacy(0x04, 0x32, 0x33);\r\n\r\n// Legacy Mic Volume. TODO.\r\n//register_mixer_read(0x0A);\r\n//register_mixer_write(0x0A, function(data)\r\n//{\r\n//    this.mixer_registers[0x0A] = data;\r\n//    var prev = this.mixer_registers[0x3A];\r\n//    this.mixer_write(0x3A, data << 5 | (prev & 0x0F));\r\n//});\r\n\r\n// Legacy Master Volume Left/Right.\r\nregister_mixer_legacy(0x22, 0x30, 0x31);\r\n// Legacy Midi Volume Left/Right.\r\nregister_mixer_legacy(0x26, 0x34, 0x35);\r\n// Legacy CD Volume Left/Right.\r\nregister_mixer_legacy(0x28, 0x36, 0x37);\r\n// Legacy Line Volume Left/Right.\r\nregister_mixer_legacy(0x2E, 0x38, 0x39);\r\n\r\n// Master Volume Left.\r\nregister_mixer_volume(0x30, MIXER_SRC_MASTER, MIXER_CHANNEL_LEFT);\r\n// Master Volume Right.\r\nregister_mixer_volume(0x31, MIXER_SRC_MASTER, MIXER_CHANNEL_RIGHT);\r\n// Voice Volume Left.\r\nregister_mixer_volume(0x32, MIXER_SRC_DAC, MIXER_CHANNEL_LEFT);\r\n// Voice Volume Right.\r\nregister_mixer_volume(0x33, MIXER_SRC_DAC, MIXER_CHANNEL_RIGHT);\r\n// MIDI Volume Left. TODO.\r\n//register_mixer_volume(0x34, MIXER_SRC_SYNTH, MIXER_CHANNEL_LEFT);\r\n// MIDI Volume Right. TODO.\r\n//register_mixer_volume(0x35, MIXER_SRC_SYNTH, MIXER_CHANNEL_RIGHT);\r\n// CD Volume Left. TODO.\r\n//register_mixer_volume(0x36, MIXER_SRC_CD, MIXER_CHANNEL_LEFT);\r\n// CD Volume Right. TODO.\r\n//register_mixer_volume(0x37, MIXER_SRC_CD, MIXER_CHANNEL_RIGHT);\r\n// Line Volume Left. TODO.\r\n//register_mixer_volume(0x38, MIXER_SRC_LINE, MIXER_CHANNEL_LEFT);\r\n// Line Volume Right. TODO.\r\n//register_mixer_volume(0x39, MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT);\r\n// Mic Volume. TODO.\r\n//register_mixer_volume(0x3A, MIXER_SRC_MIC, MIXER_CHANNEL_BOTH);\r\n\r\n// PC Speaker Volume.\r\nregister_mixer_read(0x3B);\r\nregister_mixer_write(0x3B, function(data)\r\n{\r\n    this.mixer_registers[0x3B] = data;\r\n    this.bus.send(\"mixer-volume\", [MIXER_SRC_PCSPEAKER, MIXER_CHANNEL_BOTH, (data >>> 6) * 6 - 18]);\r\n});\r\n\r\n// Output Mixer Switches. TODO.\r\n//register_mixer_read(0x3C);\r\n//register_mixer_write(0x3C, function(data)\r\n//{\r\n//    this.mixer_registers[0x3C] = data;\r\n//\r\n//    if(data & 0x01) this.bus.send(\"mixer-connect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\r\n//\r\n//    if(data & 0x02) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\r\n//\r\n//    if(data & 0x04) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\r\n//\r\n//    if(data & 0x08) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\r\n//\r\n//    if(data & 0x10) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\r\n//});\r\n\r\n// Input Mixer Left Switches. TODO.\r\n//register_mixer_read(0x3D);\r\n//register_mixer_write(0x3D);\r\n\r\n// Input Mixer Right Switches. TODO.\r\n//register_mixer_read(0x3E);\r\n//register_mixer_write(0x3E);\r\n\r\n// Input Gain Left. TODO.\r\n//register_mixer_read(0x3F);\r\n//register_mixer_write(0x3F);\r\n\r\n// Input Gain Right. TODO.\r\n//register_mixer_read(0x40);\r\n//register_mixer_write(0x40);\r\n\r\n// Output Gain Left.\r\nregister_mixer_read(0x41);\r\nregister_mixer_write(0x41, function(data)\r\n{\r\n    this.mixer_registers[0x41] = data;\r\n    this.bus.send(\"mixer-gain-left\", (data >>> 6) * 6);\r\n});\r\n\r\n// Output Gain Right.\r\nregister_mixer_read(0x42);\r\nregister_mixer_write(0x42, function(data)\r\n{\r\n    this.mixer_registers[0x42] = data;\r\n    this.bus.send(\"mixer-gain-right\", (data >>> 6) * 6);\r\n});\r\n\r\n// Mic AGC. TODO.\r\n//register_mixer_read(0x43);\r\n//register_mixer_write(0x43);\r\n\r\n// Treble Left.\r\nregister_mixer_read(0x44);\r\nregister_mixer_write(0x44, function(data)\r\n{\r\n    this.mixer_registers[0x44] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-treble-left\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// Treble Right.\r\nregister_mixer_read(0x45);\r\nregister_mixer_write(0x45, function(data)\r\n{\r\n    this.mixer_registers[0x45] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-treble-right\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// Bass Left.\r\nregister_mixer_read(0x46);\r\nregister_mixer_write(0x46, function(data)\r\n{\r\n    this.mixer_registers[0x46] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// Bass Right.\r\nregister_mixer_read(0x47);\r\nregister_mixer_write(0x47, function(data)\r\n{\r\n    this.mixer_registers[0x47] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// IRQ Select.\r\nregister_mixer_read(0x80, function()\r\n{\r\n    switch(this.irq)\r\n    {\r\n        case SB_IRQ2: return 0x1;\r\n        case SB_IRQ5: return 0x2;\r\n        case SB_IRQ7: return 0x4;\r\n        case SB_IRQ10: return 0x8;\r\n        default: return 0x0;\r\n    }\r\n});\r\nregister_mixer_write(0x80, function(bits)\r\n{\r\n    if(bits & 0x1) this.irq = SB_IRQ2;\r\n    if(bits & 0x2) this.irq = SB_IRQ5;\r\n    if(bits & 0x4) this.irq = SB_IRQ7;\r\n    if(bits & 0x8) this.irq = SB_IRQ10;\r\n});\r\n\r\n// DMA Select.\r\nregister_mixer_read(0x81, function()\r\n{\r\n    var ret = 0;\r\n    switch(this.dma_channel_8bit)\r\n    {\r\n        case SB_DMA0: ret |= 0x1; break;\r\n        case SB_DMA1: ret |= 0x2; break;\r\n        // Channel 2 is hardwired to floppy disk.\r\n        case SB_DMA3: ret |= 0x8; break;\r\n    }\r\n    switch(this.dma_channel_16bit)\r\n    {\r\n        // Channel 4 cannot be used.\r\n        case SB_DMA5: ret |= 0x20; break;\r\n        case SB_DMA6: ret |= 0x40; break;\r\n        case SB_DMA7: ret |= 0x80; break;\r\n    }\r\n    return ret;\r\n});\r\nregister_mixer_write(0x81, function(bits)\r\n{\r\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\r\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\r\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\r\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\r\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\r\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\r\n});\r\n\r\n// IRQ Status.\r\nregister_mixer_read(0x82, function()\r\n{\r\n    var ret = 0x20;\r\n    for(var i = 0; i < 16; i++)\r\n    {\r\n        ret |= i * this.irq_triggered[i];\r\n    }\r\n    return ret;\r\n});\r\n\r\n//\r\n// FM Handlers\r\n//\r\n\r\nSB16.prototype.fm_default_write = function(data, register, address)\r\n{\r\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\r\n    // No need to save into a dummy register as the registers are write-only.\r\n};\r\n\r\n/**\r\n * @param{Array} addresses\r\n * @param{function(number, number, number)=} handler\r\n */\r\nfunction register_fm_write(addresses, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.fm_default_write;\r\n    }\r\n    for(var i = 0; i < addresses.length; i++)\r\n    {\r\n        FM_HANDLERS[addresses[i]] = handler;\r\n    }\r\n}\r\n\r\nfunction between(start, end)\r\n{\r\n    var a = [];\r\n    for(var i = start; i <= end; i++)\r\n    {\r\n        a.push(i);\r\n    }\r\n    return a;\r\n}\r\n\r\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\r\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\r\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\r\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\r\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\r\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\r\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\r\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\r\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\r\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\r\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\r\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\r\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\r\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\r\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\r\n\r\nfunction get_fm_operator(register, offset)\r\n{\r\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\r\n}\r\n\r\nregister_fm_write([0x01], function(bits, register, address)\r\n{\r\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\r\n    this.fm_update_waveforms();\r\n});\r\n\r\n// Timer 1 Count.\r\nregister_fm_write([0x02]);\r\n\r\n// Timer 2 Count.\r\nregister_fm_write([0x03]);\r\n\r\nregister_fm_write([0x04], function(bits, register, address)\r\n{\r\n    switch(register)\r\n    {\r\n        case 0:\r\n            // if(bits & 0x80)\r\n            // {\r\n            //     // IQR Reset\r\n            // }\r\n            // else\r\n            // {\r\n            //     // Timer masks and on/off\r\n            // }\r\n            break;\r\n        case 1:\r\n            // Four-operator enable\r\n            break;\r\n    }\r\n});\r\n\r\nregister_fm_write([0x05], function(bits, register, address)\r\n{\r\n    if(register === 0)\r\n    {\r\n        // No registers documented here.\r\n        this.fm_default_write(bits, register, address);\r\n        return;\r\n    }\r\n    // OPL3 Mode Enable\r\n});\r\n\r\nregister_fm_write([0x08], function(bits, register, address)\r\n{\r\n    // Composite sine wave on/off\r\n    // Note select (keyboard split selection method)\r\n});\r\n\r\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x20);\r\n    // Tremolo\r\n    // Vibrato\r\n    // Sustain\r\n    // KSR Envelope Scaling\r\n    // Frequency Multiplication Factor\r\n});\r\n\r\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x40);\r\n    // Key Scale Level\r\n    // Output Level\r\n});\r\n\r\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x60);\r\n    // Attack Rate\r\n    // Decay Rate\r\n});\r\n\r\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x80);\r\n    // Sustain Level\r\n    // Release Rate\r\n});\r\n\r\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\r\n{\r\n    var channel = address - 0xA0;\r\n    // Frequency Number (Lower 8 bits)\r\n});\r\n\r\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\r\n{\r\n    // Key-On\r\n    // Block Number\r\n    // Frequency Number (Higher 2 bits)\r\n});\r\n\r\nregister_fm_write([0xBD], function(bits, register, address)\r\n{\r\n    // Tremelo Depth\r\n    // Vibrato Depth\r\n    // Percussion Mode\r\n    // Bass Drum Key-On\r\n    // Snare Drum Key-On\r\n    // Tom-Tom Key-On\r\n    // Cymbal Key-On\r\n    // Hi-Hat Key-On\r\n});\r\n\r\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\r\n{\r\n    // Right Speaker Enable\r\n    // Left Speaker Enable\r\n    // Feedback Modulation Factor\r\n    // Synthesis Type\r\n});\r\n\r\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0xE0);\r\n    // Waveform Select\r\n});\r\n\r\n//\r\n// FM behaviours\r\n//\r\n\r\nSB16.prototype.fm_update_waveforms = function()\r\n{\r\n    // To be implemented.\r\n};\r\n\r\n//\r\n// General behaviours\r\n//\r\n\r\nSB16.prototype.sampling_rate_change = function(rate)\r\n{\r\n    this.sampling_rate = rate;\r\n    this.bus.send(\"dac-tell-sampling-rate\", rate);\r\n};\r\n\r\nSB16.prototype.get_channel_count = function()\r\n{\r\n    return this.dsp_stereo ? 2 : 1;\r\n};\r\n\r\nSB16.prototype.dma_transfer_size_set = function()\r\n{\r\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\r\n};\r\n\r\nSB16.prototype.dma_transfer_start = function()\r\n{\r\n    dbg_log(\"begin dma transfer\", LOG_SB16);\r\n\r\n    // (1) Setup appropriate settings.\r\n\r\n    this.bytes_per_sample = 1;\r\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\r\n\r\n    // Don't count stereo interleaved bits apparently.\r\n    // Disabling this line is needed for sounds to work correctly,\r\n    // especially double buffering autoinit mode.\r\n    // Learnt the hard way.\r\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\r\n\r\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\r\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\r\n\r\n    // Ensure block size is small enough but not too small, and is divisible by 4\r\n    var max_bytes_block = Math.max(this.dma_bytes_count >> 2 & ~0x3, 32);\r\n    this.dma_bytes_block = Math.min(max_bytes_block, this.dma_bytes_block);\r\n\r\n    // (2) Wait until channel is unmasked (if not already)\r\n    this.dma_waiting_transfer = true;\r\n    if(!this.dma.channel_mask[this.dma_channel])\r\n    {\r\n        this.dma_on_unmask(this.dma_channel);\r\n    }\r\n};\r\n\r\nSB16.prototype.dma_on_unmask = function(channel)\r\n{\r\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // (3) Configure amount of bytes left to transfer and tell speaker adapter\r\n    // to start requesting transfers\r\n    this.dma_waiting_transfer = false;\r\n    this.dma_bytes_left = this.dma_bytes_count;\r\n    this.dma_paused = false;\r\n    this.bus.send(\"dac-enable\");\r\n};\r\n\r\nSB16.prototype.dma_transfer_next = function()\r\n{\r\n    dbg_log(\"dma transfering next block\", LOG_SB16);\r\n\r\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\r\n    var samples = Math.floor(size / this.bytes_per_sample);\r\n\r\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\r\n    {\r\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\r\n        if(error) return;\r\n\r\n        this.dma_to_dac(samples);\r\n        this.dma_bytes_left -= size;\r\n\r\n        if(!this.dma_bytes_left)\r\n        {\r\n            // Completed requested transfer of given size.\r\n            this.raise_irq(this.dma_irq);\r\n\r\n            if(this.dma_autoinit)\r\n            {\r\n                // Restart the transfer.\r\n                this.dma_bytes_left = this.dma_bytes_count;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nSB16.prototype.dma_to_dac = function(sample_count)\r\n{\r\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\r\n    var offset = this.dsp_signed ? 0 : -1;\r\n    var repeats = this.dsp_stereo ? 1 : 2;\r\n\r\n    var buffer;\r\n    if(this.dsp_16bit)\r\n    {\r\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\r\n    }\r\n    else\r\n    {\r\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\r\n    }\r\n\r\n    var channel = 0;\r\n    for(var i = 0; i < sample_count; i++)\r\n    {\r\n        var sample = audio_normalize(buffer[i], amplitude, offset);\r\n        for(var j = 0; j < repeats; j++)\r\n        {\r\n            this.dac_buffers[channel].push(sample);\r\n            channel ^= 1;\r\n        }\r\n    }\r\n\r\n    this.dac_send();\r\n};\r\n\r\nSB16.prototype.dac_handle_request = function()\r\n{\r\n    if(!this.dma_bytes_left || this.dma_paused)\r\n    {\r\n        // No more data to transfer or is paused. Send whatever is in the buffers.\r\n        this.dac_send();\r\n    }\r\n    else\r\n    {\r\n        this.dma_transfer_next();\r\n    }\r\n};\r\n\r\nSB16.prototype.dac_send = function()\r\n{\r\n    if(!this.dac_buffers[0].length)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var out0 = this.dac_buffers[0].shift_block(this.dac_buffers[0].length);\r\n    var out1 = this.dac_buffers[1].shift_block(this.dac_buffers[1].length);\r\n    this.bus.send(\"dac-send-data\", [out0, out1], [out0.buffer, out1.buffer]);\r\n};\r\n\r\nSB16.prototype.raise_irq = function(type)\r\n{\r\n    dbg_log(\"raise irq\", LOG_SB16);\r\n    this.irq_triggered[type] = 1;\r\n    this.cpu.device_raise_irq(this.irq);\r\n};\r\n\r\nSB16.prototype.lower_irq = function(type)\r\n{\r\n    dbg_log(\"lower irq\", LOG_SB16);\r\n    this.irq_triggered[type] = 0;\r\n    this.cpu.device_lower_irq(this.irq);\r\n};\r\n\r\n//\r\n// Helpers\r\n//\r\n\r\nfunction audio_normalize(value, amplitude, offset)\r\n{\r\n    return audio_clip(value / amplitude + offset, -1, 1);\r\n}\r\n\r\nfunction audio_clip(value, low, high)\r\n{\r\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar FPU_LOG_OP = false;\r\n\r\nvar\r\n    /** @const */\r\n    FPU_C0 = 0x100,\r\n    /** @const */\r\n    FPU_C1 = 0x200,\r\n    /** @const */\r\n    FPU_C2 = 0x400,\r\n    /** @const */\r\n    FPU_C3 = 0x4000,\r\n    /** @const */\r\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\r\n    /** @const */\r\n    FPU_STACK_TOP = 0x3800;\r\n\r\nvar\r\n    // precision, round & infinity control\r\n    /** @const */\r\n    FPU_PC = 3 << 8,\r\n    /** @const */\r\n    FPU_RC = 3 << 10,\r\n    /** @const */\r\n    FPU_IF = 1 << 12;\r\n\r\n// exception bits in the status word\r\nvar\r\n    /** @const */\r\n    FPU_EX_SF = 1 << 6,\r\n    /** @const */\r\n    FPU_EX_P = 1 << 5,\r\n    /** @const */\r\n    FPU_EX_U = 1 << 4,\r\n    /** @const */\r\n    FPU_EX_O = 1 << 3,\r\n    /** @const */\r\n    FPU_EX_Z = 1 << 2,\r\n    /** @const */\r\n    FPU_EX_D = 1 << 1,\r\n    /** @const */\r\n    FPU_EX_I = 1 << 0;\r\n\r\nvar\r\n    /** @const */\r\n    TWO_POW_63 =  0x8000000000000000;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction FPU(cpu)\r\n{\r\n    // TODO:\r\n    // - Precision Control\r\n    // - QNaN, unordered comparison\r\n    // - Exceptions\r\n\r\n    this.cpu = cpu;\r\n\r\n    // Why no Float80Array :-(\r\n    this.st = new Float64Array(8);\r\n\r\n    // used for conversion\r\n    /** @const */ this.float32 = new Float32Array(1);\r\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\r\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\r\n    /** @const */ this.float64 = new Float64Array(1);\r\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\r\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\r\n\r\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\r\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\r\n\r\n\r\n    // bitmap of which stack registers are empty\r\n    this.stack_empty = 0xff;\r\n    this.stack_ptr = 0;\r\n\r\n    this.control_word = 0x37F;\r\n    this.status_word = 0;\r\n    this.fpu_ip = 0;\r\n    this.fpu_ip_selector = 0;\r\n    this.fpu_opcode = 0;\r\n    this.fpu_dp = 0;\r\n    this.fpu_dp_selector = 0;\r\n\r\n    /** @const */\r\n    this.indefinite_nan = NaN;\r\n\r\n    /** @const */\r\n    this.constants = new Float64Array([\r\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\r\n        Math.log(2) / Math.LN10, Math.LN2, 0\r\n    ]);\r\n\r\n}\r\n\r\nFPU.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.st;\r\n    state[1] = this.stack_empty;\r\n    state[2] = this.stack_ptr;\r\n    state[3] = this.control_word;\r\n    state[4] = this.fpu_dp_selector;\r\n    state[5] = this.fpu_ip;\r\n    state[6] = this.fpu_ip_selector;\r\n    state[7] = this.fpu_dp;\r\n    state[8] = this.fpu_dp_selector;\r\n    state[9] = this.fpu_opcode;\r\n\r\n    return state;\r\n};\r\n\r\nFPU.prototype.set_state = function(state)\r\n{\r\n    this.st.set(state[0]);\r\n    this.stack_empty = state[1];\r\n    this.stack_ptr = state[2];\r\n    this.control_word = state[3];\r\n    this.fpu_dp_selector = state[4];\r\n    this.fpu_ip = state[5];\r\n    this.fpu_ip_selector = state[6];\r\n    this.fpu_dp = state[7];\r\n    this.fpu_dp_selector = state[8];\r\n    this.fpu_opcode = state[9];\r\n};\r\n\r\nFPU.prototype.fpu_unimpl = function()\r\n{\r\n    dbg_trace();\r\n    if(DEBUG) throw \"fpu: unimplemented\";\r\n    else this.cpu.trigger_ud();\r\n}\r\n\r\nFPU.prototype.stack_fault = function()\r\n{\r\n    // TODO: Interrupt\r\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\r\n}\r\n\r\nFPU.prototype.invalid_arithmatic = function()\r\n{\r\n    this.status_word |= FPU_EX_I;\r\n}\r\n\r\nFPU.prototype.fcom = function(y)\r\n{\r\n    var x = this.get_st0();\r\n\r\n    this.status_word &= ~FPU_RESULT_FLAGS;\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        this.status_word |= FPU_C0;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        this.status_word |= FPU_C3;\r\n    }\r\n    else\r\n    {\r\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\r\n    }\r\n}\r\n\r\nFPU.prototype.fucom = function(y)\r\n{\r\n    // TODO\r\n    this.fcom(y);\r\n}\r\n\r\n\r\nFPU.prototype.fcomi = function(y)\r\n{\r\n    var x = this.st[this.stack_ptr];\r\n\r\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\r\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        this.cpu.flags |= 1;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        this.cpu.flags |= flag_zero;\r\n    }\r\n    else\r\n    {\r\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\r\n    }\r\n}\r\n\r\nFPU.prototype.fucomi = function(y)\r\n{\r\n    // TODO\r\n    this.fcomi(y);\r\n}\r\n\r\nFPU.prototype.ftst = function(x)\r\n{\r\n    this.status_word &= ~FPU_RESULT_FLAGS;\r\n\r\n    if(isNaN(x))\r\n    {\r\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\r\n    }\r\n    else if(x === 0)\r\n    {\r\n        this.status_word |= FPU_C3;\r\n    }\r\n    else if(x < 0)\r\n    {\r\n        this.status_word |= FPU_C0;\r\n    }\r\n\r\n    // TODO: unordered (x is nan, etc)\r\n}\r\n\r\nFPU.prototype.fxam = function(x)\r\n{\r\n    this.status_word &= ~FPU_RESULT_FLAGS;\r\n    this.status_word |= this.sign(0) << 9;\r\n\r\n    if(this.stack_empty >> this.stack_ptr & 1)\r\n    {\r\n        this.status_word |= FPU_C3 | FPU_C0;\r\n    }\r\n    else if(isNaN(x))\r\n    {\r\n        this.status_word |= FPU_C0;\r\n    }\r\n    else if(x === 0)\r\n    {\r\n        this.status_word |= FPU_C3;\r\n    }\r\n    else if(x === Infinity || x === -Infinity)\r\n    {\r\n        this.status_word |= FPU_C2 | FPU_C0;\r\n    }\r\n    else\r\n    {\r\n        this.status_word |= FPU_C2;\r\n    }\r\n    // TODO:\r\n    // Unsupported, Denormal\r\n}\r\n\r\nFPU.prototype.finit = function()\r\n{\r\n    this.control_word = 0x37F;\r\n    this.status_word = 0;\r\n    this.fpu_ip = 0;\r\n    this.fpu_dp = 0;\r\n    this.fpu_opcode = 0;\r\n\r\n    this.stack_empty = 0xFF;\r\n    this.stack_ptr = 0;\r\n}\r\n\r\nFPU.prototype.load_status_word = function()\r\n{\r\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\r\n}\r\n\r\nFPU.prototype.set_status_word = function(sw)\r\n{\r\n    this.status_word = sw & ~(7 << 11);\r\n    this.stack_ptr = sw >> 11 & 7;\r\n}\r\n\r\nFPU.prototype.load_tag_word = function()\r\n{\r\n    var tag_word = 0,\r\n        value;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        value = this.st[i];\r\n\r\n        if(this.stack_empty >> i & 1)\r\n        {\r\n            tag_word |= 3 << (i << 1);\r\n        }\r\n        else if(value === 0)\r\n        {\r\n            tag_word |= 1 << (i << 1);\r\n        }\r\n        else if(!isFinite(value))\r\n        {\r\n            tag_word |= 2 << (i << 1);\r\n        }\r\n    }\r\n\r\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\r\n\r\n    return tag_word;\r\n}\r\n\r\nFPU.prototype.set_tag_word = function(tag_word)\r\n{\r\n    this.stack_empty = 0;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\r\n    }\r\n\r\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\r\n}\r\n\r\nFPU.prototype.fstenv = function(addr)\r\n{\r\n    if(this.cpu.is_osize_32())\r\n    {\r\n        this.cpu.writable_or_pagefault(addr, 26);\r\n\r\n        this.cpu.safe_write16(addr, this.control_word);\r\n\r\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\r\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\r\n\r\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\r\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\r\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\r\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\r\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\r\n    }\r\n    else\r\n    {\r\n        this.fpu_unimpl();\r\n    }\r\n}\r\n\r\nFPU.prototype.fldenv = function(addr)\r\n{\r\n    if(this.cpu.is_osize_32())\r\n    {\r\n        this.control_word = this.cpu.safe_read16(addr);\r\n\r\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\r\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\r\n\r\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\r\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\r\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\r\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\r\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\r\n    }\r\n    else\r\n    {\r\n        this.fpu_unimpl();\r\n    }\r\n}\r\n\r\nFPU.prototype.fsave = function(addr)\r\n{\r\n    this.cpu.writable_or_pagefault(addr, 108);\r\n\r\n    this.fstenv(addr);\r\n    addr += 28;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\r\n        addr += 10;\r\n    }\r\n\r\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\r\n\r\n    this.finit();\r\n}\r\n\r\nFPU.prototype.frstor = function(addr)\r\n{\r\n    this.fldenv(addr);\r\n    addr += 28;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\r\n        addr += 10;\r\n    }\r\n\r\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\r\n}\r\n\r\nFPU.prototype.fxtract = function()\r\n{\r\n    this.float64[0] = this.get_st0();\r\n\r\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\r\n\r\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\r\n    this.float64_byte[6] |= 0xF0;\r\n\r\n    this.st[this.stack_ptr] = exponent;\r\n    this.push(this.float64[0]);\r\n};\r\n\r\nFPU.prototype.integer_round = function(f)\r\n{\r\n    var rc = this.control_word >> 10 & 3;\r\n    return this.cpu.integer_round(f, rc);\r\n}\r\n\r\nFPU.prototype.truncate = function(x)\r\n{\r\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\r\n}\r\n\r\nFPU.prototype.push = function(x)\r\n{\r\n    this.stack_ptr = this.stack_ptr - 1 & 7;\r\n\r\n    if(this.stack_empty >> this.stack_ptr & 1)\r\n    {\r\n        this.status_word &= ~FPU_C1;\r\n        this.stack_empty &= ~(1 << this.stack_ptr);\r\n        this.st[this.stack_ptr] = x;\r\n    }\r\n    else\r\n    {\r\n        this.status_word |= FPU_C1;\r\n        this.stack_fault();\r\n        this.st[this.stack_ptr] = this.indefinite_nan;\r\n    }\r\n}\r\n\r\nFPU.prototype.pop = function()\r\n{\r\n    this.stack_empty |= 1 << this.stack_ptr;\r\n    this.stack_ptr = this.stack_ptr + 1 & 7;\r\n}\r\n\r\nFPU.prototype.get_sti = function(i)\r\n{\r\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\r\n\r\n    i = i + this.stack_ptr & 7;\r\n\r\n    if(this.stack_empty >> i & 1)\r\n    {\r\n        this.status_word &= ~FPU_C1;\r\n        this.stack_fault();\r\n        return this.indefinite_nan;\r\n    }\r\n    else\r\n    {\r\n        return this.st[i];\r\n    }\r\n}\r\n\r\nFPU.prototype.get_st0 = function()\r\n{\r\n    if(this.stack_empty >> this.stack_ptr & 1)\r\n    {\r\n        this.status_word &= ~FPU_C1;\r\n        this.stack_fault();\r\n        return this.indefinite_nan;\r\n    }\r\n    else\r\n    {\r\n        return this.st[this.stack_ptr];\r\n    }\r\n}\r\n\r\nFPU.prototype.load_m80 = function(addr)\r\n{\r\n    var exponent = this.cpu.safe_read16(addr + 8),\r\n        sign,\r\n        low = this.cpu.safe_read32s(addr) >>> 0,\r\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\r\n\r\n    sign = exponent >> 15;\r\n    exponent &= ~0x8000;\r\n\r\n    if(exponent === 0)\r\n    {\r\n        // TODO: denormal numbers\r\n        return 0;\r\n    }\r\n\r\n    if(exponent < 0x7FFF)\r\n    {\r\n        exponent -= 0x3FFF;\r\n    }\r\n    else\r\n    {\r\n        // TODO: NaN, Infinity\r\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\r\n        this.float64_byte[7] = 0x7F | sign << 7;\r\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\r\n\r\n        this.float64_byte[5] = 0;\r\n        this.float64_byte[4] = 0;\r\n\r\n        this.float64_int[0] = 0;\r\n\r\n        return this.float64[0];\r\n    }\r\n\r\n    // Note: some bits might be lost at this point\r\n    var mantissa = low + 0x100000000 * high;\r\n\r\n    if(sign)\r\n    {\r\n        mantissa = -mantissa;\r\n    }\r\n\r\n    //console.log(\"m: \" + mantissa);\r\n    //console.log(\"e: \" + exponent);\r\n    //console.log(\"s: \" + this.sign);\r\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\r\n\r\n    // Simply compute the 64 bit floating point number.\r\n    // An alternative write the mantissa, sign and exponent in the\r\n    // float64_byte and return float64[0]\r\n\r\n    return mantissa * Math.pow(2, exponent - 63);\r\n}\r\n\r\nFPU.prototype.store_m80 = function(addr, n)\r\n{\r\n    this.float64[0] = n;\r\n\r\n    var sign = this.float64_byte[7] & 0x80,\r\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\r\n        low,\r\n        high;\r\n\r\n    if(exponent === 0x7FF)\r\n    {\r\n        // all bits set (NaN and infinity)\r\n        exponent = 0x7FFF;\r\n        low = 0;\r\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\r\n    }\r\n    else if(exponent === 0)\r\n    {\r\n        // zero and denormal numbers\r\n        // Just assume zero for now\r\n        low = 0;\r\n        high = 0;\r\n    }\r\n    else\r\n    {\r\n        exponent += 0x3FFF - 0x3FF;\r\n\r\n        // does the mantissa need to be adjusted?\r\n        low = this.float64_int[0] << 11;\r\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\r\n    }\r\n\r\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\r\n\r\n    this.cpu.safe_write32(addr, low);\r\n    this.cpu.safe_write32(addr + 4, high);\r\n\r\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\r\n}\r\n\r\nFPU.prototype.load_m64 = function(addr)\r\n{\r\n    var low = this.cpu.safe_read32s(addr),\r\n        high = this.cpu.safe_read32s(addr + 4);\r\n\r\n    this.float64_int[0] = low;\r\n    this.float64_int[1] = high;\r\n\r\n    return this.float64[0];\r\n};\r\n\r\nFPU.prototype.store_m64 = function(addr, i)\r\n{\r\n    this.cpu.writable_or_pagefault(addr, 8);\r\n\r\n    this.float64[0] = this.get_sti(i);\r\n\r\n    this.cpu.safe_write32(addr, this.float64_int[0]);\r\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\r\n};\r\n\r\nFPU.prototype.load_m32 = function(addr)\r\n{\r\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\r\n\r\n    return this.float32[0];\r\n};\r\n\r\nFPU.prototype.store_m32 = function(addr, x)\r\n{\r\n    this.float32[0] = x;\r\n\r\n    this.cpu.safe_write32(addr, this.float32_int[0]);\r\n};\r\n\r\n// sign of a number on the stack\r\nFPU.prototype.sign = function(i)\r\n{\r\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\r\n};\r\n\r\n\r\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\r\n{\r\n    if(!FPU_LOG_OP)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(imm8 >= 0xC0)\r\n    {\r\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\r\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\r\n    }\r\n    else\r\n    {\r\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\r\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\r\n    }\r\n}\r\n\r\n\r\nFPU.prototype.fwait = function()\r\n{\r\n    // NOP unless FPU instructions run in parallel with CPU instructions\r\n};\r\n\r\n\r\nFPU.prototype.op_D8_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xD8, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7,\r\n        sti = this.get_sti(low),\r\n        st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + sti;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * sti;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(sti);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(sti);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - sti;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = sti - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / sti;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = sti / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_D8_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xD8, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        m32 = this.load_m32(addr);\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m32;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m32;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m32);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m32);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m32;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m32 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m32;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m32 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_D9_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xD9, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fld\r\n            var sti = this.get_sti(low);\r\n            this.push(sti);\r\n            break;\r\n        case 1:\r\n            // fxch\r\n            var sti = this.get_sti(low);\r\n\r\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\r\n            this.st[this.stack_ptr] = sti;\r\n            break;\r\n        case 2:\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // fnop\r\n                    break;\r\n                default:\r\n                    dbg_log(low);\r\n                    this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 3:\r\n            // fstp1\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 4:\r\n            var st0 = this.get_st0();\r\n\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // fchs\r\n                    this.st[this.stack_ptr] = -st0;\r\n                    break;\r\n                case 1:\r\n                    // fabs\r\n                    this.st[this.stack_ptr] = Math.abs(st0);\r\n                    break;\r\n                case 4:\r\n                    this.ftst(st0);\r\n                    break;\r\n                case 5:\r\n                    this.fxam(st0);\r\n                    break;\r\n                default:\r\n                    dbg_log(low);\r\n                    this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 5:\r\n            this.push(this.constants[low]);\r\n            break;\r\n        case 6:\r\n            var st0 = this.get_st0();\r\n\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // f2xm1\r\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\r\n                    break;\r\n                case 1:\r\n                    // fyl2x\r\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\r\n                    this.pop();\r\n                    break;\r\n                case 2:\r\n                    // fptan\r\n                    this.st[this.stack_ptr] = Math.tan(st0);\r\n                    this.push(1); // no bug: push constant 1\r\n                    break;\r\n                case 3:\r\n                    // fpatan\r\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\r\n                    this.pop();\r\n                    break;\r\n                case 4:\r\n                    this.fxtract();\r\n                    break;\r\n                case 5:\r\n                    // fprem1\r\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\r\n                    break;\r\n                case 6:\r\n                    // fdecstp\r\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\r\n                    this.status_word &= ~FPU_C1;\r\n                    break;\r\n                case 7:\r\n                    // fincstp\r\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\r\n                    this.status_word &= ~FPU_C1;\r\n                    break;\r\n                default:\r\n                    dbg_assert(false);\r\n            }\r\n            break;\r\n        case 7:\r\n            var st0 = this.get_st0();\r\n\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // fprem\r\n                    var st1 = this.get_sti(1);\r\n                    var fprem_quotient = Math.trunc(st0 / st1);\r\n                    this.st[this.stack_ptr] = st0 % st1;\r\n\r\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\r\n                    if (fprem_quotient & 1) {\r\n                        this.status_word |= FPU_C1;\r\n                    }\r\n                    if (fprem_quotient & (1 << 1)) {\r\n                        this.status_word |= FPU_C3;\r\n                    }\r\n                    if (fprem_quotient & (1 << 2)) {\r\n                        this.status_word |= FPU_C0;\r\n                    }\r\n\r\n                    this.status_word &= ~FPU_C2;\r\n                    break;\r\n                case 1:\r\n                    // fyl2xp1: y * log2(x+1) and pop\r\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\r\n                    this.pop();\r\n                    break;\r\n                case 2:\r\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\r\n                    break;\r\n                case 3:\r\n                    this.st[this.stack_ptr] = Math.sin(st0);\r\n                    this.push(Math.cos(st0));\r\n                    break;\r\n                case 4:\r\n                    // frndint\r\n                    this.st[this.stack_ptr] = this.integer_round(st0);\r\n                    break;\r\n                case 5:\r\n                    // fscale\r\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\r\n                    break;\r\n                case 6:\r\n                    this.st[this.stack_ptr] = Math.sin(st0);\r\n                    break;\r\n                case 7:\r\n                    this.st[this.stack_ptr] = Math.cos(st0);\r\n                    break;\r\n                default:\r\n                    dbg_assert(false);\r\n            }\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_D9_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xD9, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fld\r\n            var data = this.load_m32(addr);\r\n            this.push(data);\r\n            break;\r\n        case 1:\r\n            // not defined\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 2:\r\n            // fst\r\n            this.store_m32(addr, this.get_st0());\r\n            break;\r\n        case 3:\r\n            // fstp\r\n            this.store_m32(addr, this.get_st0());\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            this.fldenv(addr);\r\n            break;\r\n        case 5:\r\n            // fldcw\r\n            var word = this.cpu.safe_read16(addr);\r\n            this.control_word = word;\r\n            break;\r\n        case 6:\r\n            this.fstenv(addr);\r\n            break;\r\n        case 7:\r\n            // fstcw\r\n            this.cpu.safe_write16(addr, this.control_word);\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DA_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDA, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fcmovb\r\n            if(this.cpu.test_b())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 1:\r\n            // fcmove\r\n            if(this.cpu.test_z())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 2:\r\n            // fcmovbe\r\n            if(this.cpu.test_be())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fcmovu\r\n            if(this.cpu.test_p())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 5:\r\n            if(low === 1)\r\n            {\r\n                // fucompp\r\n                this.fucom(this.get_sti(1));\r\n                this.pop();\r\n                this.pop();\r\n            }\r\n            else\r\n            {\r\n                dbg_log(mod); this.fpu_unimpl();\r\n            }\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DA_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDA, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        m32 = this.cpu.safe_read32s(addr);\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m32;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m32;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m32);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m32);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m32;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m32 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m32;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m32 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DB_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDB, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fcmovnb\r\n            if(!this.cpu.test_b())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 1:\r\n            // fcmovne\r\n            if(!this.cpu.test_z())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 2:\r\n            // fcmovnbe\r\n            if(!this.cpu.test_be())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fcmovnu\r\n            if(!this.cpu.test_p())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 4:\r\n            if(imm8 === 0xE3)\r\n            {\r\n                this.finit();\r\n            }\r\n            else if(imm8 === 0xE4)\r\n            {\r\n                // fsetpm\r\n                // treat as nop\r\n            }\r\n            else if(imm8 === 0xE1)\r\n            {\r\n                // fdisi\r\n                // also treat as nop\r\n            }\r\n            else if(imm8 === 0xE2)\r\n            {\r\n                // fclex\r\n                this.status_word = 0;\r\n            }\r\n            else\r\n            {\r\n                dbg_log(h(imm8));\r\n                this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 5:\r\n            this.fucomi(this.get_sti(low));\r\n            break;\r\n        case 6:\r\n            this.fcomi(this.get_sti(low));\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DB_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDB, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fild\r\n            var int32 = this.cpu.safe_read32s(addr);\r\n            this.push(int32);\r\n            break;\r\n        case 2:\r\n            // fist\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\r\n            {\r\n                // TODO: Invalid operation\r\n                this.cpu.safe_write32(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write32(addr, 0x80000000|0);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fistp\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\r\n            {\r\n                this.cpu.safe_write32(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write32(addr, 0x80000000|0);\r\n            }\r\n            this.pop();\r\n            break;\r\n        case 5:\r\n            // fld\r\n            this.push(this.load_m80(addr));\r\n            break;\r\n        case 7:\r\n            // fstp\r\n            this.cpu.writable_or_pagefault(addr, 10);\r\n            this.store_m80(addr, this.get_st0());\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DC_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDC, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7,\r\n        low_ptr = this.stack_ptr + low & 7,\r\n        sti = this.get_sti(low),\r\n        st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[low_ptr] = sti + st0;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[low_ptr] = sti * st0;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(sti);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(sti);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsubr\r\n            this.st[low_ptr] = st0 - sti;\r\n            break;\r\n        case 5:\r\n            // fsub\r\n            this.st[low_ptr] = sti - st0;\r\n            break;\r\n        case 6:\r\n            // fdivr\r\n            this.st[low_ptr] = st0 / sti;\r\n            break;\r\n        case 7:\r\n            // fdiv\r\n            this.st[low_ptr] = sti / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DC_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDC, imm8);\r\n\r\n    var\r\n        mod = imm8 >> 3 & 7,\r\n        m64 = this.load_m64(addr);\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m64;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m64;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m64);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m64);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m64;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m64 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m64;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m64 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DD_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDD, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // ffree\r\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\r\n            break;\r\n        case 2:\r\n            // fst\r\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\r\n            break;\r\n        case 3:\r\n            // fstp\r\n            if(low === 0)\r\n            {\r\n                this.pop();\r\n            }\r\n            else\r\n            {\r\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\r\n                this.pop();\r\n            }\r\n            break;\r\n        case 4:\r\n            this.fucom(this.get_sti(low));\r\n            break;\r\n        case 5:\r\n            // fucomp\r\n            this.fucom(this.get_sti(low));\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DD_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDD, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fld\r\n            var data = this.load_m64(addr);\r\n            this.push(data);\r\n            break;\r\n        case 1:\r\n            // fisttp\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 2:\r\n            // fst\r\n            this.store_m64(addr, 0);\r\n            break;\r\n        case 3:\r\n            // fstp\r\n            this.store_m64(addr, 0);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            this.frstor(addr);\r\n            break;\r\n        case 5:\r\n            // nothing\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 6:\r\n            // fsave\r\n            this.fsave(addr);\r\n            break;\r\n        case 7:\r\n            // fnstsw / store status word\r\n            this.cpu.safe_write16(addr, this.load_status_word());\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\n\r\nFPU.prototype.op_DE_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDE, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7,\r\n        low_ptr = this.stack_ptr + low & 7,\r\n        sti = this.get_sti(low),\r\n        st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // faddp\r\n            this.st[low_ptr] = sti + st0;\r\n            break;\r\n        case 1:\r\n            // fmulp\r\n            this.st[low_ptr] = sti * st0;\r\n            break;\r\n        case 2:\r\n            // fcomp\r\n            this.fcom(sti);\r\n            break;\r\n        case 3:\r\n            // fcompp\r\n            if(low === 1)\r\n            {\r\n                this.fcom(this.st[low_ptr]);\r\n                this.pop();\r\n            }\r\n            else\r\n            {\r\n                // not a valid encoding\r\n                dbg_log(mod);\r\n                this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 4:\r\n            // fsubrp\r\n            this.st[low_ptr] = st0 - sti;\r\n            break;\r\n        case 5:\r\n            // fsubp\r\n            this.st[low_ptr] = sti - st0;\r\n            break;\r\n        case 6:\r\n            // fdivrp\r\n            this.st[low_ptr] = st0 / sti;\r\n            break;\r\n        case 7:\r\n            // fdivp\r\n            this.st[low_ptr] = sti / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n\r\n    this.pop();\r\n};\r\n\r\nFPU.prototype.op_DE_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDE, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m16;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m16;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m16);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m16);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m16;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m16 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m16;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m16 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DF_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDF, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 4:\r\n            if(imm8 === 0xE0)\r\n            {\r\n                // fnstsw\r\n                this.cpu.reg16[reg_ax] = this.load_status_word();\r\n            }\r\n            else\r\n            {\r\n                dbg_log(imm8);\r\n                this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 5:\r\n            // fucomip\r\n            this.fucomi(this.get_sti(low));\r\n            this.pop();\r\n            break;\r\n        case 6:\r\n            // fcomip\r\n            this.fcomi(this.get_sti(low));\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DF_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDF, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\r\n\r\n            this.push(m16);\r\n            break;\r\n        case 1:\r\n            // fisttp\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 2:\r\n            // fist\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\r\n            {\r\n                this.cpu.safe_write16(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write16(addr, 0x8000);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fistp\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\r\n            {\r\n                this.cpu.safe_write16(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write16(addr, 0x8000);\r\n            }\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fbld\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 5:\r\n            // fild\r\n            var low = this.cpu.safe_read32s(addr) >>> 0,\r\n                high = this.cpu.safe_read32s(addr + 4);\r\n\r\n            var m64 = low + 0x100000000 * high;\r\n\r\n            this.push(m64);\r\n            break;\r\n        case 6:\r\n            // fbstp\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 7:\r\n            this.cpu.writable_or_pagefault(addr, 8);\r\n\r\n            // fistp\r\n            var st0 = this.integer_round(this.get_st0()),\r\n                st0_low,\r\n                st0_high;\r\n\r\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\r\n            {\r\n                st0_low = st0 | 0;\r\n                st0_high = st0 / 0x100000000 | 0;\r\n\r\n                if(st0_high === 0 && st0 < 0)\r\n                    st0_high = -1;\r\n            }\r\n            else\r\n            {\r\n                // write 0x8000000000000000\r\n                st0_low  = 0;\r\n                st0_high = 0x80000000 | 0;\r\n                this.invalid_arithmatic();\r\n            }\r\n\r\n            this.cpu.safe_write32(addr, st0_low);\r\n            this.cpu.safe_write32(addr + 4, st0_high);\r\n\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @param {number=} length */\r\nfunction hex_dump(buffer, length)\r\n{\r\n    var result = [];\r\n    length = length || buffer.byteLength;\r\n    var addr = 0;\r\n    var line, byt;\r\n\r\n    for(var i = 0; i < length >> 4; i++)\r\n    {\r\n        line = h(addr + (i << 4), 5) + \"   \";\r\n\r\n        for(var j = 0; j < 0x10; j++)\r\n        {\r\n            byt = buffer[addr + (i << 4) + j];\r\n            line += h(byt, 2) + \" \";\r\n        }\r\n\r\n        line += \"  \";\r\n\r\n        for(j = 0; j < 0x10; j++)\r\n        {\r\n            byt = buffer[addr + (i << 4) + j];\r\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\r\n        }\r\n\r\n        result.push(line);\r\n    }\r\n\r\n    return \"\\n\" + result.join(\"\\n\");\r\n}\r\n\r\n/** @const */\r\nvar CDROM_SECTOR_SIZE = 2048;\r\n/** @const */\r\nvar HD_SECTOR_SIZE = 512;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {boolean} is_cd\r\n * @param {number} nr\r\n * @param {BusConnector} bus\r\n * */\r\nfunction IDEDevice(cpu, master_buffer, slave_buffer, is_cd, nr, bus)\r\n{\r\n    this.master = new IDEInterface(this, cpu, master_buffer, is_cd, nr, 0, bus);\r\n    this.slave = new IDEInterface(this, cpu, slave_buffer, is_cd, nr, 1, bus);\r\n\r\n    this.current_interface = this.master;\r\n\r\n    this.cpu = cpu;\r\n\r\n    // gets set via PCI in seabios, likely doesn't matter\r\n    if(nr === 0)\r\n    {\r\n        this.ata_port = 0x1F0;\r\n        this.irq = 14;\r\n\r\n        this.pci_id = 0x1E << 3;\r\n    }\r\n    else if(nr === 1)\r\n    {\r\n        this.ata_port = 0x170;\r\n        this.irq = 15;\r\n\r\n        this.pci_id = 0x1F << 3;\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\r\n    }\r\n\r\n    // alternate status, starting at 3f4/374\r\n    /** @type {number} */\r\n    this.ata_port_high = this.ata_port | 0x204;\r\n\r\n    /** @type {number} */\r\n    this.master_port = 0xB400;\r\n\r\n    this.pci_space = [\r\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\r\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\r\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\r\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, // second device\r\n        0x00, 0x00, 0x00, 0x00, // second device\r\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00,\r\n        0x43, 0x10, 0xD4, 0x82,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\r\n\r\n        // 0x40\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        // 0x80\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    ];\r\n    this.pci_bars = [\r\n        {\r\n            size: 8,\r\n        },\r\n        {\r\n            size: 4,\r\n        },\r\n        undefined,\r\n        undefined,\r\n        {\r\n            size: 0x10,\r\n        },\r\n    ];\r\n    this.name = \"ide\" + nr;\r\n\r\n    /** @type {number} */\r\n    this.device_control = 2;\r\n\r\n    // status\r\n    cpu.io.register_read(this.ata_port | 7, this, function() {\r\n        dbg_log(\"lower irq\", LOG_DISK);\r\n        this.cpu.device_lower_irq(this.irq);\r\n        return this.read_status();\r\n    });\r\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\r\n\r\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\r\n    cpu.io.register_read(this.ata_port | 0, this, function()\r\n    {\r\n        return this.current_interface.read_data(1);\r\n    }, function()\r\n    {\r\n        return this.current_interface.read_data(2);\r\n    }, function()\r\n    {\r\n        return this.current_interface.read_data(4);\r\n    });\r\n\r\n    cpu.io.register_read(this.ata_port | 1, this, function()\r\n    {\r\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\r\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\r\n        return this.current_interface.error;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 2, this, function()\r\n    {\r\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\r\n        return this.current_interface.bytecount & 0xFF;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 3, this, function()\r\n    {\r\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\r\n        return this.current_interface.sector & 0xFF;\r\n    });\r\n\r\n    cpu.io.register_read(this.ata_port | 4, this, function()\r\n    {\r\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\r\n        return this.current_interface.cylinder_low & 0xFF;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 5, this, function()\r\n    {\r\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\r\n        return this.current_interface.cylinder_high & 0xFF;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 6, this, function()\r\n    {\r\n        dbg_log(\"Read 1F6\", LOG_DISK);\r\n        return this.current_interface.drive_head;\r\n    });\r\n\r\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\r\n    {\r\n        this.current_interface.write_data_port8(data);\r\n    }, function(data)\r\n    {\r\n        this.current_interface.write_data_port16(data);\r\n    }, function(data)\r\n    {\r\n        this.current_interface.write_data_port32(data);\r\n    });\r\n\r\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\r\n    {\r\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\r\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\r\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\r\n    {\r\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\r\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\r\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\r\n    {\r\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\r\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\r\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\r\n    });\r\n\r\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\r\n    {\r\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\r\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\r\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\r\n    {\r\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\r\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\r\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\r\n    {\r\n        var slave = data & 0x10;\r\n        var mode = data & 0xE0;\r\n\r\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\r\n\r\n        if(slave)\r\n        {\r\n            dbg_log(\"Slave\", LOG_DISK);\r\n            this.current_interface = this.slave;\r\n        }\r\n        else\r\n        {\r\n            this.current_interface = this.master;\r\n        }\r\n\r\n        this.master.drive_head = data;\r\n        this.slave.drive_head = data;\r\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\r\n        this.master.head = this.slave.head = data & 0xF;\r\n    });\r\n\r\n    /** @type {number} */\r\n    this.prdt_addr = 0;\r\n\r\n    /** @type {number} */\r\n    this.dma_status = 0;\r\n\r\n    /** @type {number} */\r\n    this.dma_command = 0;\r\n\r\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\r\n    {\r\n        dbg_log(\"lower irq\", LOG_DISK);\r\n        this.cpu.device_lower_irq(this.irq);\r\n        this.current_interface.ata_command(data);\r\n    });\r\n\r\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\r\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\r\n\r\n    cpu.io.register_read(this.master_port, this,\r\n                         this.dma_read_command8, undefined, this.dma_read_command);\r\n    cpu.io.register_write(this.master_port, this,\r\n                          this.dma_write_command8, undefined, this.dma_write_command);\r\n\r\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\r\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\r\n\r\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\r\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\r\n    });\r\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\r\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\r\n    });\r\n\r\n    cpu.devices.pci.register_device(this);\r\n\r\n    DEBUG && Object.seal(this);\r\n}\r\n\r\nIDEDevice.prototype.read_status = function()\r\n{\r\n    if(this.current_interface.buffer)\r\n    {\r\n        var ret = this.current_interface.status;\r\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\r\n        return ret;\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n};\r\n\r\nIDEDevice.prototype.write_control = function(data)\r\n{\r\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\r\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\r\n\r\n    if(data & 4)\r\n    {\r\n        dbg_log(\"Reset via control port\", LOG_DISK);\r\n\r\n        this.cpu.device_lower_irq(this.irq);\r\n\r\n        this.master.device_reset();\r\n        this.slave.device_reset();\r\n    }\r\n\r\n    this.device_control = data;\r\n};\r\n\r\nIDEDevice.prototype.dma_read_addr = function()\r\n{\r\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\r\n    return this.prdt_addr;\r\n};\r\n\r\nIDEDevice.prototype.dma_set_addr = function(data)\r\n{\r\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\r\n    this.prdt_addr = data;\r\n};\r\n\r\nIDEDevice.prototype.dma_read_status = function()\r\n{\r\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\r\n    return this.dma_status;\r\n};\r\n\r\nIDEDevice.prototype.dma_write_status = function(value)\r\n{\r\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\r\n    this.dma_status &= ~(value & 6);\r\n};\r\n\r\nIDEDevice.prototype.dma_read_command = function()\r\n{\r\n    return this.dma_read_command8() | this.dma_read_status() << 16;\r\n};\r\n\r\nIDEDevice.prototype.dma_read_command8 = function()\r\n{\r\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\r\n    return this.dma_command;\r\n};\r\n\r\nIDEDevice.prototype.dma_write_command = function(value)\r\n{\r\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\r\n\r\n    this.dma_write_command8(value & 0xFF);\r\n    this.dma_write_status(value >> 16 & 0xFF);\r\n};\r\n\r\nIDEDevice.prototype.dma_write_command8 = function(value)\r\n{\r\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\r\n\r\n    let old_command = this.dma_command;\r\n    this.dma_command = value & 0x9;\r\n\r\n    if((old_command & 1) === (value & 1))\r\n    {\r\n        return;\r\n    }\r\n\r\n    if((value & 1) === 0)\r\n    {\r\n        this.dma_status &= ~1;\r\n        return;\r\n    }\r\n\r\n    this.dma_status |= 1;\r\n\r\n    switch(this.current_interface.current_command)\r\n    {\r\n        case 0x25:\r\n        case 0xC8:\r\n            this.current_interface.do_ata_read_sectors_dma();\r\n            break;\r\n\r\n        case 0xCA:\r\n        case 0x35:\r\n            this.current_interface.do_ata_write_sectors_dma();\r\n            break;\r\n\r\n        case 0xA0:\r\n            this.current_interface.do_atapi_dma();\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"Spurious dma command write, current command: \" +\r\n                    h(this.current_interface.current_command), LOG_DISK);\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nIDEDevice.prototype.push_irq = function()\r\n{\r\n    if((this.device_control & 2) === 0)\r\n    {\r\n        dbg_log(\"push irq\", LOG_DISK);\r\n        this.dma_status |= 4;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    }\r\n};\r\n\r\nIDEDevice.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n    state[0] = this.master;\r\n    state[1] = this.slave;\r\n    state[2] = this.ata_port;\r\n    state[3] = this.irq;\r\n    state[4] = this.pci_id;\r\n    state[5] = this.ata_port_high;\r\n    state[6] = this.master_port;\r\n    state[7] = this.name;\r\n    state[8] = this.device_control;\r\n    state[9] = this.prdt_addr;\r\n    state[10] = this.dma_status;\r\n    state[11] = this.current_interface === this.master;\r\n    state[12] = this.dma_command;\r\n    return state;\r\n};\r\n\r\nIDEDevice.prototype.set_state = function(state)\r\n{\r\n    this.master = state[0];\r\n    this.slave = state[1];\r\n    this.ata_port = state[2];\r\n    this.irq = state[3];\r\n    this.pci_id = state[4];\r\n    this.ata_port_high = state[5];\r\n    this.master_port = state[6];\r\n    this.name = state[7];\r\n    this.device_control = state[8];\r\n    this.prdt_addr = state[9];\r\n    this.dma_status = state[10];\r\n    this.current_interface = state[11] ? this.master : this.slave;\r\n    this.dma_command = state[12];\r\n};\r\n\r\n\r\n/**\r\n * @constructor\r\n */\r\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\r\n{\r\n    this.device = device;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    /**\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.nr = device_nr;\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.buffer = buffer;\r\n\r\n    /** @type {number} */\r\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\r\n\r\n    /** @type {boolean} */\r\n    this.is_atapi = is_cd;\r\n\r\n    /** @type {number} */\r\n    this.sector_count = 0;\r\n\r\n    /** @type {number} */\r\n    this.head_count = 0;\r\n\r\n    /** @type {number} */\r\n    this.sectors_per_track = 0;\r\n\r\n    /** @type {number} */\r\n    this.cylinder_count = 0;\r\n\r\n    if(this.buffer)\r\n    {\r\n        this.sector_count = this.buffer.byteLength / this.sector_size;\r\n\r\n        if(this.sector_count !== (this.sector_count | 0))\r\n        {\r\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\r\n            this.sector_count = Math.ceil(this.sector_count);\r\n        }\r\n\r\n        if(is_cd)\r\n        {\r\n            this.head_count = 1;\r\n            this.sectors_per_track = 0;\r\n        }\r\n        else\r\n        {\r\n            // \"default\" values: 16/63\r\n            // common: 255, 63\r\n            this.head_count = 16;\r\n            this.sectors_per_track = 63;\r\n        }\r\n\r\n\r\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\r\n\r\n        if(this.cylinder_count !== (this.cylinder_count | 0))\r\n        {\r\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\r\n            this.cylinder_count = Math.floor(this.cylinder_count);\r\n            //this.sector_count = this.cylinder_count * this.head_count *\r\n            //                        this.sectors_per_track * this.sector_size;\r\n        }\r\n\r\n        //if(this.cylinder_count > 16383)\r\n        //{\r\n        //    this.cylinder_count = 16383;\r\n        //}\r\n\r\n        // disk translation: lba\r\n        var rtc = cpu.devices.rtc;\r\n\r\n        // master\r\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\r\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\r\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\r\n\r\n        var reg = CMOS_DISK_DRIVE1_CYL;\r\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\r\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\r\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\r\n        rtc.cmos_write(reg + 3, 0xFF);\r\n        rtc.cmos_write(reg + 4, 0xFF);\r\n        rtc.cmos_write(reg + 5, 0xC8);\r\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\r\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\r\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\r\n\r\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\r\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\r\n    }\r\n\r\n    /** @const */\r\n    this.stats = {\r\n        sectors_read: 0,\r\n        sectors_written: 0,\r\n        bytes_read: 0,\r\n        bytes_written: 0,\r\n        loading: false,\r\n    };\r\n\r\n\r\n    this.buffer = buffer;\r\n\r\n    /** @type {number} */\r\n    this.is_lba = 0;\r\n\r\n    /** @type {number} */\r\n    this.bytecount = 0;\r\n\r\n    /** @type {number} */\r\n    this.sector = 0;\r\n\r\n    /** @type {number} */\r\n    this.lba_count = 0;\r\n\r\n    /** @type {number} */\r\n    this.cylinder_low = 0;\r\n\r\n    /** @type {number} */\r\n    this.cylinder_high = 0;\r\n\r\n    /** @type {number} */\r\n    this.head = 0;\r\n\r\n    /** @type {number} */\r\n    this.drive_head = 0;\r\n\r\n    /** @type {number} */\r\n    this.status = 0x50;\r\n\r\n    /** @type {number} */\r\n    this.sectors_per_drq = 0x80;\r\n\r\n    /** @type {number} */\r\n    this.error = 0;\r\n\r\n    /** @type {number} */\r\n    this.data_pointer = 0;\r\n\r\n    this.data = new Uint8Array(64 * 1024);\r\n    this.data16 = new Uint16Array(this.data.buffer);\r\n    this.data32 = new Int32Array(this.data.buffer);\r\n\r\n    /** @type {number} */\r\n    this.data_length = 0;\r\n\r\n    /** @type {number} */\r\n    this.data_end = 0;\r\n\r\n    /** @type {number} */\r\n    this.current_command = -1;\r\n\r\n    /** @type {number} */\r\n    this.current_atapi_command = -1;\r\n\r\n    /** @type {number} */\r\n    this.write_dest = 0;\r\n\r\n    Object.seal(this);\r\n}\r\n\r\nIDEInterface.prototype.device_reset = function()\r\n{\r\n    if(this.is_atapi)\r\n    {\r\n        this.status = 0;\r\n        this.bytecount = 1;\r\n        this.error = 1;\r\n        this.sector = 1; // lba_low\r\n        this.cylinder_low = 0x14; // lba_mid\r\n        this.cylinder_high = 0xEB; // lba_high\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x50 | 1;\r\n        this.bytecount = 1;\r\n        this.error = 1;\r\n        this.sector = 1; // lba_low\r\n\r\n        // 0, 0 needed by bochs bios\r\n        this.cylinder_low = 0; // lba_mid\r\n        this.cylinder_high = 0; // lba_high\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.push_irq = function()\r\n{\r\n    this.device.push_irq();\r\n};\r\n\r\nIDEInterface.prototype.ata_command = function(cmd)\r\n{\r\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\r\n\r\n    if(!this.buffer)\r\n    {\r\n        dbg_log(\"abort: No buffer\", LOG_DISK);\r\n        this.error = 4;\r\n        this.status = 0x41;\r\n        this.push_irq();\r\n        return;\r\n    }\r\n\r\n    this.current_command = cmd;\r\n    this.error = 0;\r\n\r\n    switch(cmd)\r\n    {\r\n        case 0x08:\r\n            dbg_log(\"ATA device reset\", LOG_DISK);\r\n            this.data_pointer = 0;\r\n            this.data_end = 0;\r\n            this.data_length = 0;\r\n            this.device_reset();\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x10:\r\n            // calibrate drive\r\n            this.status = 0x50;\r\n            this.cylinder_low = 0;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xF8:\r\n            // read native max address\r\n            this.status = 0x50;\r\n            var last_sector = this.sector_count - 1;\r\n            this.sector = last_sector & 0xFF;\r\n            this.cylinder_low = last_sector >> 8 & 0xFF;\r\n            this.cylinder_high = last_sector >> 16 & 0xFF;\r\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x27:\r\n            // read native max address ext\r\n            this.status = 0x50;\r\n            var last_sector = this.sector_count - 1;\r\n            this.sector = last_sector & 0xFF;\r\n            this.cylinder_low = last_sector >> 8 & 0xFF;\r\n            this.cylinder_high = last_sector >> 16 & 0xFF;\r\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x20:\r\n        case 0x24:\r\n        case 0x29:\r\n        case 0xC4:\r\n            // 0x20 read sectors\r\n            // 0x24 read sectors ext\r\n            // 0xC4 read multiple\r\n            // 0x29 read multiple ext\r\n            this.ata_read_sectors(cmd);\r\n            break;\r\n\r\n        case 0x30:\r\n        case 0x34:\r\n        case 0x39:\r\n        case 0xC5:\r\n            // 0x30 write sectors\r\n            // 0x34 write sectors ext\r\n            // 0xC5 write multiple\r\n            // 0x39 write multiple ext\r\n            this.ata_write_sectors(cmd);\r\n            break;\r\n\r\n        case 0x90:\r\n            // execute device diagnostic\r\n            this.push_irq();\r\n            this.error = 0x101;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x91:\r\n            // initialize device parameters\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xA0:\r\n            // ATA packet\r\n            if(this.is_atapi)\r\n            {\r\n                this.status = 0x58;\r\n                this.data_allocate(12);\r\n                this.data_end = 12;\r\n                this.bytecount = 1;\r\n                this.push_irq();\r\n            }\r\n            break;\r\n\r\n        case 0xA1:\r\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\r\n\r\n            if(this.is_atapi)\r\n            {\r\n                this.create_identify_packet();\r\n                this.status = 0x58;\r\n\r\n                this.cylinder_low = 0x14;\r\n                this.cylinder_high = 0xEB;\r\n\r\n                this.push_irq();\r\n            }\r\n            else\r\n            {\r\n                this.status = 0x41;\r\n                this.push_irq();\r\n            }\r\n            break;\r\n\r\n        case 0xC6:\r\n            // set multiple mode\r\n            // Logical sectors per DRQ Block in word 1\r\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\r\n            this.sectors_per_drq = this.bytecount & 0xFF;\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x25: // read dma ext\r\n        case 0xC8: // read dma\r\n            this.ata_read_sectors_dma(cmd);\r\n            break;\r\n\r\n        case 0x35: // write dma ext\r\n        case 0xCA: // write dma\r\n            this.ata_write_sectors_dma(cmd);\r\n            break;\r\n\r\n        case 0x40:\r\n            dbg_log(\"read verify sectors\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xDA:\r\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\r\n            this.status = 0x41;\r\n            this.error = 4;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xE0:\r\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xE1:\r\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xE7:\r\n            dbg_log(\"ATA flush cache\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xEC:\r\n            dbg_log(\"ATA identify device\", LOG_DISK);\r\n\r\n            if(this.is_atapi)\r\n            {\r\n                this.status = 0x41;\r\n                this.error = 4;\r\n                this.push_irq();\r\n                return;\r\n            }\r\n\r\n            this.create_identify_packet();\r\n            this.status = 0x58;\r\n\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xEA:\r\n            dbg_log(\"flush cache ext\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xEF:\r\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xF5:\r\n            dbg_log(\"security freeze lock\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xF9:\r\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\r\n            this.status = 0x41;\r\n            this.error = 4;\r\n            break;\r\n\r\n        default:\r\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\r\n\r\n            this.status = 0x41;\r\n            // abort bit set\r\n            this.error = 4;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.atapi_handle = function()\r\n{\r\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\r\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\r\n\r\n    this.data_pointer = 0;\r\n    this.current_atapi_command = this.data[0];\r\n\r\n    switch(this.current_atapi_command)\r\n    {\r\n        case 0x00:\r\n            dbg_log(\"test unit ready\", LOG_DISK);\r\n            // test unit ready\r\n            this.data_allocate(0);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x03:\r\n            // request sense\r\n            this.data_allocate(this.data[4]);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n\r\n            this.data[0] = 0x80 | 0x70;\r\n            this.data[2] = 5; // illegal request\r\n            this.data[7] = 8;\r\n            break;\r\n\r\n        case 0x12:\r\n            // inquiry\r\n            var length = this.data[4];\r\n            this.status = 0x58;\r\n\r\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\r\n\r\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\r\n            //this.data_allocate(36);\r\n            this.data.set([\r\n                0x05, 0x80, 0x01, 0x31,\r\n                // additional length\r\n                31,\r\n                0, 0, 0,\r\n\r\n                // 8\r\n                0x53, 0x4F, 0x4E, 0x59,\r\n                0x20, 0x20, 0x20, 0x20,\r\n\r\n                // 16\r\n                0x43, 0x44, 0x2D, 0x52,\r\n                0x4F, 0x4D, 0x20, 0x43,\r\n                0x44, 0x55, 0x2D, 0x31,\r\n                0x30, 0x30, 0x30, 0x20,\r\n\r\n                // 32\r\n                0x31, 0x2E, 0x31, 0x61,\r\n            ]);\r\n            this.data_end = this.data_length = Math.min(36, length);\r\n            break;\r\n\r\n        case 0x1A:\r\n            // mode sense (6)\r\n            this.data_allocate(this.data[4]);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x1E:\r\n            // prevent/allow medium removal\r\n            this.data_allocate(0);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x25:\r\n            // read capacity\r\n            var count = this.sector_count - 1;\r\n            this.data_set(new Uint8Array([\r\n                count >> 24 & 0xFF,\r\n                count >> 16 & 0xFF,\r\n                count >> 8 & 0xFF,\r\n                count & 0xFF,\r\n                0,\r\n                0,\r\n                this.sector_size >> 8 & 0xFF,\r\n                this.sector_size & 0xFF,\r\n            ]));\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x28:\r\n            // read\r\n            if(this.lba_count & 1)\r\n            {\r\n                this.atapi_read_dma(this.data);\r\n            }\r\n            else\r\n            {\r\n                this.atapi_read(this.data);\r\n            }\r\n            break;\r\n\r\n        case 0x42:\r\n            var length = this.data[8];\r\n            this.data_allocate(Math.min(8, length));\r\n            this.data_end = this.data_length;\r\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x43:\r\n            // read toc\r\n            var length = this.data[8] | this.data[7] << 8;\r\n            var format = this.data[9] >> 6;\r\n\r\n            this.data_allocate(length);\r\n            this.data_end = this.data_length;\r\n            dbg_log(\"read toc: \" + h(format, 2) +\r\n                    \" length=\" + length +\r\n                    \" \" + (this.data[1] & 2) +\r\n                    \" \" + h(this.data[6]), LOG_DISK);\r\n\r\n            if(format === 0)\r\n            {\r\n                var sector_count = this.sector_count;\r\n                this.data.set(new Uint8Array([\r\n                    0, 18, // length\r\n                    1, 1, // first and last session\r\n\r\n                    0,\r\n                    0x14,\r\n                    1, // track number\r\n                    0,\r\n                    0, 0, 0, 0,\r\n\r\n                    0,\r\n                    0x16,\r\n                    0xAA, // track number\r\n                    0,\r\n                    sector_count >> 24,\r\n                    sector_count >> 16 & 0xFF,\r\n                    sector_count >> 8 & 0xFF,\r\n                    sector_count & 0xFF,\r\n                ]));\r\n            }\r\n            else if(format === 1)\r\n            {\r\n                this.data.set(new Uint8Array([\r\n                    0, 10, // length\r\n                    1, 1, // first and last session\r\n                    0, 0,\r\n                    0, 0,\r\n                    0, 0,\r\n                    0, 0,\r\n                ]));\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(false, \"Unimplemented format: \" + format);\r\n            }\r\n\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x46:\r\n            // get configuration\r\n            var length = this.data[8] | this.data[7] << 8;\r\n            length = Math.min(length, 32);\r\n            this.data_allocate(length);\r\n            this.data_end = this.data_length;\r\n            this.data[0] = length - 4 >> 24 & 0xFF;\r\n            this.data[1] = length - 4 >> 16 & 0xFF;\r\n            this.data[2] = length - 4 >> 8 & 0xFF;\r\n            this.data[3] = length - 4 & 0xFF;\r\n            this.data[6] = 0x08;\r\n            this.data[10] = 3;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x51:\r\n            // read disk information\r\n            this.data_allocate(0);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x52:\r\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\r\n            this.status = 0x51;\r\n            this.data_length = 0;\r\n            this.error = 5 << 4;\r\n            break;\r\n\r\n        case 0x5A:\r\n            // mode sense\r\n            var length = this.data[8] | this.data[7] << 8;\r\n            var page_code = this.data[2];\r\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\r\n            if(page_code === 0x2A)\r\n            {\r\n                this.data_allocate(Math.min(30, length));\r\n            }\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0xBD:\r\n            // mechanism status\r\n            this.data_allocate(this.data[9] | this.data[8] << 8);\r\n            this.data_end = this.data_length;\r\n            this.data[5] = 1;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x4A:\r\n            this.status = 0x51;\r\n            this.data_length = 0;\r\n            this.error = 5 << 4;\r\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\r\n            break;\r\n\r\n        default:\r\n            this.status = 0x51;\r\n            this.data_length = 0;\r\n            this.error = 5 << 4;\r\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\r\n            dbg_assert(false);\r\n    }\r\n\r\n    this.bytecount = this.bytecount & ~7 | 2;\r\n\r\n    if((this.status & 0x80) === 0)\r\n    {\r\n        this.push_irq();\r\n    }\r\n\r\n    if((this.status & 0x80) === 0 && this.data_length === 0)\r\n    {\r\n        this.bytecount |= 1;\r\n        this.status &= ~8;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.do_write = function()\r\n{\r\n    this.status = 0x50;\r\n\r\n    dbg_assert(this.data_length <= this.data.length);\r\n    var data = this.data.subarray(0, this.data_length);\r\n\r\n    //dbg_log(hex_dump(data), LOG_DISK);\r\n    dbg_assert(this.data_length % 512 === 0);\r\n    this.ata_advance(this.current_command, this.data_length / 512);\r\n    this.push_irq();\r\n\r\n    this.buffer.set(this.write_dest, data, function()\r\n    {\r\n    });\r\n\r\n    this.report_write(this.data_length);\r\n};\r\n\r\nIDEInterface.prototype.atapi_read = function(cmd)\r\n{\r\n    // Note: Big Endian\r\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\r\n    var count = cmd[7] << 8 | cmd[8];\r\n    var flags = cmd[1];\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"CD read lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count) +\r\n            \" flags=\" + h(flags), LOG_DISK);\r\n\r\n    this.data_length = 0;\r\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\r\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\r\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\r\n\r\n    if(req_length === 0xFFFF)\r\n        req_length--;\r\n\r\n    if(req_length > byte_count)\r\n    {\r\n        req_length = byte_count;\r\n    }\r\n\r\n    if(start >= this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\r\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else if(byte_count === 0)\r\n    {\r\n        this.status = 0x50;\r\n\r\n        this.data_pointer = 0;\r\n        //this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\r\n        this.status = 0x50 | 0x80;\r\n        this.report_read_start();\r\n\r\n        this.buffer.get(start, byte_count, (data) =>\r\n        {\r\n            //setTimeout(() => {\r\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\r\n            this.data_set(data);\r\n            this.status = 0x58;\r\n            this.bytecount = this.bytecount & ~7 | 2;\r\n\r\n            this.push_irq();\r\n\r\n            req_length &= ~3;\r\n\r\n            this.data_end = req_length;\r\n            if(this.data_end > this.data_length)\r\n            {\r\n                this.data_end = this.data_length;\r\n            }\r\n            this.cylinder_low = this.data_end & 0xFF;\r\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\r\n\r\n            this.report_read_end(byte_count);\r\n            //}, 10);\r\n        });\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.atapi_read_dma = function(cmd)\r\n{\r\n    // Note: Big Endian\r\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\r\n    var count = cmd[7] << 8 | cmd[8];\r\n    var flags = cmd[1];\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count) +\r\n            \" flags=\" + h(flags), LOG_DISK);\r\n\r\n    if(start >= this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\r\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x50 | 0x80;\r\n        this.report_read_start();\r\n\r\n        this.buffer.get(start, byte_count, (data) =>\r\n        {\r\n            dbg_log(\"atapi_read_dma: Data arrived\");\r\n            this.report_read_end(byte_count);\r\n            this.status = 0x58;\r\n            this.bytecount = this.bytecount & ~7 | 2;\r\n            this.data_set(data);\r\n\r\n            this.do_atapi_dma();\r\n        });\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.do_atapi_dma = function()\r\n{\r\n    if((this.device.dma_status & 1) === 0)\r\n    {\r\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\r\n        return;\r\n    }\r\n\r\n    if((this.status & 0x8) === 0)\r\n    {\r\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\r\n        return;\r\n    }\r\n\r\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\r\n\r\n    var prdt_start = this.device.prdt_addr;\r\n    var offset = 0;\r\n\r\n    var data = this.data;\r\n\r\n    do {\r\n        var addr = this.cpu.read32s(prdt_start);\r\n        var count = this.cpu.read16(prdt_start + 4);\r\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\r\n\r\n        if(!count)\r\n        {\r\n            count = 0x10000;\r\n        }\r\n\r\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\r\n        this.cpu.write_blob(data.subarray(offset,\r\n            Math.min(offset + count, this.data_length)), addr);\r\n\r\n        offset += count;\r\n        prdt_start += 8;\r\n\r\n        if(offset >= this.data_length && !end)\r\n        {\r\n            dbg_log(\"leave early end=\" + (+end) +\r\n                    \" offset=\" + h(offset) +\r\n                    \" data_length=\" + h(this.data_length) +\r\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\r\n            break;\r\n        }\r\n    }\r\n    while(!end);\r\n\r\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\r\n\r\n    this.status = 0x50;\r\n    this.device.dma_status &= ~1;\r\n    this.bytecount = this.bytecount & ~7 | 3;\r\n    this.push_irq();\r\n};\r\n\r\nIDEInterface.prototype.read_data = function(length)\r\n{\r\n    if(this.data_pointer < this.data_end)\r\n    {\r\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\r\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\r\n\r\n        if(length === 1)\r\n        {\r\n            var result = this.data[this.data_pointer];\r\n        }\r\n        else if(length === 2)\r\n        {\r\n            var result = this.data16[this.data_pointer >>> 1];\r\n        }\r\n        else\r\n        {\r\n            var result = this.data32[this.data_pointer >>> 2];\r\n        }\r\n\r\n        this.data_pointer += length;\r\n\r\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\r\n        if((this.data_pointer & align) === 0)\r\n        {\r\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\r\n                        \" cur=\" + h(this.data_pointer) +\r\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\r\n        }\r\n\r\n        if(this.data_pointer >= this.data_end)\r\n        {\r\n            this.read_end();\r\n        }\r\n\r\n        return result;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\r\n\r\n        this.data_pointer += length;\r\n        return 0;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.read_end = function()\r\n{\r\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\r\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\r\n\r\n    if(this.current_command === 0xA0)\r\n    {\r\n        if(this.data_end === this.data_length)\r\n        {\r\n            this.status = 0x50;\r\n            this.bytecount = this.bytecount & ~7 | 3;\r\n            this.push_irq();\r\n        }\r\n        else\r\n        {\r\n            this.status = 0x58;\r\n            this.bytecount = this.bytecount & ~7 | 2;\r\n            this.push_irq();\r\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\r\n\r\n            if(this.data_end + byte_count > this.data_length)\r\n            {\r\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\r\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\r\n                this.data_end = this.data_length;\r\n            }\r\n            else\r\n            {\r\n                this.data_end += byte_count;\r\n            }\r\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.error = 0;\r\n        if(this.data_pointer >= this.data_length)\r\n        {\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n        }\r\n        else\r\n        {\r\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\r\n            {\r\n                var sector_count = Math.min(this.sectors_per_drq,\r\n                    (this.data_length - this.data_end) / 512);\r\n                dbg_assert(sector_count % 1 === 0);\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\r\n                var sector_count = 1;\r\n            }\r\n            this.ata_advance(this.current_command, sector_count);\r\n            this.data_end += 512 * sector_count;\r\n            this.status = 0x58;\r\n            this.push_irq();\r\n        }\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.write_data_port = function(data, length)\r\n{\r\n    dbg_assert(this.data_pointer % length === 0);\r\n\r\n    if(this.data_pointer >= this.data_end)\r\n    {\r\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\r\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\r\n    }\r\n    else\r\n    {\r\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\r\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\r\n        {\r\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\r\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\r\n        }\r\n\r\n        if(length === 1)\r\n        {\r\n            this.data[this.data_pointer++] = data;\r\n        }\r\n        else if(length === 2)\r\n        {\r\n            this.data16[this.data_pointer >>> 1] = data;\r\n            this.data_pointer += 2;\r\n        }\r\n        else\r\n        {\r\n            this.data32[this.data_pointer >>> 2] = data;\r\n            this.data_pointer += 4;\r\n        }\r\n\r\n        dbg_assert(this.data_pointer <= this.data_end);\r\n        if(this.data_pointer === this.data_end)\r\n        {\r\n            this.write_end();\r\n        }\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.write_data_port8 = function(data)\r\n{\r\n    this.write_data_port(data, 1);\r\n};\r\n\r\nIDEInterface.prototype.write_data_port16 = function(data)\r\n{\r\n    this.write_data_port(data, 2);\r\n};\r\n\r\nIDEInterface.prototype.write_data_port32 = function(data)\r\n{\r\n    this.write_data_port(data, 4);\r\n};\r\n\r\nIDEInterface.prototype.write_end = function()\r\n{\r\n    if(this.current_command === 0xA0)\r\n    {\r\n        this.atapi_handle();\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\r\n                \" data_length=\" + h(this.data_length), LOG_DISK);\r\n\r\n        if(this.data_pointer >= this.data_length)\r\n        {\r\n            this.do_write();\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\r\n            // XXX: Should advance here, but do_write does all the advancing\r\n            //this.ata_advance(this.current_command, 1);\r\n            this.status = 0x58;\r\n            this.data_end += 512;\r\n            this.push_irq();\r\n        }\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\r\n{\r\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\r\n    this.bytecount -= sectors;\r\n\r\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\r\n       cmd === 0x25 || cmd === 0x35)\r\n    {\r\n        var new_sector = sectors + this.get_lba48();\r\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\r\n        this.cylinder_low = new_sector >> 8 & 0xFF;\r\n        this.cylinder_high = new_sector >> 16 & 0xFF;\r\n    }\r\n    else if(this.is_lba)\r\n    {\r\n        var new_sector = sectors + this.get_lba28();\r\n        this.sector = new_sector & 0xFF;\r\n        this.cylinder_low = new_sector >> 8 & 0xFF;\r\n        this.cylinder_high = new_sector >> 16 & 0xFF;\r\n        this.head = this.head & ~0xF | new_sector & 0xF;\r\n    }\r\n    else // chs\r\n    {\r\n        var new_sector = sectors + this.get_chs();\r\n\r\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\r\n        this.cylinder_low = c & 0xFF;\r\n        this.cylinder_high = c >> 8 & 0xFF;\r\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\r\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\r\n\r\n        dbg_assert(new_sector === this.get_chs());\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_read_sectors = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var is_single = cmd === 0x20 || cmd === 0x24;\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\r\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\r\n            \" lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x80 | 0x40;\r\n        this.report_read_start();\r\n\r\n        this.buffer.get(start, byte_count, (data) =>\r\n        {\r\n            //setTimeout(() => {\r\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\r\n\r\n            this.data_set(data);\r\n            this.status = 0x58;\r\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\r\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\r\n\r\n            this.push_irq();\r\n            this.report_read_end(byte_count);\r\n            //}, 10);\r\n        });\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x25;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n        return;\r\n    }\r\n\r\n    this.status = 0x58;\r\n    this.device.dma_status |= 1;\r\n};\r\n\r\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\r\n{\r\n    var cmd = this.current_command;\r\n\r\n    var is_lba48 = cmd === 0x25;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_assert(lba < this.buffer.byteLength);\r\n\r\n    this.report_read_start();\r\n\r\n    var orig_prdt_start = this.device.prdt_addr;\r\n\r\n    this.buffer.get(start, byte_count, (data) =>\r\n    {\r\n        //setTimeout(function() {\r\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\r\n        var prdt_start = this.device.prdt_addr;\r\n        var offset = 0;\r\n\r\n        dbg_assert(orig_prdt_start === prdt_start);\r\n\r\n        do {\r\n            var prd_addr = this.cpu.read32s(prdt_start);\r\n            var prd_count = this.cpu.read16(prdt_start + 4);\r\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\r\n\r\n            if(!prd_count)\r\n            {\r\n                prd_count = 0x10000;\r\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\r\n            }\r\n\r\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\r\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\r\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\r\n\r\n            offset += prd_count;\r\n            prdt_start += 8;\r\n        }\r\n        while(!end);\r\n\r\n        dbg_assert(offset === byte_count);\r\n\r\n        this.ata_advance(this.current_command, count);\r\n        this.status = 0x50;\r\n        this.device.dma_status &= ~1;\r\n        this.current_command = -1;\r\n\r\n        this.push_irq();\r\n\r\n        this.report_read_end(byte_count);\r\n        //}.bind(this), 10);\r\n    });\r\n};\r\n\r\nIDEInterface.prototype.ata_write_sectors = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var is_single = cmd === 0x30 || cmd === 0x34;\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA write lba=\" + h(lba) +\r\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x58;\r\n        this.data_allocate_noclear(byte_count);\r\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\r\n        this.write_dest = start;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x35;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n        return;\r\n    }\r\n\r\n    this.status = 0x58;\r\n    this.device.dma_status |= 1;\r\n};\r\n\r\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\r\n{\r\n    var cmd = this.current_command;\r\n\r\n    var is_lba48 = cmd === 0x35;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    var prdt_start = this.device.prdt_addr;\r\n    var prdt_count = 0;\r\n    var prdt_write_count = 0;\r\n    var offset = 0;\r\n\r\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\r\n\r\n    do {\r\n        var prd_addr = this.cpu.read32s(prdt_start);\r\n        var prd_count = this.cpu.read16(prdt_start + 4);\r\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\r\n\r\n        if(!prd_count)\r\n        {\r\n            prd_count = 0x10000;\r\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\r\n        }\r\n\r\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\r\n\r\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\r\n        dbg_assert(slice.length === prd_count);\r\n\r\n        //if(DEBUG)\r\n        //{\r\n        //    dbg_log(hex_dump(slice), LOG_DISK);\r\n        //}\r\n\r\n        this.buffer.set(start + offset, slice, function()\r\n        {\r\n            prdt_write_count++;\r\n        });\r\n\r\n        offset += prd_count;\r\n        prdt_start += 8;\r\n        prdt_count++;\r\n    }\r\n    while(!end);\r\n\r\n    if(prdt_write_count === prdt_count)\r\n    {\r\n        //setTimeout(function() {\r\n        dbg_log(\"dma write completed\", LOG_DISK);\r\n        this.ata_advance(this.current_command, count);\r\n        this.status = 0x50;\r\n        this.push_irq();\r\n        this.device.dma_status &= ~1;\r\n        this.current_command = -1;\r\n        //}, 10);\r\n    }\r\n    else\r\n    {\r\n        // fails when writes don't happen synchronously, which isn't currently\r\n        // the case, but might be in the future\r\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\r\n    }\r\n\r\n    this.report_write(byte_count);\r\n};\r\n\r\nIDEInterface.prototype.get_chs = function()\r\n{\r\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\r\n    var h = this.head;\r\n    var s = this.sector & 0xFF;\r\n\r\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\r\n\r\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\r\n};\r\n\r\nIDEInterface.prototype.get_lba28 = function()\r\n{\r\n    return this.sector & 0xFF |\r\n            this.cylinder_low << 8 & 0xFF00 |\r\n            this.cylinder_high << 16 & 0xFF0000 |\r\n            (this.head & 0xF) << 24;\r\n};\r\n\r\nIDEInterface.prototype.get_lba48 = function()\r\n{\r\n    // Note: Bits over 32 missing\r\n    return (this.sector & 0xFF |\r\n            this.cylinder_low << 8 & 0xFF00 |\r\n            this.cylinder_high << 16 & 0xFF0000 |\r\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\r\n};\r\n\r\nIDEInterface.prototype.get_lba = function(is_lba48)\r\n{\r\n    if(is_lba48)\r\n    {\r\n        return this.get_lba48();\r\n    }\r\n    else if(this.is_lba)\r\n    {\r\n        return this.get_lba28();\r\n    }\r\n    else\r\n    {\r\n        return this.get_chs();\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.get_count = function(is_lba48)\r\n{\r\n    if(is_lba48)\r\n    {\r\n        var count = this.bytecount;\r\n        if(count === 0) count = 0x10000;\r\n        return count;\r\n    }\r\n    else\r\n    {\r\n        var count = this.bytecount & 0xFF;\r\n        if(count === 0) count = 0x100;\r\n        return count;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.create_identify_packet = function()\r\n{\r\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\r\n\r\n    if(this.drive_head & 0x10)\r\n    {\r\n        // slave\r\n        this.data_allocate(0);\r\n        return;\r\n    }\r\n\r\n    for(var i = 0; i < 512; i++)\r\n    {\r\n        this.data[i] = 0;\r\n    }\r\n\r\n    var cylinder_count = Math.min(16383, this.cylinder_count);\r\n\r\n    this.data_set([\r\n        0x40, this.is_atapi ? 0x85 : 0,\r\n        // 1 cylinders\r\n        cylinder_count, cylinder_count >> 8,\r\n        0, 0,\r\n\r\n        // 3 heads\r\n        this.head_count, this.head_count >> 8,\r\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\r\n        // 5\r\n        0, 512 >> 8,\r\n        // sectors per track\r\n        this.sectors_per_track, this.sectors_per_track >> 8,\r\n        0, 0, 0, 0, 0, 0,\r\n        // 10-19 serial number\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 15\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 20\r\n        3, 0,\r\n        0, 2,\r\n        4, 0,\r\n        // 23-26 firmware revision\r\n        0, 0, 0, 0, 0, 0, 0, 0,\r\n\r\n        // 27 model number\r\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\r\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\r\n\r\n        // 47 max value for set multiple mode\r\n        0x80, 0,\r\n        1, 0,\r\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\r\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\r\n        // 50\r\n        0, 0,\r\n        0, 2,\r\n        0, 2,\r\n        7, 0,\r\n\r\n        // 54 cylinders\r\n        cylinder_count, cylinder_count >> 8,\r\n        // 55 heads\r\n        this.head_count, this.head_count >> 8,\r\n        // 56 sectors per track\r\n        this.sectors_per_track, 0,\r\n        // capacity in sectors\r\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\r\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\r\n\r\n        0, 0,\r\n        // 60\r\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\r\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\r\n\r\n        0, 0,\r\n        // 63, dma supported mode, dma selected mode\r\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\r\n        //0, 0, // no DMA\r\n\r\n        0, 0,\r\n        // 65\r\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\r\n        // 70\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 75\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 80\r\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\r\n        // 85\r\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\r\n        // 90\r\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\r\n        // 95\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 100\r\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\r\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\r\n    ]);\r\n\r\n    this.data_length = 512;\r\n    this.data_end = 512;\r\n};\r\n\r\nIDEInterface.prototype.data_allocate = function(len)\r\n{\r\n    this.data_allocate_noclear(len);\r\n\r\n    for(var i = 0; i < (len + 3 >> 2); i++)\r\n    {\r\n        this.data32[i] = 0;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.data_allocate_noclear = function(len)\r\n{\r\n    if(this.data.length < len)\r\n    {\r\n        this.data = new Uint8Array(len + 3 & ~3);\r\n        this.data16 = new Uint16Array(this.data.buffer);\r\n        this.data32 = new Int32Array(this.data.buffer);\r\n    }\r\n\r\n    this.data_length = len;\r\n    this.data_pointer = 0;\r\n};\r\n\r\nIDEInterface.prototype.data_set = function(data)\r\n{\r\n    this.data_allocate_noclear(data.length);\r\n    this.data.set(data);\r\n};\r\n\r\nIDEInterface.prototype.report_read_start = function()\r\n{\r\n    this.stats.loading = true;\r\n    this.bus.send(\"ide-read-start\");\r\n};\r\n\r\nIDEInterface.prototype.report_read_end = function(byte_count)\r\n{\r\n    this.stats.loading = false;\r\n\r\n    var sector_count = byte_count / this.sector_size | 0;\r\n    this.stats.sectors_read += sector_count;\r\n    this.stats.bytes_read += byte_count;\r\n\r\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\r\n};\r\n\r\nIDEInterface.prototype.report_write = function(byte_count)\r\n{\r\n    var sector_count = byte_count / this.sector_size | 0;\r\n    this.stats.sectors_written += sector_count;\r\n    this.stats.bytes_written += byte_count;\r\n\r\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\r\n};\r\n\r\nIDEInterface.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n    state[0] = this.bytecount;\r\n    state[1] = this.cylinder_count;\r\n    state[2] = this.cylinder_high;\r\n    state[3] = this.cylinder_low;\r\n    state[4] = this.data_pointer;\r\n    state[5] = 0;\r\n    state[6] = 0;\r\n    state[7] = 0;\r\n    state[8] = 0;\r\n    state[9] = this.drive_head;\r\n    state[10] = this.error;\r\n    state[11] = this.head;\r\n    state[12] = this.head_count;\r\n    state[13] = this.is_atapi;\r\n    state[14] = this.is_lba;\r\n    state[15] = this.lba_count;\r\n    state[16] = this.data;\r\n    state[17] = this.data_length;\r\n    state[18] = this.sector;\r\n    state[19] = this.sector_count;\r\n    state[20] = this.sector_size;\r\n    state[21] = this.sectors_per_drq;\r\n    state[22] = this.sectors_per_track;\r\n    state[23] = this.status;\r\n    state[24] = this.write_dest;\r\n    state[25] = this.current_command;\r\n    state[26] = this.data_end;\r\n    state[27] = this.current_atapi_command;\r\n    return state;\r\n};\r\n\r\nIDEInterface.prototype.set_state = function(state)\r\n{\r\n    this.bytecount = state[0];\r\n    this.cylinder_count = state[1];\r\n    this.cylinder_high = state[2];\r\n    this.cylinder_low = state[3];\r\n    this.data_pointer = state[4];\r\n\r\n    this.drive_head = state[9];\r\n    this.error = state[10];\r\n    this.head = state[11];\r\n    this.head_count = state[12];\r\n    this.is_atapi = state[13];\r\n    this.is_lba = state[14];\r\n    this.lba_count = state[15];\r\n    this.data = state[16];\r\n    this.data_length = state[17];\r\n    this.sector = state[18];\r\n    this.sector_count = state[19];\r\n    this.sector_size = state[20];\r\n    this.sectors_per_drq = state[21];\r\n    this.sectors_per_track = state[22];\r\n    this.status = state[23];\r\n    this.write_dest = state[24];\r\n    this.current_command = state[25];\r\n\r\n    this.data_end = state[26];\r\n    this.current_atapi_command = state[27];\r\n\r\n    this.data16 = new Uint16Array(this.data.buffer);\r\n    this.data32 = new Int32Array(this.data.buffer);\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\r\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\r\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\r\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\r\n/** @const */ var CMOS_RTC_HOURS = 0x04;\r\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\r\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\r\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\r\n/** @const */ var CMOS_RTC_MONTH = 0x08;\r\n/** @const */ var CMOS_RTC_YEAR = 0x09;\r\n/** @const */ var CMOS_STATUS_A = 0x0a;\r\n/** @const */ var CMOS_STATUS_B = 0x0b;\r\n/** @const */ var CMOS_STATUS_C = 0x0c;\r\n/** @const */ var CMOS_STATUS_D = 0x0d;\r\n/** @const */ var CMOS_RESET_CODE = 0x0f;\r\n\r\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\r\n/** @const */ var CMOS_DISK_DATA = 0x12;\r\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\r\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\r\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\r\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\r\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\r\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\r\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\r\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\r\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\r\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\r\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\r\n/** @const */ var CMOS_CENTURY = 0x32;\r\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\r\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\r\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\r\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\r\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\r\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\r\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\r\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\r\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\r\n\r\n\r\n/**\r\n * RTC (real time clock) and CMOS\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction RTC(cpu)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.cmos_index = 0;\r\n    this.cmos_data = new Uint8Array(128);\r\n\r\n    // used for cmos entries\r\n    this.rtc_time = Date.now();\r\n    this.last_update = this.rtc_time;\r\n\r\n    // used for periodic interrupt\r\n    this.next_interrupt = 0;\r\n\r\n    this.periodic_interrupt = false;\r\n\r\n    // corresponds to default value for cmos_a\r\n    this.periodic_interrupt_time = 1000 / 1024;\r\n\r\n    this.cmos_a = 0x26;\r\n    this.cmos_b = 2;\r\n    this.cmos_c = 0;\r\n\r\n    this.nmi_disabled = 0;\r\n\r\n    cpu.io.register_write(0x70, this, function(out_byte)\r\n    {\r\n        this.cmos_index = out_byte & 0x7F;\r\n        this.nmi_disabled = out_byte >> 7;\r\n    });\r\n\r\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\r\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\r\n}\r\n\r\nRTC.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.cmos_index;\r\n    state[1] = this.cmos_data;\r\n    state[2] = this.rtc_time;\r\n    state[3] = this.last_update;\r\n    state[4] = this.next_interrupt;\r\n\r\n    state[6] = this.periodic_interrupt;\r\n    state[7] = this.periodic_interrupt_time;\r\n    state[8] = this.cmos_a;\r\n    state[9] = this.cmos_b;\r\n    state[10] = this.cmos_c;\r\n    state[11] = this.nmi_disabled;\r\n\r\n    return state;\r\n};\r\n\r\nRTC.prototype.set_state = function(state)\r\n{\r\n    this.cmos_index = state[0];\r\n    this.cmos_data = state[1];\r\n    this.rtc_time = state[2];\r\n    this.last_update = state[3];\r\n    this.next_interrupt = state[4];\r\n\r\n    this.periodic_interrupt = state[6];\r\n    this.periodic_interrupt_time = state[7];\r\n    this.cmos_a = state[8];\r\n    this.cmos_b = state[9];\r\n    this.cmos_c = state[10];\r\n    this.nmi_disabled = state[11];\r\n};\r\n\r\nRTC.prototype.timer = function(time, legacy_mode)\r\n{\r\n    time = Date.now(); // XXX\r\n    this.rtc_time += time - this.last_update;\r\n    this.last_update = time;\r\n\r\n    if(this.periodic_interrupt && this.next_interrupt < time)\r\n    {\r\n        this.cpu.device_raise_irq(8);\r\n        this.cmos_c |= 1 << 6 | 1 << 7;\r\n\r\n        this.next_interrupt += this.periodic_interrupt_time *\r\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\r\n\r\n        return Math.max(0, time - this.next_interrupt);\r\n    }\r\n\r\n    return 100;\r\n};\r\n\r\nRTC.prototype.bcd_pack = function(n)\r\n{\r\n    var i = 0,\r\n        result = 0,\r\n        digit;\r\n\r\n    while(n)\r\n    {\r\n        digit = n % 10;\r\n\r\n        result |= digit << (4 * i);\r\n        i++;\r\n        n = (n - digit) / 10;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nRTC.prototype.encode_time = function(t)\r\n{\r\n    if(this.cmos_b & 4)\r\n    {\r\n        // binary mode\r\n        return t;\r\n    }\r\n    else\r\n    {\r\n        return this.bcd_pack(t);\r\n    }\r\n};\r\n\r\n// TODO\r\n// - interrupt on update\r\n// - countdown\r\n// - letting bios/os set values\r\n// (none of these are used by seabios or the OSes we're\r\n// currently testing)\r\nRTC.prototype.cmos_port_read = function()\r\n{\r\n    var index = this.cmos_index;\r\n\r\n    //this.cmos_index = 0xD;\r\n\r\n    switch(index)\r\n    {\r\n        case CMOS_RTC_SECONDS:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\r\n        case CMOS_RTC_MINUTES:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\r\n        case CMOS_RTC_HOURS:\r\n            // TODO: 12 hour mode\r\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\r\n        case CMOS_RTC_DAY_MONTH:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\r\n        case CMOS_RTC_MONTH:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\r\n        case CMOS_RTC_YEAR:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\r\n\r\n        case CMOS_STATUS_A:\r\n            return this.cmos_a;\r\n        case CMOS_STATUS_B:\r\n            //dbg_log(\"cmos read from index \" + h(index));\r\n            return this.cmos_b;\r\n\r\n        case CMOS_STATUS_C:\r\n            // It is important to know that upon a IRQ 8, Status Register C\r\n            // will contain a bitmask telling which interrupt happened.\r\n            // What is important is that if register C is not read after an\r\n            // IRQ 8, then the interrupt will not happen again.\r\n            this.cpu.device_lower_irq(8);\r\n\r\n            dbg_log(\"cmos reg C read\", LOG_RTC);\r\n            // Missing IRQF flag\r\n            //return cmos_b & 0x70;\r\n            var c = this.cmos_c;\r\n\r\n            this.cmos_c &= ~0xF0;\r\n\r\n            return c;\r\n\r\n        case CMOS_STATUS_D:\r\n            return 0xFF;\r\n\r\n        case CMOS_CENTURY:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\r\n\r\n        default:\r\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\r\n            return this.cmos_data[this.cmos_index];\r\n    }\r\n};\r\n\r\nRTC.prototype.cmos_port_write = function(data_byte)\r\n{\r\n    switch(this.cmos_index)\r\n    {\r\n        case 0xA:\r\n            this.cmos_a = data_byte & 0x7F;\r\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\r\n\r\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\r\n            break;\r\n        case 0xB:\r\n            this.cmos_b = data_byte;\r\n            if(this.cmos_b & 0x40)\r\n            {\r\n                this.next_interrupt = Date.now();\r\n            }\r\n\r\n            if(this.cmos_b & 0x20) dbg_log(\"Unimplemented: alarm interrupt\", LOG_RTC);\r\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\r\n\r\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\r\n            break;\r\n        default:\r\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\r\n    }\r\n\r\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\r\n};\r\n\r\n/**\r\n * @param {number} index\r\n */\r\nRTC.prototype.cmos_read = function(index)\r\n{\r\n    dbg_assert(index < 128);\r\n    return this.cmos_data[index];\r\n};\r\n\r\n/**\r\n * @param {number} index\r\n * @param {number} value\r\n */\r\nRTC.prototype.cmos_write = function(index, value)\r\n{\r\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\r\n    dbg_assert(index < 128);\r\n    this.cmos_data[index] = value;\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar A20_MASK = ~(1 << 20);\r\n/** @const */\r\nvar A20_MASK16 = ~(1 << 20 - 1);\r\n/** @const */\r\nvar A20_MASK32 = ~(1 << 20 - 2);\r\n\r\n/** @const */\r\nvar USE_A20 = false;\r\n\r\n\r\n// called by all memory writes\r\nCPU.prototype.debug_write = function(addr, size, value)\r\n{\r\n    if(!DEBUG)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\r\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\r\n\r\n    this.debug_read(addr, size, true);\r\n}\r\n\r\n/**\r\n * @param {boolean=} is_write\r\n */\r\nCPU.prototype.debug_read = function(addr, size, is_write)\r\n{\r\n    if(!DEBUG)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(typeof addr === \"number\");\r\n    dbg_assert(!isNaN(addr));\r\n};\r\n\r\n\r\nCPU.prototype.mmap_read8 = function(addr)\r\n{\r\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\r\n};\r\n\r\nCPU.prototype.mmap_write8 = function(addr, value)\r\n{\r\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\r\n};\r\n\r\nCPU.prototype.mmap_read16 = function(addr)\r\n{\r\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\r\n\r\n    return fn(addr) | fn(addr + 1 | 0) << 8;\r\n};\r\n\r\nCPU.prototype.mmap_write16 = function(addr, value)\r\n{\r\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\r\n\r\n    fn(addr, value & 0xFF);\r\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\r\n};\r\n\r\nCPU.prototype.mmap_read32 = function(addr)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n\r\n    return this.memory_map_read32[aligned_addr](addr);\r\n}\r\n\r\nCPU.prototype.mmap_write32 = function(addr, value)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n\r\n    this.memory_map_write32[aligned_addr](addr, value);\r\n}\r\n\r\nCPU.prototype.in_mapped_range = function(addr)\r\n{\r\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read8 = function(addr)\r\n{\r\n    this.debug_read(addr, 1);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        return this.mmap_read8(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.mem8[addr];\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read16 = function(addr)\r\n{\r\n    this.debug_read(addr, 2);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        return this.mmap_read16(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read_aligned16 = function(addr)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x80000000);\r\n    this.debug_read(addr << 1, 2);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\r\n\r\n    if(this.in_mapped_range(addr << 1))\r\n    {\r\n        return this.mmap_read16(addr << 1);\r\n    }\r\n    else\r\n    {\r\n        return this.mem16[addr];\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read32s = function(addr)\r\n{\r\n    this.debug_read(addr, 4);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        return this.mmap_read32(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\r\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read_aligned32 = function(addr)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x40000000);\r\n    this.debug_read(addr << 2, 4);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\r\n\r\n    if(this.in_mapped_range(addr << 2))\r\n    {\r\n        return this.mmap_read32(addr << 2);\r\n    }\r\n    else\r\n    {\r\n        return this.mem32s[addr];\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write8 = function(addr, value)\r\n{\r\n    this.debug_write(addr, 1, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        this.mmap_write8(addr, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem8[addr] = value;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write16 = function(addr, value)\r\n{\r\n    this.debug_write(addr, 2, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        this.mmap_write16(addr, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem8[addr] = value;\r\n        this.mem8[addr + 1 | 0] = value >> 8;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write_aligned16 = function(addr, value)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x80000000);\r\n    this.debug_write(addr << 1, 2, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\r\n\r\n    if(this.in_mapped_range(addr << 1))\r\n    {\r\n        this.mmap_write16(addr << 1, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem16[addr] = value;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write32 = function(addr, value)\r\n{\r\n    this.debug_write(addr, 4, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        this.mmap_write32(addr, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem8[addr] = value;\r\n        this.mem8[addr + 1 | 0] = value >> 8;\r\n        this.mem8[addr + 2 | 0] = value >> 16;\r\n        this.mem8[addr + 3 | 0] = value >> 24;\r\n    }\r\n};\r\n\r\nCPU.prototype.write_aligned32 = function(addr, value)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x40000000);\r\n    this.debug_write(addr << 2, 4, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\r\n\r\n    if(this.in_mapped_range(addr << 2))\r\n    {\r\n        this.mmap_write32(addr << 2, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem32s[addr] = value;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Array.<number>|Uint8Array} blob\r\n * @param {number} offset\r\n */\r\nCPU.prototype.write_blob = function(blob, offset)\r\n{\r\n    this.debug_write(offset, blob.length, 0)\r\n    dbg_assert(blob && blob.length >= 0);\r\n\r\n    this.mem8.set(blob, offset);\r\n};\r\n\r\n/**\r\n * @param {Array.<number>|Int32Array} blob\r\n * @param {number} offset\r\n */\r\nCPU.prototype.write_blob32 = function(blob, offset)\r\n{\r\n    dbg_assert(blob && blob.length);\r\n    this.debug_write(offset, blob.length << 2, 0);\r\n    this.mem32s.set(blob, offset);\r\n};\r\n","\"use strict\";\r\n\r\n// http://wiki.osdev.org/PCI\r\n\r\nvar\r\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\r\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction PCI(cpu)\r\n{\r\n    this.pci_addr = new Uint8Array(4);\r\n    this.pci_value = new Uint8Array(4);\r\n    this.pci_response = new Uint8Array(4);\r\n    this.pci_status = new Uint8Array(4);\r\n\r\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\r\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\r\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\r\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\r\n\r\n    this.device_spaces = [];\r\n    this.devices = [];\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        this.device_spaces[i] = undefined;\r\n        this.devices[i] = undefined;\r\n    }\r\n\r\n    this.io = cpu.io;\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0], value);\r\n        },\r\n        function(value)\r\n        {\r\n            this.pci_write16(this.pci_addr32[0], value);\r\n        },\r\n        function(value)\r\n        {\r\n            this.pci_write32(this.pci_addr32[0], value);\r\n        });\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\r\n        });\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\r\n        },\r\n        function(value)\r\n        {\r\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\r\n        });\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\r\n        });\r\n\r\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\r\n        function()\r\n        {\r\n            return this.pci_response[0];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_response[1];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_response[2];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_response[3];\r\n        }\r\n    );\r\n\r\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\r\n        function()\r\n        {\r\n            return this.pci_status[0];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_status[1];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_status[2];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_status[3];\r\n        }\r\n    );\r\n\r\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[0] = out_byte & 0xFC;\r\n        },\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[1] = out_byte;\r\n        },\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[2] = out_byte;\r\n        },\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[3] = out_byte;\r\n            this.pci_query();\r\n        }\r\n    );\r\n\r\n\r\n    // Some experimental PCI devices taken from my PC:\r\n\r\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\r\n    //var host_bridge = {\r\n    //    pci_id: 0,\r\n    //    pci_space: [\r\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\r\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\r\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //    ],\r\n    //    pci_bars: [],\r\n    //};\r\n\r\n    var host_bridge = {\r\n        pci_id: 0,\r\n        pci_space: [\r\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\r\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        ],\r\n        pci_bars: [],\r\n        name: \"82441FX PMC\",\r\n    };\r\n    this.register_device(host_bridge);\r\n\r\n    this.isa_bridge = {\r\n        pci_id: 1 << 3,\r\n        pci_space: [\r\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\r\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        ],\r\n        pci_bars: [],\r\n        name: \"82371SB PIIX3 ISA\",\r\n    };\r\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\r\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\r\n\r\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\r\n    //this.register_device([\r\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\r\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\r\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\r\n    //], 0x1e << 3);\r\n}\r\n\r\nPCI.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        state[i] = this.device_spaces[i];\r\n    }\r\n\r\n    state[256] = this.pci_addr;\r\n    state[257] = this.pci_value;\r\n    state[258] = this.pci_response;\r\n    state[259] = this.pci_status;\r\n\r\n    return state;\r\n};\r\n\r\nPCI.prototype.set_state = function(state)\r\n{\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        var device = this.devices[i];\r\n        var space = state[i];\r\n\r\n        if(!device || !space)\r\n        {\r\n            if(device)\r\n            {\r\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\r\n                        \"configuration but not in snapshot (\" + device.name + \")\");\r\n            }\r\n            if(space)\r\n            {\r\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\r\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\r\n            }\r\n            continue;\r\n        }\r\n\r\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\r\n        {\r\n            var value = space[(0x10 >> 2) + bar_nr];\r\n\r\n            if(value & 1)\r\n            {\r\n                var bar = device.pci_bars[bar_nr];\r\n                var from = bar.original_bar & ~1 & 0xFFFF;\r\n                var to = value & ~1 & 0xFFFF;\r\n                this.set_io_bars(bar, from, to);\r\n            }\r\n            else\r\n            {\r\n                // memory, cannot be changed\r\n            }\r\n        }\r\n\r\n        this.device_spaces[i].set(space);\r\n    }\r\n\r\n    this.pci_addr.set(state[256]);\r\n    this.pci_value.set(state[257]);\r\n    this.pci_response.set(state[258]);\r\n    this.pci_status.set(state[259]);\r\n};\r\n\r\nPCI.prototype.pci_query = function()\r\n{\r\n    var dbg_line = \"query\";\r\n\r\n    // Bit | .31                     .0\r\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\r\n\r\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\r\n        addr = this.pci_addr[0] & 0xFC,\r\n        //devfn = bdf & 0xFF,\r\n        //bus = bdf >> 8,\r\n        dev = bdf >> 3 & 0x1F,\r\n        //fn = bdf & 7,\r\n        enabled = this.pci_addr[3] >> 7;\r\n\r\n    dbg_line += \" enabled=\" + enabled;\r\n    dbg_line += \" bdf=\" + h(bdf, 4);\r\n    dbg_line += \" dev=\" + h(dev, 2);\r\n    dbg_line += \" addr=\" + h(addr, 2);\r\n\r\n    var device = this.device_spaces[bdf];\r\n\r\n    if(device !== undefined)\r\n    {\r\n        this.pci_status32[0] = 0x80000000 | 0;\r\n\r\n        if(addr < device.byteLength)\r\n        {\r\n            this.pci_response32[0] = device[addr >> 2];\r\n        }\r\n        else\r\n        {\r\n            // required by freebsd-9.1\r\n            this.pci_response32[0] = 0;\r\n        }\r\n\r\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\r\n\r\n        if(addr >= device.byteLength)\r\n        {\r\n            dbg_line += \" (undef)\";\r\n        }\r\n\r\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\r\n\r\n        dbg_log(dbg_line, LOG_PCI);\r\n    }\r\n    else\r\n    {\r\n        this.pci_response32[0] = -1;\r\n        this.pci_status32[0] = 0;\r\n    }\r\n};\r\n\r\nPCI.prototype.pci_write8 = function(address, written)\r\n{\r\n    var bdf = address >> 8 & 0xFFFF;\r\n    var addr = address & 0xFF;\r\n\r\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\r\n    var device = this.devices[bdf];\r\n\r\n    if(!space)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\r\n               \"PCI: Expected 32-bit write\");\r\n\r\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n            \" value=\" + h(written, 2), LOG_PCI);\r\n\r\n    space[addr] = written;\r\n};\r\n\r\nPCI.prototype.pci_write16 = function(address, written)\r\n{\r\n    dbg_assert((address & 1) === 0);\r\n\r\n    var bdf = address >> 8 & 0xFFFF;\r\n    var addr = address & 0xFF;\r\n\r\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\r\n    var device = this.devices[bdf];\r\n\r\n    if(!space)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\r\n               \"PCI: Expected 32-bit write\");\r\n\r\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n            \" value=\" + h(written, 4), LOG_PCI);\r\n\r\n    space[addr >>> 1] = written;\r\n};\r\n\r\nPCI.prototype.pci_write32 = function(address, written)\r\n{\r\n    dbg_assert((address & 3) === 0);\r\n\r\n    var bdf = address >> 8 & 0xFFFF;\r\n    var addr = address & 0xFF;\r\n\r\n    var space = this.device_spaces[bdf];\r\n    var device = this.devices[bdf];\r\n\r\n    if(!space)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(addr >= 0x10 && addr < 0x28)\r\n    {\r\n        var bar_nr = addr - 0x10 >> 2;\r\n        var bar = device.pci_bars[bar_nr];\r\n\r\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\r\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\r\n\r\n        if(bar)\r\n        {\r\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\r\n\r\n            var space_addr = addr >> 2;\r\n            var type = space[space_addr] & 1;\r\n\r\n            if((written | 3 | bar.size - 1)  === -1) // size check\r\n            {\r\n                written = ~(bar.size - 1) | type;\r\n\r\n                if(type === 0)\r\n                {\r\n                    space[space_addr] = written;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(type === 0)\r\n                {\r\n                    // memory\r\n                    var original_bar = bar.original_bar;\r\n\r\n                    if((written & ~0xF) !== (original_bar & ~0xF))\r\n                    {\r\n                        // seabios\r\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\r\n                    }\r\n\r\n                    // changing isn't supported yet, reset to default\r\n                    space[space_addr] = original_bar;\r\n                }\r\n            }\r\n\r\n            if(type === 1)\r\n            {\r\n                // io\r\n                dbg_assert(type === 1);\r\n\r\n                var from = space[space_addr] & ~1 & 0xFFFF;\r\n                var to = written & ~1 & 0xFFFF;\r\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\r\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\r\n                this.set_io_bars(bar, from, to);\r\n                space[space_addr] = written | 1;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            space[addr >> 2] = 0;\r\n        }\r\n\r\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\r\n    }\r\n    else if(addr === 0x30)\r\n    {\r\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\r\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\r\n\r\n        if(device.pci_rom_size)\r\n        {\r\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\r\n            {\r\n                space[addr >> 2] = -device.pci_rom_size | 0;\r\n            }\r\n            else\r\n            {\r\n                space[addr >> 2] = device.pci_rom_address | 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            space[addr >> 2] = 0;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\r\n        space[addr >>> 2] = written;\r\n    }\r\n};\r\n\r\nPCI.prototype.register_device = function(device)\r\n{\r\n    dbg_assert(device.pci_id !== undefined);\r\n    dbg_assert(device.pci_space !== undefined);\r\n    dbg_assert(device.pci_bars !== undefined);\r\n\r\n    var device_id = device.pci_id;\r\n\r\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\r\n\r\n    dbg_assert(!this.devices[device_id]);\r\n    dbg_assert(device.pci_space.length >= 64);\r\n    dbg_assert(device_id < this.devices.length);\r\n\r\n    // convert bytewise notation from lspci to double words\r\n    var space = new Int32Array(64);\r\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\r\n    this.device_spaces[device_id] = space;\r\n    this.devices[device_id] = device;\r\n\r\n    var bar_space = space.slice(4, 10);\r\n\r\n    for(var i = 0; i < device.pci_bars.length; i++)\r\n    {\r\n        var bar = device.pci_bars[i];\r\n\r\n        if(!bar)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var bar_base = bar_space[i];\r\n        var type = bar_base & 1;\r\n\r\n        bar.original_bar = bar_base;\r\n        bar.entries = [];\r\n\r\n        if(type === 0)\r\n        {\r\n            // memory, not needed currently\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(type === 1);\r\n            var port = bar_base & ~1;\r\n\r\n            for(var j = 0; j < bar.size; j++)\r\n            {\r\n                bar.entries[j] = this.io.ports[port + j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return space;\r\n};\r\n\r\nPCI.prototype.set_io_bars = function(bar, from, to)\r\n{\r\n    var count = bar.size;\r\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\r\n\r\n    var ports = this.io.ports;\r\n\r\n    for(var i = 0; i < count; i++)\r\n    {\r\n        var old_entry = ports[from + i];\r\n        ports[from + i] = this.io.create_empty_entry();\r\n\r\n        if(old_entry.read8 === this.io.empty_port_read8 &&\r\n           old_entry.read16 === this.io.empty_port_read16 &&\r\n           old_entry.read32 === this.io.empty_port_read32 &&\r\n           old_entry.write8 === this.io.empty_port_write &&\r\n           old_entry.write16 === this.io.empty_port_write &&\r\n           old_entry.write32 === this.io.empty_port_write)\r\n        {\r\n            dbg_log(\"Move IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\r\n        }\r\n\r\n        var entry = bar.entries[i];\r\n        var empty_entry = ports[to + i];\r\n        dbg_assert(entry && empty_entry);\r\n\r\n        ports[to + i] = entry;\r\n\r\n        // these can fail if the os maps an io port in multiple bars (indicating a bug)\r\n        dbg_assert(empty_entry.read8 === this.io.empty_port_read8, \"Bad IO bar: Target already mapped\");\r\n        dbg_assert(empty_entry.read16 === this.io.empty_port_read16, \"Bad IO bar: Target already mapped\");\r\n        dbg_assert(empty_entry.read32 === this.io.empty_port_read32, \"Bad IO bar: Target already mapped\");\r\n        dbg_assert(empty_entry.write8 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\r\n        dbg_assert(empty_entry.write16 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\r\n        dbg_assert(empty_entry.write32 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\r\n    }\r\n};\r\n\r\nPCI.prototype.raise_irq = function(pci_id)\r\n{\r\n    var space = this.device_spaces[pci_id];\r\n    dbg_assert(space);\r\n\r\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\r\n    var device = (pci_id >> 3) - 1 & 0xFF;\r\n    var parent_pin = pin + device & 3;\r\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\r\n\r\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\r\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\r\n    this.cpu.device_raise_irq(irq);\r\n};\r\n\r\nPCI.prototype.lower_irq = function(pci_id)\r\n{\r\n    var space = this.device_spaces[pci_id];\r\n    dbg_assert(space);\r\n\r\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\r\n    var device = pci_id >> 3 & 0xFF;\r\n    var parent_pin = pin + device - 2 & 3;\r\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\r\n\r\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\r\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\r\n    this.cpu.device_lower_irq(irq);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {CPU} cpu\r\n */\r\nfunction FloppyController(cpu, fda_image, fdb_image)\r\n{\r\n    /** @const @type {IO|undefined} */\r\n    this.io = cpu.io;\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {DMA} */\r\n    this.dma = cpu.devices.dma;\r\n\r\n    this.bytes_expecting = 0;\r\n    this.receiving_command = new Uint8Array(10);\r\n    this.receiving_index = 0;\r\n    this.next_command = null;\r\n\r\n    this.response_data = new Uint8Array(10);\r\n    this.response_index = 0;\r\n    this.response_length = 0;\r\n\r\n    this.floppy_size = 0;\r\n\r\n    /* const */\r\n    this.fda_image = fda_image;\r\n\r\n    /* const */\r\n    this.fdb_image = fdb_image;\r\n\r\n\r\n    this.status_reg0 = 0;\r\n    this.status_reg1 = 0;\r\n    this.status_reg2 = 0;\r\n    this.drive = 0;\r\n\r\n    this.last_cylinder = 0;\r\n    this.last_head = 0;\r\n    this.last_sector = 1;\r\n\r\n    // this should actually be write-only ... but people read it anyway\r\n    this.dor = 0;\r\n\r\n    if(!fda_image)\r\n    {\r\n        // Needed for CD emulation provided by seabios\r\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\r\n\r\n        this.sectors_per_track = 0;\r\n        this.number_of_heads = 0;\r\n        this.number_of_cylinders = 0;\r\n\r\n        this.floppy_size = 0;\r\n    }\r\n    else\r\n    {\r\n        this.floppy_size = fda_image.byteLength;\r\n\r\n        var floppy_types = {\r\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\r\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\r\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\r\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\r\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\r\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\r\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\r\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\r\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\r\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\r\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\r\n        };\r\n\r\n        var number_of_cylinders,\r\n            sectors_per_track,\r\n            number_of_heads,\r\n            floppy_type = floppy_types[this.floppy_size >> 10];\r\n\r\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\r\n        {\r\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\r\n\r\n            sectors_per_track = floppy_type.sectors;\r\n            number_of_heads = floppy_type.heads;\r\n            number_of_cylinders = floppy_type.tracks;\r\n        }\r\n        else\r\n        {\r\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\r\n        }\r\n\r\n        this.sectors_per_track = sectors_per_track;\r\n        this.number_of_heads = number_of_heads;\r\n        this.number_of_cylinders = number_of_cylinders;\r\n    }\r\n\r\n    this.io.register_read(0x3F0, this, this.port3F0_read);\r\n    this.io.register_read(0x3F2, this, this.port3F2_read);\r\n    this.io.register_read(0x3F4, this, this.port3F4_read);\r\n    this.io.register_read(0x3F5, this, this.port3F5_read);\r\n    this.io.register_read(0x3F7, this, this.port3F7_read);\r\n\r\n    this.io.register_write(0x3F2, this, this.port3F2_write);\r\n    this.io.register_write(0x3F5, this, this.port3F5_write);\r\n}\r\n\r\nFloppyController.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.bytes_expecting;\r\n    state[1] = this.receiving_command;\r\n    state[2] = this.receiving_index;\r\n    //state[3] = this.next_command;\r\n    state[4] = this.response_data;\r\n    state[5] = this.response_index;\r\n    state[6] = this.response_length;\r\n    state[7] = this.floppy_size;\r\n    state[8] = this.status_reg0;\r\n    state[9] = this.status_reg1;\r\n    state[10] = this.status_reg2;\r\n    state[11] = this.drive;\r\n    state[12] = this.last_cylinder;\r\n    state[13] = this.last_head;\r\n    state[14] = this.last_sector;\r\n    state[15] = this.dor;\r\n    state[16] = this.sectors_per_track;\r\n    state[17] = this.number_of_heads;\r\n    state[18] = this.number_of_cylinders;\r\n\r\n    return state;\r\n};\r\n\r\nFloppyController.prototype.set_state = function(state)\r\n{\r\n    this.bytes_expecting = state[0];\r\n    this.receiving_command = state[1];\r\n    this.receiving_index = state[2];\r\n    this.next_command = state[3];\r\n    this.response_data = state[4];\r\n    this.response_index = state[5];\r\n    this.response_length = state[6];\r\n    this.floppy_size = state[7];\r\n    this.status_reg0 = state[8];\r\n    this.status_reg1 = state[9];\r\n    this.status_reg2 = state[10];\r\n    this.drive = state[11];\r\n    this.last_cylinder = state[12];\r\n    this.last_head = state[13];\r\n    this.last_sector = state[14];\r\n    this.dor = state[15];\r\n    this.sectors_per_track = state[16];\r\n    this.number_of_heads = state[17];\r\n    this.number_of_cylinders = state[18];\r\n};\r\n\r\nFloppyController.prototype.port3F0_read = function()\r\n{\r\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\r\n\r\n    return 0;\r\n};\r\n\r\n\r\nFloppyController.prototype.port3F4_read = function()\r\n{\r\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\r\n\r\n    var return_byte = 0x80;\r\n\r\n    if(this.response_index < this.response_length)\r\n    {\r\n        return_byte |= 0x40 | 0x10;\r\n    }\r\n\r\n    if((this.dor & 8) === 0)\r\n    {\r\n        return_byte |= 0x20;\r\n    }\r\n\r\n    return return_byte;\r\n};\r\n\r\nFloppyController.prototype.port3F7_read = function()\r\n{\r\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\r\n    return 0x00;\r\n}\r\n\r\nFloppyController.prototype.port3F5_read = function()\r\n{\r\n    if(this.response_index < this.response_length)\r\n    {\r\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\r\n        this.cpu.device_lower_irq(6);\r\n        return this.response_data[this.response_index++];\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\r\n        return 0xFF;\r\n    }\r\n};\r\n\r\nFloppyController.prototype.port3F5_write = function(reg_byte)\r\n{\r\n    if(!this.fda_image) return;\r\n\r\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\r\n\r\n    if(this.bytes_expecting > 0)\r\n    {\r\n        this.receiving_command[this.receiving_index++] = reg_byte;\r\n\r\n        this.bytes_expecting--;\r\n\r\n        if(this.bytes_expecting === 0)\r\n        {\r\n            if(DEBUG)\r\n            {\r\n                var log = \"3F5 command received: \";\r\n                for(var i = 0; i < this.receiving_index; i++)\r\n                    log += h(this.receiving_command[i]) + \" \";\r\n                dbg_log(log, LOG_FLOPPY);\r\n            }\r\n\r\n            this.next_command.call(this, this.receiving_command);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        switch(reg_byte)\r\n        {\r\n            // TODO\r\n            //case 2:\r\n                //this.next_command = read_complete_track;\r\n                //this.bytes_expecting = 8;\r\n                //break;\r\n            case 0x03:\r\n                this.next_command = this.fix_drive_data;\r\n                this.bytes_expecting = 2;\r\n                break;\r\n            case 0x04:\r\n                this.next_command = this.check_drive_status;\r\n                this.bytes_expecting = 1;\r\n                break;\r\n            case 0x05:\r\n            case 0xC5:\r\n                this.next_command = function(args) { this.do_sector(true, args); };\r\n                this.bytes_expecting = 8;\r\n                break;\r\n            case 0xE6:\r\n                this.next_command = function(args) { this.do_sector(false, args); };\r\n                this.bytes_expecting = 8;\r\n                break;\r\n            case 0x07:\r\n                this.next_command = this.calibrate;\r\n                this.bytes_expecting = 1;\r\n                break;\r\n            case 0x08:\r\n                this.check_interrupt_status();\r\n                break;\r\n            case 0x4A:\r\n                this.next_command = this.read_sector_id;\r\n                this.bytes_expecting = 1;\r\n                break;\r\n            case 0x0F:\r\n                this.bytes_expecting = 2;\r\n                this.next_command = this.seek;\r\n                break;\r\n            case 0x0E:\r\n                // dump regs\r\n                dbg_log(\"dump registers\", LOG_FLOPPY);\r\n                this.response_data[0] = 0x80;\r\n                this.response_index = 0;\r\n                this.response_length = 1;\r\n\r\n                this.bytes_expecting = 0;\r\n                break;\r\n\r\n            default:\r\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\r\n        }\r\n\r\n        this.receiving_index = 0;\r\n    }\r\n};\r\n\r\nFloppyController.prototype.port3F2_read = function()\r\n{\r\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\r\n    return this.dor;\r\n}\r\n\r\nFloppyController.prototype.port3F2_write = function(value)\r\n{\r\n    if((value & 4) === 4 && (this.dor & 4) === 0)\r\n    {\r\n        // reset\r\n        this.cpu.device_raise_irq(6);\r\n    }\r\n\r\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\r\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\r\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\r\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\r\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\r\n\r\n    this.dor = value;\r\n}\r\n\r\nFloppyController.prototype.check_drive_status = function(args)\r\n{\r\n    dbg_log(\"check drive status\", LOG_FLOPPY);\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 1;\r\n    this.response_data[0] = 1 << 5;\r\n}\r\n\r\nFloppyController.prototype.seek = function(args)\r\n{\r\n    dbg_log(\"seek\", LOG_FLOPPY);\r\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\r\n\r\n    this.last_cylinder = args[1];\r\n    this.last_head = args[0] >> 2 & 1;\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.calibrate = function(args)\r\n{\r\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.check_interrupt_status = function()\r\n{\r\n    // do not trigger an interrupt here\r\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 2;\r\n\r\n    this.response_data[0] = 1 << 5;\r\n    this.response_data[1] = this.last_cylinder;\r\n}\r\n\r\nFloppyController.prototype.do_sector = function(is_write, args)\r\n{\r\n    var head = args[2],\r\n        cylinder = args[1],\r\n        sector = args[3],\r\n        sector_size = 128 << args[4],\r\n        read_count = args[5] - args[3] + 1,\r\n\r\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\r\n\r\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\r\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\r\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\r\n\r\n    if(!args[4])\r\n    {\r\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\r\n    }\r\n\r\n    if(!this.fda_image)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(is_write)\r\n    {\r\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\r\n    }\r\n    else\r\n    {\r\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\r\n    }\r\n};\r\n\r\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\r\n{\r\n    if(error)\r\n    {\r\n        // TODO: Set appropriate bits\r\n        return;\r\n    }\r\n\r\n    sector++;\r\n\r\n    if(sector > this.sectors_per_track)\r\n    {\r\n        sector = 1;\r\n        head++;\r\n\r\n        if(head >= this.number_of_heads)\r\n        {\r\n            head = 0;\r\n            cylinder++;\r\n        }\r\n    }\r\n\r\n    this.last_cylinder = cylinder;\r\n    this.last_head = head;\r\n    this.last_sector = sector;\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 7;\r\n\r\n    this.response_data[0] = head << 2 | 0x20;\r\n    this.response_data[1] = 0;\r\n    this.response_data[2] = 0;\r\n    this.response_data[3] = cylinder;\r\n    this.response_data[4] = head;\r\n    this.response_data[5] = sector;\r\n    this.response_data[6] = args[4];\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.fix_drive_data = function(args)\r\n{\r\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\r\n}\r\n\r\nFloppyController.prototype.read_sector_id = function(args)\r\n{\r\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 7;\r\n\r\n    this.response_data[0] = 0;\r\n    this.response_data[1] = 0;\r\n    this.response_data[2] = 0;\r\n    this.response_data[3] = 0;\r\n    this.response_data[4] = 0;\r\n    this.response_data[5] = 0;\r\n    this.response_data[6] = 0;\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.raise_irq = function()\r\n{\r\n    if(this.dor & 8)\r\n    {\r\n        this.cpu.device_raise_irq(6);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction DMA(cpu)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.channel_page = new Uint8Array(8);\r\n    this.channel_pagehi = new Uint8Array(8);\r\n    this.channel_addr = new Uint16Array(8);\r\n    this.channel_addr_init = new Uint16Array(8);\r\n    this.channel_count = new Uint16Array(8);\r\n    this.channel_count_init = new Uint16Array(8);\r\n    this.channel_mask = new Uint8Array(8);\r\n    this.channel_mode = new Uint8Array(8);\r\n    this.unmask_listeners = [];\r\n\r\n    this.lsb_msb_flipflop = 0;\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\r\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\r\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\r\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\r\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\r\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\r\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\r\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\r\n\r\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\r\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\r\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\r\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\r\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\r\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\r\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\r\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\r\n\r\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\r\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\r\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\r\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\r\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\r\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\r\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\r\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\r\n\r\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\r\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\r\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\r\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\r\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\r\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\r\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\r\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\r\n\r\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\r\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\r\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\r\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\r\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\r\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\r\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\r\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\r\n\r\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\r\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\r\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\r\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\r\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\r\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\r\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\r\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\r\n\r\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\r\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\r\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\r\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\r\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\r\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\r\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\r\n\r\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\r\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\r\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\r\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\r\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\r\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\r\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\r\n\r\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\r\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\r\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\r\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\r\n\r\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\r\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\r\n\r\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\r\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\r\n\r\n    io.register_write(0x0C, this, this.portC_write);\r\n    io.register_write(0xD8, this, this.portC_write);\r\n}\r\n\r\nDMA.prototype.get_state = function()\r\n{\r\n    return [\r\n        this.channel_page,\r\n        this.channel_pagehi,\r\n        this.channel_addr,\r\n        this.channel_addr_init,\r\n        this.channel_count,\r\n        this.channel_count_init,\r\n        this.channel_mask,\r\n        this.channel_mode,\r\n        this.lsb_msb_flipflop,\r\n    ];\r\n};\r\n\r\nDMA.prototype.set_state = function(state)\r\n{\r\n    this.channel_page = state[0];\r\n    this.channel_pagehi = state[1];\r\n    this.channel_addr = state[2];\r\n    this.channel_addr_init = state[3];\r\n    this.channel_count = state[4];\r\n    this.channel_count_init = state[5];\r\n    this.channel_mask = state[6];\r\n    this.channel_mode = state[7];\r\n    this.lsb_msb_flipflop = state[8];\r\n};\r\n\r\nDMA.prototype.port_count_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n\r\n    this.channel_count[channel] =\r\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\r\n\r\n    this.channel_count_init[channel] =\r\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\r\n};\r\n\r\nDMA.prototype.port_count_read = function(channel)\r\n{\r\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\r\n    return this.flipflop_read(this.channel_count[channel]);\r\n};\r\n\r\nDMA.prototype.port_addr_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n\r\n    this.channel_addr[channel] =\r\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\r\n\r\n    this.channel_addr_init[channel] =\r\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\r\n};\r\n\r\nDMA.prototype.port_addr_read = function(channel)\r\n{\r\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\r\n    return this.flipflop_read(this.channel_addr[channel]);\r\n};\r\n\r\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n    this.channel_pagehi[channel] = data_byte;\r\n};\r\n\r\nDMA.prototype.port_pagehi_read = function(channel)\r\n{\r\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\r\n    return this.channel_pagehi[channel];\r\n};\r\n\r\nDMA.prototype.port_page_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n    this.channel_page[channel] = data_byte;\r\n};\r\n\r\nDMA.prototype.port_page_read = function(channel)\r\n{\r\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\r\n    return this.channel_page[channel];\r\n};\r\n\r\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\r\n{\r\n    var channel = (data_byte & 0x3) + channel_offset;\r\n    var value = data_byte & 0x4 ? 1 : 0;\r\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\r\n    this.update_mask(channel, value);\r\n};\r\n\r\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\r\n{\r\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\r\n    for(var i = 0; i < 4; i++)\r\n    {\r\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\r\n    }\r\n};\r\n\r\nDMA.prototype.port_multimask_read = function(channel_offset)\r\n{\r\n    var value = 0;\r\n    value |= this.channel_mask[channel_offset + 0];\r\n    value |= this.channel_mask[channel_offset + 1] << 1;\r\n    value |= this.channel_mask[channel_offset + 2] << 2;\r\n    value |= this.channel_mask[channel_offset + 3] << 3;\r\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\r\n    return value;\r\n};\r\n\r\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\r\n{\r\n    var channel = (data_byte & 0x3) + channel_offset;\r\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n    this.channel_mode[channel] = data_byte;\r\n};\r\n\r\nDMA.prototype.portC_write = function(data_byte)\r\n{\r\n    dbg_log(\"flipflop reset\", LOG_DMA);\r\n    this.lsb_msb_flipflop = 0;\r\n};\r\n\r\nDMA.prototype.on_unmask = function(fn, this_value)\r\n{\r\n    this.unmask_listeners.push({\r\n        fn: fn,\r\n        this_value: this_value,\r\n    });\r\n};\r\n\r\nDMA.prototype.update_mask = function(channel, value)\r\n{\r\n    if(this.channel_mask[channel] !== value)\r\n    {\r\n        this.channel_mask[channel] = value;\r\n\r\n        if(!value)\r\n        {\r\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\r\n            for(var i = 0; i < this.unmask_listeners.length; i++)\r\n            {\r\n                this.unmask_listeners[i].fn.call(\r\n                    this.unmask_listeners[i].this_value,\r\n                    channel\r\n                );\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// read data, write to memory\r\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\r\n{\r\n    var read_count = this.count_get_8bit(channel),\r\n        addr = this.address_get_8bit(channel);\r\n\r\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\r\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\r\n\r\n    if(len < read_count)\r\n    {\r\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\r\n    }\r\n\r\n    if(start + read_count > buffer.byteLength)\r\n    {\r\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\r\n        fn(true);\r\n    }\r\n    else\r\n    {\r\n        var cpu = this.cpu;\r\n        this.channel_addr[channel] += read_count;\r\n\r\n        buffer.get(start, read_count, function(data)\r\n        {\r\n            cpu.write_blob(data, addr);\r\n            fn(false);\r\n        });\r\n    }\r\n};\r\n\r\n// write data, read memory\r\n// start and len in bytes\r\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\r\n{\r\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\r\n        bytes_per_count = channel >= 5 ? 2 : 1,\r\n        read_bytes = read_count * bytes_per_count,\r\n        addr = this.address_get_8bit(channel),\r\n        unfinished = false,\r\n        want_more = false,\r\n        autoinit = this.channel_mode[channel] & 0x10;\r\n\r\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\r\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\r\n\r\n    if(len < read_bytes)\r\n    {\r\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\r\n        read_count = Math.floor(len / bytes_per_count);\r\n        read_bytes = read_count * bytes_per_count;\r\n        unfinished = true;\r\n    }\r\n    else if(len > read_bytes)\r\n    {\r\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\r\n        want_more = true;\r\n    }\r\n\r\n    if(start + read_bytes > buffer.byteLength)\r\n    {\r\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\r\n        fn(true);\r\n    }\r\n    else\r\n    {\r\n        this.channel_addr[channel] += read_count;\r\n        this.channel_count[channel] -= read_count;\r\n        // when complete, counter should underflow to 0xFFFF\r\n\r\n        if(!unfinished && autoinit)\r\n        {\r\n            dbg_log(\"DMA autoinit\", LOG_DMA);\r\n            this.channel_addr[channel] = this.channel_addr_init[channel];\r\n            this.channel_count[channel] = this.channel_count_init[channel];\r\n        }\r\n\r\n        buffer.set(start,\r\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\r\n                () =>\r\n                {\r\n                    if(want_more && autoinit)\r\n                    {\r\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\r\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\r\n                    }\r\n                    else\r\n                    {\r\n                        fn(false);\r\n                    }\r\n                }\r\n            );\r\n    }\r\n};\r\n\r\nDMA.prototype.address_get_8bit = function(channel)\r\n{\r\n    var addr = this.channel_addr[channel];\r\n\r\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\r\n    if(channel >= 5)\r\n    {\r\n        addr = (addr << 1);\r\n    }\r\n\r\n    addr &= 0xFFFF;\r\n    addr |= this.channel_page[channel] << 16;\r\n    addr |= this.channel_pagehi[channel] << 24;\r\n\r\n    return addr;\r\n};\r\n\r\nDMA.prototype.count_get_8bit = function(channel)\r\n{\r\n    var count = this.channel_count[channel] + 1;\r\n\r\n    if(channel >= 5)\r\n    {\r\n        count *= 2;\r\n    }\r\n\r\n    return count;\r\n};\r\n\r\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\r\n{\r\n    if(!continuing)\r\n    {\r\n        this.lsb_msb_flipflop ^= 1;\r\n    }\r\n\r\n    if(this.lsb_msb_flipflop)\r\n    {\r\n        // low byte\r\n        return old_dword & ~0xFF | new_byte;\r\n    }\r\n    else\r\n    {\r\n        // high byte\r\n        return old_dword & ~0xFF00 | new_byte << 8;\r\n    }\r\n};\r\n\r\nDMA.prototype.flipflop_read = function(dword)\r\n{\r\n    this.lsb_msb_flipflop ^= 1;\r\n\r\n    if(this.lsb_msb_flipflop)\r\n    {\r\n        // low byte\r\n        return dword & 0xFF;\r\n    }\r\n    else\r\n    {\r\n        // high byte\r\n        return (dword >> 8) & 0xFF;\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @const\r\n * In kHz\r\n */\r\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\r\n\r\n/**\r\n * @constructor\r\n *\r\n * Programmable Interval Timer\r\n */\r\nfunction PIT(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.bus = bus;\r\n\r\n    this.counter_start_time = new Float64Array(3);\r\n    this.counter_start_value = new Uint16Array(3);\r\n\r\n    this.counter_next_low = new Uint8Array(4);\r\n    this.counter_enabled = new Uint8Array(4);\r\n    this.counter_mode = new Uint8Array(4);\r\n    this.counter_read_mode = new Uint8Array(4);\r\n\r\n    // 2 = latch low, 1 = latch high, 0 = no latch\r\n    this.counter_latch = new Uint8Array(4);\r\n    this.counter_latch_value = new Uint16Array(3);\r\n\r\n    this.counter_reload = new Uint16Array(3);\r\n\r\n    // TODO:\r\n    // - counter2 can be controlled by an input\r\n\r\n    cpu.io.register_read(0x61, this, function()\r\n    {\r\n        var now = v86.microtick();\r\n\r\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\r\n        var counter2_out = this.did_rollover(2, now);\r\n\r\n        return ref_toggle << 4 | counter2_out << 5;\r\n    });\r\n    cpu.io.register_write(0x61, this, function(data)\r\n    {\r\n        if(data & 1)\r\n        {\r\n            this.bus.send(\"pcspeaker-enable\");\r\n        }\r\n        else\r\n        {\r\n            this.bus.send(\"pcspeaker-disable\");\r\n        }\r\n    });\r\n\r\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\r\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\r\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\r\n\r\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\r\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\r\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\r\n\r\n    cpu.io.register_write(0x43, this, this.port43_write);\r\n}\r\n\r\nPIT.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.counter_next_low;\r\n    state[1] = this.counter_enabled;\r\n    state[2] = this.counter_mode;\r\n    state[3] = this.counter_read_mode;\r\n    state[4] = this.counter_latch;\r\n    state[5] = this.counter_latch_value;\r\n    state[6] = this.counter_reload;\r\n    state[7] = this.counter_start_time;\r\n    state[8] = this.counter_start_value;\r\n\r\n    return state;\r\n};\r\n\r\nPIT.prototype.set_state = function(state)\r\n{\r\n    this.counter_next_low = state[0];\r\n    this.counter_enabled = state[1];\r\n    this.counter_mode = state[2];\r\n    this.counter_read_mode = state[3];\r\n    this.counter_latch = state[4];\r\n    this.counter_latch_value = state[5];\r\n    this.counter_reload = state[6];\r\n    this.counter_start_time = state[7];\r\n    this.counter_start_value = state[8];\r\n};\r\n\r\nPIT.prototype.timer = function(now, no_irq)\r\n{\r\n    var time_to_next_interrupt = 100;\r\n\r\n    // counter 0 produces interrupts\r\n    if(!no_irq)\r\n    {\r\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\r\n        {\r\n            time_to_next_interrupt = 0;\r\n\r\n            this.counter_start_value[0] = this.get_counter_value(0, now);\r\n            this.counter_start_time[0] = now;\r\n\r\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\r\n\r\n            this.cpu.device_raise_irq(0);\r\n            var mode = this.counter_mode[0];\r\n\r\n            if(mode === 0)\r\n            {\r\n                this.counter_enabled[0] = 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.cpu.device_lower_irq(0);\r\n        }\r\n    }\r\n    time_to_next_interrupt = 0;\r\n\r\n    return time_to_next_interrupt;\r\n};\r\n\r\nPIT.prototype.get_counter_value = function(i, now)\r\n{\r\n    if(!this.counter_enabled[i])\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    var diff = now - this.counter_start_time[i];\r\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\r\n\r\n    var value = this.counter_start_value[i] - diff_in_ticks;\r\n\r\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\r\n\r\n    var reload = this.counter_reload[i];\r\n\r\n    if(value >= reload)\r\n    {\r\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\r\n        value %= reload;\r\n    }\r\n    else if(value < 0)\r\n    {\r\n        value = value % reload + reload;\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\nPIT.prototype.did_rollover = function(i, now)\r\n{\r\n    var diff = now - this.counter_start_time[i];\r\n\r\n    if(diff < 0)\r\n    {\r\n        // should only happen after restore_state\r\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\r\n        return true;\r\n    }\r\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\r\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\r\n\r\n    return this.counter_start_value[i] < diff_in_ticks;\r\n};\r\n\r\nPIT.prototype.counter_read = function(i)\r\n{\r\n    var latch = this.counter_latch[i];\r\n\r\n    if(latch)\r\n    {\r\n        this.counter_latch[i]--;\r\n\r\n        if(latch === 2)\r\n        {\r\n            return this.counter_latch_value[i] & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            return this.counter_latch_value[i] >> 8;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        var next_low = this.counter_next_low[i];\r\n\r\n        if(this.counter_mode[i] === 3)\r\n        {\r\n            this.counter_next_low[i] ^= 1;\r\n        }\r\n\r\n        var value = this.get_counter_value(i, v86.microtick());\r\n\r\n        if(next_low)\r\n        {\r\n            return value & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            return value >> 8;\r\n        }\r\n    }\r\n};\r\n\r\nPIT.prototype.counter_write = function(i, value)\r\n{\r\n    if(this.counter_next_low[i])\r\n    {\r\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\r\n    }\r\n    else\r\n    {\r\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\r\n    }\r\n\r\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\r\n    {\r\n        if(!this.counter_reload[i])\r\n        {\r\n            this.counter_reload[i] = 0xFFFF;\r\n        }\r\n\r\n        // depends on the mode, should actually\r\n        // happen on the first tick\r\n        this.counter_start_value[i] = this.counter_reload[i];\r\n\r\n        this.counter_enabled[i] = true;\r\n\r\n        this.counter_start_time[i] = v86.microtick();\r\n\r\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\r\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\r\n    }\r\n\r\n    if(this.counter_read_mode[i] === 3)\r\n    {\r\n        this.counter_next_low[i] ^= 1;\r\n    }\r\n\r\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\r\n};\r\n\r\nPIT.prototype.port43_write = function(reg_byte)\r\n{\r\n    var mode = reg_byte >> 1 & 7,\r\n        binary_mode = reg_byte & 1,\r\n        i = reg_byte >> 6 & 3,\r\n        read_mode = reg_byte >> 4 & 3;\r\n\r\n    if(i === 1)\r\n    {\r\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\r\n    }\r\n\r\n    if(i === 3)\r\n    {\r\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\r\n        return;\r\n    }\r\n\r\n    if(read_mode === 0)\r\n    {\r\n        // latch\r\n        this.counter_latch[i] = 2;\r\n        var value = this.get_counter_value(i, v86.microtick());\r\n        dbg_log(\"latch: \" + value, LOG_PIT);\r\n        this.counter_latch_value[i] = value ? value - 1 : 0\r\n\r\n        return;\r\n    }\r\n\r\n    if(mode >= 6)\r\n    {\r\n        // 6 and 7 are aliased to 2 and 3\r\n        mode &= ~4;\r\n    }\r\n\r\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\r\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\r\n\r\n    if(read_mode === 1)\r\n    {\r\n        // msb\r\n        this.counter_next_low[i] = 0;\r\n    }\r\n    else if(read_mode === 2)\r\n    {\r\n        // lsb\r\n        this.counter_next_low[i] = 1;\r\n    }\r\n    else\r\n    {\r\n        // first lsb then msb\r\n        this.counter_next_low[i] = 1;\r\n    }\r\n\r\n    if(i === 0)\r\n    {\r\n        this.cpu.device_lower_irq(0);\r\n    }\r\n\r\n    if(mode === 0)\r\n    {\r\n    }\r\n    else if(mode === 3 || mode === 2)\r\n    {\r\n        // what is the difference\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\r\n    }\r\n\r\n    this.counter_mode[i] = mode;\r\n    this.counter_read_mode[i] = read_mode;\r\n\r\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\r\n};\r\n","\"use strict\";\r\n\r\n\r\nvar\r\n    /**\r\n     * Always 64k\r\n     * @const\r\n     */\r\n    VGA_BANK_SIZE = 64 * 1024,\r\n\r\n    /** @const */\r\n    MAX_XRES = 2560,\r\n\r\n    /** @const */\r\n    MAX_YRES = 1600,\r\n\r\n    /** @const */\r\n    MAX_BPP = 32;\r\n\r\n/** @const */\r\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\r\nvar VGA_LFB_ADDRESS = 0xE0000000;\r\n\r\n/** @const */\r\nvar VGA_PIXEL_BUFFER_START = 4 * VGA_BANK_SIZE;\r\n\r\n/**\r\n * @const\r\n * Equals the maximum number of pixels for non svga.\r\n * 8 pixels per byte.\r\n */\r\nvar VGA_PIXEL_BUFFER_SIZE = 8 * VGA_BANK_SIZE;\r\n\r\n/** @const */\r\nvar VGA_MIN_MEMORY_SIZE = VGA_PIXEL_BUFFER_START + VGA_PIXEL_BUFFER_SIZE;\r\n\r\n/**\r\n * @const\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\r\n */\r\nvar VGA_HOST_MEMORY_SPACE_START = Uint32Array.from([\r\n    0xA0000,\r\n    0xA0000,\r\n    0xB0000,\r\n    0xB8000,\r\n]);\r\n\r\n/**\r\n * @const\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\r\n */\r\nvar VGA_HOST_MEMORY_SPACE_SIZE = Uint32Array.from([\r\n    0x20000, // 128K\r\n    0x10000, // 64K\r\n    0x8000, // 32K\r\n    0x8000, // 32K\r\n]);\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n * @param {number} vga_memory_size\r\n */\r\nfunction VGAScreen(cpu, bus, vga_memory_size)\r\n{\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    this.vga_memory_size = vga_memory_size;\r\n\r\n    /** @type {number} */\r\n    this.cursor_address = 0;\r\n\r\n    /** @type {number} */\r\n    this.cursor_scanline_start = 0xE;\r\n\r\n    /** @type {number} */\r\n    this.cursor_scanline_end = 0xF;\r\n\r\n    /**\r\n     * Number of columns in text mode\r\n     * @type {number}\r\n     */\r\n    this.max_cols = 80;\r\n\r\n    /**\r\n     * Number of rows in text mode\r\n     * @type {number}\r\n     */\r\n    this.max_rows = 25;\r\n\r\n    /**\r\n     * Width in pixels in graphical mode\r\n     * @type {number}\r\n     */\r\n    this.screen_width = 0;\r\n\r\n    /**\r\n     * Height in pixels in graphical mode\r\n     * @type {number}\r\n     */\r\n    this.screen_height = 0;\r\n\r\n    /**\r\n     * Logical width in pixels of virtual buffer available for panning\r\n     * @type {number}\r\n     */\r\n    this.virtual_width = 0;\r\n\r\n    /**\r\n     * Logical height in pixels of virtual buffer available for panning\r\n     * @type {number}\r\n     */\r\n    this.virtual_height = 0;\r\n\r\n    /**\r\n     * The rectangular fragments of the image buffer, and their destination\r\n     * locations, to be drawn every screen_fill_buffer during VGA modes.\r\n     * @type {Array<Object<string, number>>}\r\n     */\r\n    this.layers = [];\r\n\r\n    /**\r\n     * video memory start address\r\n     * @type {number}\r\n     */\r\n    this.start_address = 0;\r\n\r\n    /**\r\n     * Start address - a copy of start_address that only gets updated\r\n     * during VSync, used for panning and page flipping\r\n     * @type {number}\r\n     */\r\n    this.start_address_latched = 0;\r\n\r\n    /**\r\n     * Unimplemented CRTC registers go here\r\n     */\r\n    this.crtc = new Uint8Array(0x19);\r\n\r\n    // Implemented CRTC registers:\r\n\r\n    /** @type {number} */\r\n    this.crtc_mode = 0;\r\n\r\n    /** @type {number} */\r\n    this.horizontal_display_enable_end = 0;\r\n\r\n    /** @type {number} */\r\n    this.horizontal_blank_start = 0;\r\n\r\n    /** @type {number} */\r\n    this.vertical_display_enable_end = 0;\r\n\r\n    /** @type {number} */\r\n    this.vertical_blank_start = 0;\r\n\r\n    /** @type {number} */\r\n    this.underline_location_register = 0;\r\n\r\n    /** @type {number} */\r\n    this.preset_row_scan = 0;\r\n\r\n    /** @type {number} */\r\n    this.offset_register = 0;\r\n\r\n    /** @type {number} */\r\n    this.line_compare = 0;\r\n\r\n    // End of CRTC registers\r\n\r\n    /**\r\n     * Used for svga, e.g. banked modes\r\n     * @type{boolean}\r\n     */\r\n    this.graphical_mode_is_linear = true;\r\n\r\n    /** @type {boolean} */\r\n    this.graphical_mode = false;\r\n    setTimeout(() => { bus.send(\"screen-set-mode\", this.graphical_mode); }, 0);\r\n\r\n    /*\r\n     * VGA palette containing 256 colors for video mode 13, svga 8bpp, etc.\r\n     * Needs to be initialised by the BIOS\r\n     */\r\n    this.vga256_palette = new Int32Array(256);\r\n\r\n    /**\r\n     * VGA read latches\r\n     * @type{number}\r\n     */\r\n    this.latch_dword = 0;\r\n\r\n    /** @type {number} */\r\n    this.svga_width = 0;\r\n\r\n    /** @type {number} */\r\n    this.svga_height = 0;\r\n\r\n    this.svga_enabled = false;\r\n\r\n    /** @type {number} */\r\n    this.svga_bpp = 32;\r\n\r\n    /** @type {number} */\r\n    this.svga_bank_offset = 0;\r\n\r\n    /**\r\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\r\n     * In bytes\r\n     * @type {number}\r\n     */\r\n    this.svga_offset = 0;\r\n\r\n    // Experimental, could probably need some changes\r\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\r\n    this.pci_space = [\r\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\r\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\r\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\r\n    ];\r\n    this.pci_id = 0x12 << 3;\r\n    this.pci_bars = [\r\n        {\r\n            size: vga_memory_size,\r\n        },\r\n    ];\r\n\r\n    // TODO: Should be matched with vga bios size and mapping address\r\n    // Seabios config for this device:\r\n    // CONFIG_VGA_PCI=y\r\n    // CONFIG_OVERRIDE_PCI_ID=y\r\n    // CONFIG_VGA_VID=0x10de\r\n    // CONFIG_VGA_DID=0x0a20\r\n\r\n    this.pci_rom_size = 0x10000;\r\n    this.pci_rom_address = 0xFEB00000;\r\n\r\n    this.name = \"vga\";\r\n\r\n    this.stats = {\r\n        is_graphical: false,\r\n        res_x: 0,\r\n        res_y: 0,\r\n        bpp: 0,\r\n    };\r\n\r\n    this.index_crtc = 0;\r\n\r\n    // index for setting colors through port 3C9h\r\n    this.dac_color_index_write = 0;\r\n    this.dac_color_index_read = 0;\r\n    this.dac_state = 0;\r\n\r\n    this.dac_map = new Uint8Array(0x10);\r\n\r\n    this.attribute_controller_index = -1;\r\n    this.palette_source = 0x20;\r\n    this.attribute_mode = 0;\r\n    this.color_plane_enable = 0;\r\n    this.horizontal_panning = 0;\r\n    this.color_select = 0;\r\n\r\n    this.sequencer_index = -1;\r\n\r\n    // bitmap of planes 0-3\r\n    this.plane_write_bm = 0xF;\r\n    this.sequencer_memory_mode = 0;\r\n    this.clocking_mode = 0;\r\n    this.graphics_index = -1;\r\n\r\n    this.plane_read = 0, // value 0-3, which plane to read\r\n    this.planar_mode = 0;\r\n    this.planar_rotate_reg = 0;\r\n    this.planar_bitmap = 0xFF;\r\n    this.planar_setreset = 0;\r\n    this.planar_setreset_enable = 0;\r\n    this.miscellaneous_graphics_register = 0;\r\n\r\n    this.color_compare = 0;\r\n    this.color_dont_care = 0;\r\n\r\n    this.max_scan_line = 0;\r\n\r\n    this.miscellaneous_output_register = 0xff;\r\n    this.port_3DA_value = 0xFF;\r\n\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_write(0x3C0, this, this.port3C0_write);\r\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\r\n\r\n    io.register_read(0x3C1, this, this.port3C1_read);\r\n    io.register_write(0x3C2, this, this.port3C2_write);\r\n\r\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\r\n\r\n    io.register_read(0x3C4, this, this.port3C4_read);\r\n    io.register_read(0x3C5, this, this.port3C5_read);\r\n\r\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\r\n\r\n    io.register_read(0x3CE, this, this.port3CE_read);\r\n    io.register_read(0x3CF, this, this.port3CF_read);\r\n\r\n    io.register_write(0x3C7, this, this.port3C7_write);\r\n    io.register_read(0x3C7, this, this.port3C7_read);\r\n    io.register_write(0x3C8, this, this.port3C8_write);\r\n    io.register_read(0x3C8, this, this.port3C8_read);\r\n    io.register_write(0x3C9, this, this.port3C9_write);\r\n    io.register_read(0x3C9, this, this.port3C9_read);\r\n\r\n    io.register_read(0x3CC, this, this.port3CC_read);\r\n\r\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\r\n    io.register_read(0x3D4, this, this.port3D4_read);\r\n    io.register_read(0x3D5, this, this.port3D5_read);\r\n\r\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\r\n\r\n    io.register_read(0x3DA, this, this.port3DA_read);\r\n    io.register_read(0x3BA, this, this.port3DA_read);\r\n\r\n\r\n    // Bochs VBE Extensions\r\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\r\n    this.dispi_index = -1;\r\n    this.dispi_enable_value = 0;\r\n\r\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\r\n\r\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\r\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\r\n\r\n    if(this.vga_memory_size === undefined || this.vga_memory_size < VGA_MIN_MEMORY_SIZE)\r\n    {\r\n        this.vga_memory_size = VGA_MIN_MEMORY_SIZE;\r\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\r\n    }\r\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\r\n    {\r\n        // round up to next 64k\r\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\r\n        this.vga_memory_size++;\r\n    }\r\n\r\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\r\n\r\n    this.diff_addr_min = this.vga_memory_size;\r\n    this.diff_addr_max = 0;\r\n    this.diff_plot_min = this.vga_memory_size;\r\n    this.diff_plot_max = 0;\r\n\r\n    this.dest_buffer = undefined;\r\n\r\n    bus.register(\"screen-tell-buffer\", function(data)\r\n    {\r\n        if(this.dest_buffer && data[0])\r\n        {\r\n            data[0].set(this.dest_buffer.subarray(0, data[0].length));\r\n        }\r\n        this.dest_buffer = data[0];\r\n    }, this);\r\n\r\n    bus.register(\"screen-fill-buffer\", function()\r\n    {\r\n        this.screen_fill_buffer();\r\n    }, this);\r\n\r\n\r\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\r\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\r\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\r\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.pixel_buffer = new Uint8Array(this.svga_memory.buffer,\r\n        VGA_PIXEL_BUFFER_START, VGA_PIXEL_BUFFER_SIZE);\r\n\r\n    var me = this;\r\n    io.mmap_register(0xA0000, 0x20000,\r\n        function(addr) { return me.vga_memory_read(addr); },\r\n        function(addr, value) { me.vga_memory_write(addr, value); }\r\n    );\r\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\r\n        function(addr) { return me.svga_memory_read8(addr); },\r\n        function(addr, value) { me.svga_memory_write8(addr, value); },\r\n        function(addr) { return me.svga_memory_read32(addr); },\r\n        function(addr, value) { me.svga_memory_write32(addr, value); }\r\n    );\r\n\r\n    cpu.devices.pci.register_device(this);\r\n}\r\n\r\nVGAScreen.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.vga_memory_size;\r\n    state[1] = this.cursor_address;\r\n    state[2] = this.cursor_scanline_start;\r\n    state[3] = this.cursor_scanline_end;\r\n    state[4] = this.max_cols;\r\n    state[5] = this.max_rows;\r\n    state[6] = this.layers;\r\n    state[7] = this.dac_state;\r\n    state[8] = this.start_address;\r\n    state[9] = this.graphical_mode;\r\n    state[10] = this.vga256_palette;\r\n    state[11] = this.latch_dword;\r\n    state[12] = this.color_compare;\r\n    state[13] = this.color_dont_care;\r\n    state[14] = this.miscellaneous_graphics_register;\r\n    state[15] = this.svga_width;\r\n    state[16] = this.svga_height;\r\n    state[17] = this.crtc_mode;\r\n    state[18] = this.svga_enabled;\r\n    state[19] = this.svga_bpp;\r\n    state[20] = this.svga_bank_offset;\r\n    state[21] = this.svga_offset;\r\n    state[22] = this.index_crtc;\r\n    state[23] = this.dac_color_index_write;\r\n    state[24] = this.dac_color_index_read;\r\n    state[25] = this.dac_map;\r\n    state[26] = this.sequencer_index;\r\n    state[27] = this.plane_write_bm;\r\n    state[28] = this.sequencer_memory_mode;\r\n    state[29] = this.graphics_index;\r\n    state[30] = this.plane_read;\r\n    state[31] = this.planar_mode;\r\n    state[32] = this.planar_rotate_reg;\r\n    state[33] = this.planar_bitmap;\r\n    state[34] = this.max_scan_line;\r\n    state[35] = this.miscellaneous_output_register;\r\n    state[36] = this.port_3DA_value;\r\n    state[37] = this.dispi_index;\r\n    state[38] = this.dispi_enable_value;\r\n    state[39] = this.svga_memory;\r\n    state[40] = this.graphical_mode_is_linear;\r\n    state[41] = this.attribute_controller_index;\r\n    state[42] = this.offset_register;\r\n    state[43] = this.planar_setreset;\r\n    state[44] = this.planar_setreset_enable;\r\n    state[45] = this.start_address_latched;\r\n    state[46] = this.crtc;\r\n    state[47] = this.horizontal_display_enable_end;\r\n    state[48] = this.horizontal_blank_start;\r\n    state[49] = this.vertical_display_enable_end;\r\n    state[50] = this.vertical_blank_start;\r\n    state[51] = this.underline_location_register;\r\n    state[52] = this.preset_row_scan;\r\n    state[53] = this.offset_register;\r\n    state[54] = this.palette_source;\r\n    state[55] = this.attribute_mode;\r\n    state[56] = this.color_plane_enable;\r\n    state[57] = this.horizontal_panning;\r\n    state[58] = this.color_select;\r\n    state[59] = this.clocking_mode;\r\n    state[60] = this.line_compare;\r\n\r\n    return state;\r\n};\r\n\r\nVGAScreen.prototype.set_state = function(state)\r\n{\r\n    this.vga_memory_size = state[0];\r\n    this.cursor_address = state[1];\r\n    this.cursor_scanline_start = state[2];\r\n    this.cursor_scanline_end = state[3];\r\n    this.max_cols = state[4];\r\n    this.max_rows = state[5];\r\n    this.layers = state[6];\r\n    this.dac_state = state[7];\r\n    this.start_address = state[8];\r\n    this.graphical_mode = state[9];\r\n    this.vga256_palette = state[10];\r\n    this.latch_dword = state[11];\r\n    this.color_compare = state[12];\r\n    this.color_dont_care = state[13];\r\n    this.miscellaneous_graphics_register = state[14];\r\n    this.svga_width = state[15];\r\n    this.svga_height = state[16];\r\n    this.crtc_mode = state[17];\r\n    this.svga_enabled = state[18];\r\n    this.svga_bpp = state[19];\r\n    this.svga_bank_offset = state[20];\r\n    this.svga_offset = state[21];\r\n    this.index_crtc = state[22];\r\n    this.dac_color_index_write = state[23];\r\n    this.dac_color_index_read = state[24];\r\n    this.dac_map = state[25];\r\n    this.sequencer_index = state[26];\r\n    this.plane_write_bm = state[27];\r\n    this.sequencer_memory_mode = state[28];\r\n    this.graphics_index = state[29];\r\n    this.plane_read = state[30];\r\n    this.planar_mode = state[31];\r\n    this.planar_rotate_reg = state[32];\r\n    this.planar_bitmap = state[33];\r\n    this.max_scan_line = state[34];\r\n    this.miscellaneous_output_register = state[35];\r\n    this.port_3DA_value = state[36];\r\n    this.dispi_index = state[37];\r\n    this.dispi_enable_value = state[38];\r\n    this.svga_memory.set(state[39]);\r\n    this.graphical_mode_is_linear = state[40];\r\n    this.attribute_controller_index = state[41];\r\n    this.offset_register = state[42];\r\n    this.planar_setreset = state[43];\r\n    this.planar_setreset_enable = state[44];\r\n    this.start_address_latched = state[45];\r\n    this.crtc.set(state[46]);\r\n    this.horizontal_display_enable_end = state[47];\r\n    this.horizontal_blank_start = state[48];\r\n    this.vertical_display_enable_end = state[49];\r\n    this.vertical_blank_start = state[50];\r\n    this.underline_location_register = state[51];\r\n    this.preset_row_scan = state[52];\r\n    this.offset_register = state[53];\r\n    this.palette_source = state[54];\r\n    this.attribute_mode = state[55];\r\n    this.color_plane_enable = state[56];\r\n    this.horizontal_panning = state[57];\r\n    this.color_select = state[58];\r\n    this.clocking_mode = state[59];\r\n    this.line_compare = state[60];\r\n\r\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        // Ensure set_size_graphical will update\r\n        this.screen_width = 0;\r\n        this.screen_height = 0;\r\n\r\n        if(this.svga_enabled)\r\n        {\r\n            this.set_size_graphical(this.svga_width, this.svga_height,\r\n                this.svga_bpp, this.svga_width, this.svga_height);\r\n            this.update_layers();\r\n        }\r\n        else\r\n        {\r\n            this.update_vga_size();\r\n            this.complete_replot();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.set_size_text(this.max_cols, this.max_rows);\r\n        this.update_cursor_scanline();\r\n        this.update_cursor();\r\n    }\r\n    this.complete_redraw();\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_read = function(addr)\r\n{\r\n    if(this.svga_enabled && this.graphical_mode_is_linear)\r\n    {\r\n        addr -= 0xA0000;\r\n        addr |= this.svga_bank_offset;\r\n\r\n        return this.svga_memory[addr];\r\n    }\r\n\r\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\r\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\r\n\r\n    // VGA chip only decodes addresses within the selected memory space.\r\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\r\n    {\r\n        dbg_log(\"vga read outside memory space: addr:\" + h(addr), LOG_VGA);\r\n        return 0;\r\n    }\r\n\r\n    this.latch_dword = this.plane0[addr];\r\n    this.latch_dword |= this.plane1[addr] << 8;\r\n    this.latch_dword |= this.plane2[addr] << 16;\r\n    this.latch_dword |= this.plane3[addr] << 24;\r\n\r\n    if(this.planar_mode & 0x08)\r\n    {\r\n        // read mode 1\r\n        var reading = 0xFF;\r\n\r\n        if(this.color_dont_care & 0x1)\r\n        {\r\n            reading &= this.plane0[addr] ^ ~(this.color_compare & 0x1 ? 0xFF : 0x00);\r\n        }\r\n        if(this.color_dont_care & 0x2)\r\n        {\r\n            reading &= this.plane1[addr] ^ ~(this.color_compare & 0x2 ? 0xFF : 0x00);\r\n        }\r\n        if(this.color_dont_care & 0x4)\r\n        {\r\n            reading &= this.plane2[addr] ^ ~(this.color_compare & 0x4 ? 0xFF : 0x00);\r\n        }\r\n        if(this.color_dont_care & 0x8)\r\n        {\r\n            reading &= this.plane3[addr] ^ ~(this.color_compare & 0x8 ? 0xFF : 0x00);\r\n        }\r\n\r\n        return reading;\r\n    }\r\n    else\r\n    {\r\n        // read mode 0\r\n\r\n        var plane = this.plane_read;\r\n        if(!this.graphical_mode)\r\n        {\r\n            // We currently put all text data linearly\r\n            plane = 0;\r\n        }\r\n        else if(this.sequencer_memory_mode & 0x8)\r\n        {\r\n            // Chain 4\r\n            plane = addr & 0x3;\r\n            addr &= ~0x3;\r\n        }\r\n        else if(this.planar_mode & 0x10)\r\n        {\r\n            // Odd/Even host read\r\n            plane = addr & 0x1;\r\n            addr &= ~0x1;\r\n        }\r\n        return this.vga_memory[plane << 16 | addr];\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write = function(addr, value)\r\n{\r\n    if(this.svga_enabled && this.graphical_mode && this.graphical_mode_is_linear)\r\n    {\r\n        // vbe banked mode\r\n        addr -= 0xA0000;\r\n        this.vga_memory_write_graphical_linear(addr, value);\r\n        return;\r\n    }\r\n\r\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\r\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\r\n\r\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\r\n    {\r\n        dbg_log(\"vga write outside memory space: addr:\" + h(addr) + \", value:\" + h(value), LOG_VGA);\r\n        return;\r\n    }\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        this.vga_memory_write_graphical(addr, value);\r\n    }\r\n    else\r\n    {\r\n        if(!(this.plane_write_bm & 0x3))\r\n        {\r\n            // Ignore writes to font planes.\r\n            return;\r\n        }\r\n        this.vga_memory_write_text_mode(addr, value);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\r\n{\r\n    addr |= this.svga_bank_offset;\r\n\r\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\r\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\r\n\r\n    this.svga_memory[addr] = value;\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write_graphical = function(addr, value)\r\n{\r\n    var plane_dword;\r\n    var write_mode = this.planar_mode & 3;\r\n    var bitmask = this.apply_feed(this.planar_bitmap);\r\n    var setreset_dword = this.apply_expand(this.planar_setreset);\r\n    var setreset_enable_dword = this.apply_expand(this.planar_setreset_enable);\r\n\r\n    // Write modes - see http://www.osdever.net/FreeVGA/vga/graphreg.htm#05\r\n    switch(write_mode)\r\n    {\r\n        case 0:\r\n            value = this.apply_rotate(value);\r\n            plane_dword = this.apply_feed(value);\r\n            plane_dword = this.apply_setreset(plane_dword, setreset_enable_dword);\r\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\r\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\r\n            break;\r\n        case 1:\r\n            plane_dword = this.latch_dword;\r\n            break;\r\n        case 2:\r\n            plane_dword = this.apply_expand(value);\r\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\r\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\r\n            break;\r\n        case 3:\r\n            value = this.apply_rotate(value);\r\n            bitmask &= this.apply_feed(value);\r\n            plane_dword = setreset_dword;\r\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\r\n            break;\r\n    }\r\n\r\n    var plane_select = 0xF;\r\n\r\n    switch(this.sequencer_memory_mode & 0xC)\r\n    {\r\n        // Odd/Even (aka chain 2)\r\n        case 0x0:\r\n            plane_select = 0x5 << (addr & 0x1);\r\n            addr &= ~0x1;\r\n            break;\r\n\r\n        // Chain 4\r\n        // Note: FreeVGA may have mistakenly stated that this bit field is\r\n        // for system read only, yet the IBM Open Source Graphics Programmer's\r\n        // Reference Manual explicitly states \"both read and write\".\r\n        case 0x8:\r\n        case 0xC:\r\n            plane_select = 1 << (addr & 0x3);\r\n            addr &= ~0x3;\r\n            break;\r\n    }\r\n\r\n    // Plane masks take precedence\r\n    // See: http://www.osdever.net/FreeVGA/vga/seqreg.htm#02\r\n    plane_select &= this.plane_write_bm;\r\n\r\n    if(plane_select & 0x1) this.plane0[addr] = (plane_dword >> 0) & 0xFF;\r\n    if(plane_select & 0x2) this.plane1[addr] = (plane_dword >> 8) & 0xFF;\r\n    if(plane_select & 0x4) this.plane2[addr] = (plane_dword >> 16) & 0xFF;\r\n    if(plane_select & 0x8) this.plane3[addr] = (plane_dword >> 24) & 0xFF;\r\n\r\n    var pixel_addr = this.vga_addr_to_pixel(addr);\r\n    this.partial_replot(pixel_addr, pixel_addr + 7);\r\n};\r\n\r\n/**\r\n * Copies data_byte into the four planes, with each plane\r\n * represented by an 8-bit field inside the dword.\r\n * @param {number} data_byte\r\n * @return {number} 32-bit number representing the bytes for each plane.\r\n */\r\nVGAScreen.prototype.apply_feed = function(data_byte)\r\n{\r\n    var dword = data_byte;\r\n    dword |= data_byte << 8;\r\n    dword |= data_byte << 16;\r\n    dword |= data_byte << 24;\r\n    return dword;\r\n};\r\n\r\n/**\r\n * Expands bits 0 to 3 to ocupy bits 0 to 31. Each\r\n * bit is expanded to 0xFF if set or 0x00 if clear.\r\n * @param {number} data_byte\r\n * @return {number} 32-bit number representing the bytes for each plane.\r\n */\r\nVGAScreen.prototype.apply_expand = function(data_byte)\r\n{\r\n    var dword = data_byte & 0x1 ? 0xFF : 0x00;\r\n    dword |= (data_byte & 0x2 ? 0xFF : 0x00) << 8;\r\n    dword |= (data_byte & 0x4 ? 0xFF : 0x00) << 16;\r\n    dword |= (data_byte & 0x8 ? 0xFF : 0x00) << 24;\r\n    return dword;\r\n};\r\n\r\n/**\r\n * Planar Write - Barrel Shifter\r\n * @param {number} data_byte\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading3}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\r\n */\r\nVGAScreen.prototype.apply_rotate = function(data_byte)\r\n{\r\n    var wrapped = data_byte | (data_byte << 8);\r\n    var count = this.planar_rotate_reg & 0x7;\r\n    var shifted = wrapped >>> count;\r\n    return shifted & 0xFF;\r\n};\r\n\r\n/**\r\n * Planar Write - Set / Reset Circuitry\r\n * @param {number} data_dword\r\n * @param {number} enable_dword\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-03.html#Heading5}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#00}\r\n */\r\nVGAScreen.prototype.apply_setreset = function(data_dword, enable_dword)\r\n{\r\n    var setreset_dword = this.apply_expand(this.planar_setreset);\r\n    data_dword |= enable_dword & setreset_dword;\r\n    data_dword &= ~enable_dword | setreset_dword;\r\n    return data_dword;\r\n};\r\n\r\n/**\r\n * Planar Write - ALU Unit\r\n * @param {number} data_dword\r\n * @param {number} latch_dword\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch24/24-01.html#Heading3}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\r\n */\r\nVGAScreen.prototype.apply_logical = function(data_dword, latch_dword)\r\n{\r\n    switch(this.planar_rotate_reg & 0x18)\r\n    {\r\n        case 0x08:\r\n            return data_dword & latch_dword;\r\n        case 0x10:\r\n            return data_dword | latch_dword;\r\n        case 0x18:\r\n            return data_dword ^ latch_dword;\r\n    }\r\n    return data_dword;\r\n};\r\n\r\n/**\r\n * Planar Write - Bitmask Unit\r\n * @param {number} data_dword\r\n * @param {number} bitmask_dword\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading2}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#08}\r\n */\r\nVGAScreen.prototype.apply_bitmask = function(data_dword, bitmask_dword)\r\n{\r\n    var plane_dword = bitmask_dword & data_dword;\r\n    plane_dword |= ~bitmask_dword & this.latch_dword;\r\n    return plane_dword;\r\n};\r\n\r\nVGAScreen.prototype.text_mode_redraw = function()\r\n{\r\n    var addr = this.start_address << 1,\r\n        chr,\r\n        color;\r\n\r\n    for(var row = 0; row < this.max_rows; row++)\r\n    {\r\n        for(var col = 0; col < this.max_cols; col++)\r\n        {\r\n            chr = this.vga_memory[addr];\r\n            color = this.vga_memory[addr | 1];\r\n\r\n            this.bus.send(\"screen-put-char\", [row, col, chr,\r\n                this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\r\n\r\n            addr += 2;\r\n        }\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\r\n{\r\n    var memory_start = (addr >> 1) - this.start_address,\r\n        row = memory_start / this.max_cols | 0,\r\n        col = memory_start % this.max_cols,\r\n        chr,\r\n        color;\r\n\r\n    // XXX: Should handle 16 bit write if possible\r\n    if(addr & 1)\r\n    {\r\n        color = value;\r\n        chr = this.vga_memory[addr & ~1];\r\n    }\r\n    else\r\n    {\r\n        chr = value;\r\n        color = this.vga_memory[addr | 1];\r\n    }\r\n\r\n    this.bus.send(\"screen-put-char\", [row, col, chr,\r\n            this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\r\n\r\n    this.vga_memory[addr] = value;\r\n};\r\n\r\nVGAScreen.prototype.update_cursor = function()\r\n{\r\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\r\n        col = (this.cursor_address - this.start_address) % this.max_cols;\r\n\r\n    row = Math.min(this.max_rows - 1, row);\r\n\r\n    this.bus.send(\"screen-update-cursor\", [row, col]);\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_read8 = function(addr)\r\n{\r\n    return this.svga_memory[addr & 0xFFFFFFF];\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_read32 = function(addr)\r\n{\r\n    addr &= 0xFFFFFFF;\r\n\r\n    if(addr & 3)\r\n    {\r\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\r\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\r\n    }\r\n    else\r\n    {\r\n        return this.svga_memory32[addr >> 2];\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\r\n{\r\n    addr &= 0xFFFFFFF;\r\n    this.svga_memory[addr] = value;\r\n\r\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\r\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\r\n{\r\n    addr &= 0xFFFFFFF;\r\n\r\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\r\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\r\n\r\n    this.svga_memory[addr] = value;\r\n    this.svga_memory[addr + 1] = value >> 8;\r\n    this.svga_memory[addr + 2] = value >> 16;\r\n    this.svga_memory[addr + 3] = value >> 24;\r\n};\r\n\r\nVGAScreen.prototype.complete_redraw = function()\r\n{\r\n    dbg_log(\"complete redraw\", LOG_VGA);\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        this.diff_addr_min = 0;\r\n\r\n        if(this.svga_enabled)\r\n        {\r\n            this.diff_addr_max = this.vga_memory_size;\r\n        }\r\n        else\r\n        {\r\n            this.diff_addr_max = VGA_PIXEL_BUFFER_SIZE;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.text_mode_redraw();\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.complete_replot = function()\r\n{\r\n    dbg_log(\"complete replot\", LOG_VGA);\r\n\r\n    if(!this.graphical_mode || this.svga_enabled)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.diff_plot_min = 0;\r\n    this.diff_plot_max = VGA_PIXEL_BUFFER_SIZE;\r\n\r\n    this.complete_redraw();\r\n};\r\n\r\nVGAScreen.prototype.partial_redraw = function(min, max)\r\n{\r\n    if(min < this.diff_addr_min) this.diff_addr_min = min;\r\n    if(max > this.diff_addr_max) this.diff_addr_max = max;\r\n};\r\n\r\nVGAScreen.prototype.partial_replot = function(min, max)\r\n{\r\n    if(min < this.diff_plot_min) this.diff_plot_min = min;\r\n    if(max > this.diff_plot_max) this.diff_plot_max = max;\r\n\r\n    this.partial_redraw(min, max);\r\n};\r\n\r\nVGAScreen.prototype.reset_diffs = function()\r\n{\r\n    this.diff_addr_min = this.vga_memory_size;\r\n    this.diff_addr_max = 0;\r\n    this.diff_plot_min = this.vga_memory_size;\r\n    this.diff_plot_max = 0;\r\n};\r\n\r\nVGAScreen.prototype.destroy = function()\r\n{\r\n\r\n};\r\n\r\nVGAScreen.prototype.vga_bytes_per_line = function()\r\n{\r\n    var bytes_per_line = this.offset_register << 2;\r\n    if(this.underline_location_register & 0x40) bytes_per_line <<= 1;\r\n    else if(this.crtc_mode & 0x40) bytes_per_line >>>= 1;\r\n    return bytes_per_line;\r\n};\r\n\r\nVGAScreen.prototype.vga_addr_shift_count = function()\r\n{\r\n    // Count in multiples of 0x40 for convenience\r\n    // Left shift 2 for word mode - 2 bytes per dot clock\r\n    var shift_count = 0x80;\r\n\r\n    // Left shift 3 for byte mode - 1 byte per dot clock\r\n    shift_count += ~this.underline_location_register & this.crtc_mode & 0x40;\r\n\r\n    // Left shift 1 for doubleword mode - 4 bytes per dot clock\r\n    shift_count -= this.underline_location_register & 0x40;\r\n\r\n    // But shift one less if PEL width mode - 2 dot clocks per pixel\r\n    shift_count -= this.attribute_mode & 0x40;\r\n\r\n    return shift_count >>> 6;\r\n};\r\n\r\nVGAScreen.prototype.vga_addr_to_pixel = function(addr)\r\n{\r\n    var shift_count = this.vga_addr_shift_count();\r\n\r\n    // Undo effects of substituted bits 13 and 14\r\n    // Assumptions:\r\n    //  - max_scan_line register is set to the values shown below\r\n    //  - Each scan line stays within the offset alignment\r\n    //  - No panning and no page flipping after drawing\r\n    if(~this.crtc_mode & 0x3)\r\n    {\r\n        var pixel_addr = addr - this.start_address;\r\n\r\n        // Remove substituted bits\r\n        pixel_addr &= this.crtc_mode << 13 | ~0x6000;\r\n\r\n        // Convert to 1 pixel per address\r\n        pixel_addr <<= shift_count;\r\n\r\n        // Decompose address\r\n        var row = pixel_addr / this.virtual_width | 0;\r\n        var col = pixel_addr % this.virtual_width;\r\n\r\n        switch(this.crtc_mode & 0x3)\r\n        {\r\n            case 0x2:\r\n                // Alternating rows using bit 13\r\n                // Assumes max scan line = 1\r\n                row = row << 1 | (addr >> 13 & 0x1);\r\n                break;\r\n            case 0x1:\r\n                // Alternating rows using bit 14\r\n                // Assumes max scan line = 3\r\n                row = row << 1 | (addr >> 14 & 0x1);\r\n                break;\r\n            case 0x0:\r\n                // Cycling through rows using bit 13 and 14\r\n                // Assumes max scan line = 3\r\n                row = row << 2 | (addr >> 13 & 0x3);\r\n                break;\r\n        }\r\n\r\n        // Reassemble address\r\n        return row * this.virtual_width + col + (this.start_address << shift_count);\r\n    }\r\n    else\r\n    {\r\n        // Convert to 1 pixel per address\r\n        return addr << shift_count;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.scan_line_to_screen_row = function(scan_line)\r\n{\r\n    // Double scanning. The clock to the row scan counter is halved\r\n    // so it is not affected by the memory address bit substitutions below\r\n    if(this.max_scan_line & 0x80)\r\n    {\r\n        scan_line >>>= 1;\r\n    }\r\n\r\n    // Maximum scan line, aka scan lines per character row\r\n    // This is the number of repeats - 1 for graphic modes\r\n    var repeat_factor = 1 + (this.max_scan_line & 0x1F);\r\n    scan_line = Math.ceil(scan_line / repeat_factor);\r\n\r\n    // Odd and Even Row Scan Counter\r\n    // Despite repeated address counter values, because bit 13 of the shifted\r\n    // address is substituted with bit 0 of the row scan counter, a different\r\n    // display buffer address is generated instead of repeated\r\n    // Assumes maximum scan line register is set to 2 or 4.\r\n    // Note: can't assert this as register values may not be fully programmed.\r\n    if(!(this.crtc_mode & 0x1))\r\n    {\r\n        scan_line <<= 1;\r\n    }\r\n\r\n    // Undo effects of substituted bit 14\r\n    // Assumes maximum scan line register is set to 2 or 4\r\n    // Note: can't assert this as register values may not be fully programmed.\r\n    // Other maximum scan line register values would result in weird addressing\r\n    // anyway\r\n    if(!(this.crtc_mode & 0x2))\r\n    {\r\n        scan_line <<= 1;\r\n    }\r\n\r\n    return scan_line;\r\n};\r\n\r\n/**\r\n * @param {number} cols_count\r\n * @param {number} rows_count\r\n */\r\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\r\n{\r\n    this.max_cols = cols_count;\r\n    this.max_rows = rows_count;\r\n\r\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\r\n};\r\n\r\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp, virtual_width, virtual_height)\r\n{\r\n    var needs_update = !this.stats.is_graphical ||\r\n        this.stats.bpp !== bpp ||\r\n        this.screen_width !== width ||\r\n        this.screen_height !== height ||\r\n        this.virtual_width !== virtual_width ||\r\n        this.virtual_height !== virtual_height;\r\n\r\n    if(needs_update)\r\n    {\r\n        this.screen_width = width;\r\n        this.screen_height = height;\r\n        this.virtual_width = virtual_width;\r\n        this.virtual_height = virtual_height;\r\n\r\n        this.stats.bpp = bpp;\r\n        this.stats.is_graphical = true;\r\n        this.stats.res_x = width;\r\n        this.stats.res_y = height;\r\n\r\n        this.bus.send(\"screen-set-size-graphical\", [width, height, virtual_width, virtual_height, bpp]);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_vga_size = function()\r\n{\r\n    if(this.svga_enabled)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var horizontal_characters = Math.min(1 + this.horizontal_display_enable_end,\r\n        this.horizontal_blank_start);\r\n    var vertical_scans = Math.min(1 + this.vertical_display_enable_end,\r\n        this.vertical_blank_start);\r\n\r\n    if(!horizontal_characters || !vertical_scans)\r\n    {\r\n        // Don't update if width or height is zero.\r\n        // These happen when registers are not fully configured yet.\r\n        return;\r\n    }\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        var screen_width = horizontal_characters << 3;\r\n\r\n        // Offset is half the number of bytes/words/dwords (depending on clocking mode)\r\n        // of display memory that each logical line occupies.\r\n        // However, the number of pixels latched, regardless of addressing mode,\r\n        // should always 8 pixels per character clock (except for 8 bit PEL width, in which\r\n        // case 4 pixels).\r\n        var virtual_width = this.offset_register << 4;\r\n\r\n        // Pixel Width / PEL Width / Clock Select\r\n        if(this.attribute_mode & 0x40)\r\n        {\r\n            screen_width >>>= 1;\r\n            virtual_width >>>= 1;\r\n        }\r\n\r\n        var screen_height = this.scan_line_to_screen_row(vertical_scans);\r\n\r\n        // The virtual buffer height is however many rows of data that can fit.\r\n        // Previously drawn graphics outside of current memory address space can\r\n        // still be drawn by setting start_address. The address at\r\n        // VGA_HOST_MEMORY_SPACE_START[memory_space_select] is mapped to the first\r\n        // byte of the frame buffer. Verified on some hardware.\r\n        // Depended on by: Windows 98 start screen\r\n        var available_bytes = VGA_HOST_MEMORY_SPACE_SIZE[0];\r\n\r\n        var virtual_height = Math.ceil(available_bytes / this.vga_bytes_per_line());\r\n\r\n        this.set_size_graphical(screen_width, screen_height, 8,\r\n            virtual_width, virtual_height);\r\n\r\n        this.update_vertical_retrace();\r\n        this.update_layers();\r\n    }\r\n    else\r\n    {\r\n        if(this.max_scan_line & 0x80)\r\n        {\r\n            // Double scanning means that half of those scan lines\r\n            // are just repeats\r\n            vertical_scans >>>= 1;\r\n        }\r\n\r\n        var height = vertical_scans / (1 + (this.max_scan_line & 0x1F)) | 0;\r\n\r\n        if(horizontal_characters && height)\r\n        {\r\n            this.set_size_text(horizontal_characters, height);\r\n        }\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_layers = function()\r\n{\r\n    if(!this.graphical_mode)\r\n    {\r\n        this.text_mode_redraw();\r\n    }\r\n\r\n    if(this.svga_enabled)\r\n    {\r\n        this.layers = [];\r\n        return;\r\n    }\r\n\r\n    if(!this.virtual_width || !this.screen_width)\r\n    {\r\n        // Avoid division by zero\r\n        return;\r\n    }\r\n\r\n    if(!this.palette_source || (this.clocking_mode & 0x20))\r\n    {\r\n        // Palette source and screen disable bits = draw nothing\r\n        // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\r\n        // and http://www.osdever.net/FreeVGA/vga/seqreg.htm#01\r\n        this.layers = [];\r\n        this.bus.send(\"screen-clear\");\r\n        return;\r\n    }\r\n\r\n    var start_addr = this.start_address_latched;\r\n\r\n    var pixel_panning = this.horizontal_panning;\r\n    if(this.attribute_mode & 0x40)\r\n    {\r\n        pixel_panning >>>= 1;\r\n    }\r\n\r\n    var byte_panning = this.preset_row_scan >> 5 & 0x3;\r\n    var pixel_addr_start = this.vga_addr_to_pixel(start_addr + byte_panning);\r\n\r\n    var start_buffer_row = pixel_addr_start / this.virtual_width | 0;\r\n    var start_buffer_col = pixel_addr_start % this.virtual_width + pixel_panning;\r\n\r\n    var split_screen_row = this.scan_line_to_screen_row(1 + this.line_compare);\r\n    split_screen_row = Math.min(split_screen_row, this.screen_height);\r\n\r\n    var split_buffer_height = this.screen_height - split_screen_row;\r\n\r\n    this.layers = [];\r\n\r\n    for(var x = -start_buffer_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\r\n    {\r\n        this.layers.push({\r\n            screen_x: x,\r\n            screen_y: 0,\r\n            buffer_x: 0,\r\n            buffer_y: start_buffer_row + y,\r\n            buffer_width: this.virtual_width,\r\n            buffer_height: split_screen_row,\r\n        });\r\n    }\r\n\r\n    var start_split_col = 0;\r\n    if(!(this.attribute_mode & 0x20))\r\n    {\r\n        // Pixel panning mode. Allow panning for the lower split screen\r\n        start_split_col = this.vga_addr_to_pixel(byte_panning) + pixel_panning;\r\n    }\r\n\r\n    for(var x = -start_split_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\r\n    {\r\n        this.layers.push({\r\n            screen_x: x,\r\n            screen_y: split_screen_row,\r\n            buffer_x: 0,\r\n            buffer_y: y,\r\n            buffer_width: this.virtual_width,\r\n            buffer_height: split_buffer_height,\r\n        });\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_vertical_retrace = function()\r\n{\r\n    // Emulate behaviour during VSync/VRetrace\r\n    this.port_3DA_value |= 0x8;\r\n    if(this.start_address_latched !== this.start_address)\r\n    {\r\n        this.start_address_latched = this.start_address;\r\n        this.update_layers();\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_cursor_scanline = function()\r\n{\r\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\r\n};\r\n\r\n/**\r\n * Attribute controller register / index write\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/attrreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 89\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 48\r\n */\r\nVGAScreen.prototype.port3C0_write = function(value)\r\n{\r\n    if(this.attribute_controller_index === -1)\r\n    {\r\n        dbg_log(\"attribute controller index register: \" + h(value), LOG_VGA);\r\n        this.attribute_controller_index = value & 0x1F;\r\n        dbg_log(\"attribute actual index: \" + h(this.attribute_controller_index), LOG_VGA);\r\n\r\n        if(this.palette_source !== (value & 0x20))\r\n        {\r\n            // A method of blanking the screen.\r\n            // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\r\n            this.palette_source = value & 0x20;\r\n            this.update_layers();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(this.attribute_controller_index < 0x10)\r\n        {\r\n            dbg_log(\"internal palette: \" + h(this.attribute_controller_index) + \" -> \" + h(value), LOG_VGA);\r\n            this.dac_map[this.attribute_controller_index] = value;\r\n\r\n            if(!(this.attribute_mode & 0x40))\r\n            {\r\n                this.complete_redraw();\r\n            }\r\n        }\r\n        else\r\n        switch(this.attribute_controller_index)\r\n        {\r\n            case 0x10:\r\n                dbg_log(\"3C0 / attribute mode control: \" + h(value), LOG_VGA);\r\n                if(this.attribute_mode !== value)\r\n                {\r\n                    var previous_mode = this.attribute_mode;\r\n                    this.attribute_mode = value;\r\n\r\n                    var is_graphical = (value & 0x1) > 0;\r\n                    if(!this.svga_enabled && this.graphical_mode !== is_graphical)\r\n                    {\r\n                        this.graphical_mode = is_graphical;\r\n                        this.bus.send(\"screen-set-mode\", this.graphical_mode);\r\n                    }\r\n\r\n                    if((previous_mode ^ value) & 0x40)\r\n                    {\r\n                        // PEL width changed. Pixel Buffer now invalidated\r\n                        this.complete_replot();\r\n                    }\r\n\r\n                    this.update_vga_size();\r\n\r\n                    // Data stored in image buffer are invalidated\r\n                    this.complete_redraw();\r\n                }\r\n                break;\r\n            case 0x12:\r\n                dbg_log(\"3C0 / color plane enable: \" + h(value), LOG_VGA);\r\n                if(this.color_plane_enable !== value)\r\n                {\r\n                    this.color_plane_enable = value;\r\n\r\n                    // Data stored in image buffer are invalidated\r\n                    this.complete_redraw();\r\n                }\r\n                break;\r\n            case 0x13:\r\n                dbg_log(\"3C0 / horizontal panning: \" + h(value), LOG_VGA);\r\n                if(this.horizontal_panning !== value)\r\n                {\r\n                    this.horizontal_panning = value & 0xF;\r\n                    this.update_layers();\r\n                }\r\n                break;\r\n            case 0x14:\r\n                dbg_log(\"3C0 / color select: \" + h(value), LOG_VGA);\r\n                if(this.color_select !== value)\r\n                {\r\n                    this.color_select = value;\r\n\r\n                    // Data stored in image buffer are invalidated\r\n                    this.complete_redraw();\r\n                }\r\n                break;\r\n            default:\r\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\r\n        }\r\n\r\n        this.attribute_controller_index = -1;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3C0_read = function()\r\n{\r\n    dbg_log(\"3C0 read\", LOG_VGA);\r\n    var result = this.attribute_controller_index | this.palette_source;\r\n    return result;\r\n};\r\n\r\nVGAScreen.prototype.port3C0_read16 = function()\r\n{\r\n    dbg_log(\"3C0 read16\", LOG_VGA);\r\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\r\n};\r\n\r\nVGAScreen.prototype.port3C1_read = function()\r\n{\r\n    if(this.attribute_controller_index < 0x10)\r\n    {\r\n        dbg_log(\"3C1 / internal palette read: \" + h(this.attribute_controller_index) +\r\n            \" -> \" + h(this.dac_map[this.attribute_controller_index]), LOG_VGA);\r\n        return this.dac_map[this.attribute_controller_index];\r\n    }\r\n\r\n    switch(this.attribute_controller_index)\r\n    {\r\n        case 0x10:\r\n            dbg_log(\"3C1 / attribute mode read: \" + h(this.attribute_mode), LOG_VGA);\r\n            return this.attribute_mode;\r\n        case 0x12:\r\n            dbg_log(\"3C1 / color plane enable read: \" + h(this.color_plane_enable), LOG_VGA);\r\n            return this.color_plane_enable;\r\n        case 0x13:\r\n            dbg_log(\"3C1 / horizontal panning read: \" + h(this.horizontal_panning), LOG_VGA);\r\n            return this.horizontal_panning;\r\n        case 0x14:\r\n            dbg_log(\"3C1 / color select read: \" + h(this.color_select), LOG_VGA);\r\n            return this.color_select;\r\n        default:\r\n            dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\r\n    }\r\n    return -1;\r\n\r\n};\r\n\r\nVGAScreen.prototype.port3C2_write = function(value)\r\n{\r\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\r\n    this.miscellaneous_output_register = value;\r\n};\r\n\r\nVGAScreen.prototype.port3C4_write = function(value)\r\n{\r\n    this.sequencer_index = value;\r\n};\r\n\r\nVGAScreen.prototype.port3C4_read = function()\r\n{\r\n    return this.sequencer_index;\r\n};\r\n\r\n/**\r\n * Sequencer register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/seqreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 47\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 19\r\n */\r\nVGAScreen.prototype.port3C5_write = function(value)\r\n{\r\n    switch(this.sequencer_index)\r\n    {\r\n        case 0x01:\r\n            dbg_log(\"clocking mode: \" + h(value), LOG_VGA);\r\n            var previous_clocking_mode = this.clocking_mode;\r\n            this.clocking_mode = value;\r\n            if((previous_clocking_mode ^ value) & 0x20)\r\n            {\r\n                // Screen disable bit modified\r\n                this.update_layers();\r\n            }\r\n            break;\r\n        case 0x02:\r\n            dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\r\n            this.plane_write_bm = value;\r\n            break;\r\n        case 0x04:\r\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\r\n            this.sequencer_memory_mode = value;\r\n            break;\r\n        default:\r\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3C5_read = function()\r\n{\r\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\r\n\r\n    switch(this.sequencer_index)\r\n    {\r\n        case 0x01:\r\n            return this.clocking_mode;\r\n        case 0x02:\r\n            return this.plane_write_bm;\r\n        case 0x04:\r\n            return this.sequencer_memory_mode;\r\n        case 0x06:\r\n            return 0x12;\r\n        default:\r\n    }\r\n    return 0;\r\n};\r\n\r\nVGAScreen.prototype.port3C7_write = function(index)\r\n{\r\n    // index for reading the DAC\r\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\r\n    this.dac_color_index_read = index * 3;\r\n    this.dac_state &= 0x0;\r\n};\r\n\r\nVGAScreen.prototype.port3C7_read = function()\r\n{\r\n    // prepared to accept reads or writes\r\n    return this.dac_state;\r\n};\r\n\r\nVGAScreen.prototype.port3C8_write = function(index)\r\n{\r\n    this.dac_color_index_write = index * 3;\r\n    this.dac_state |= 0x3;\r\n};\r\n\r\nVGAScreen.prototype.port3C8_read = function()\r\n{\r\n    return this.dac_color_index_write / 3 | 0;\r\n};\r\n\r\n/**\r\n * DAC color palette register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/colorreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 104\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 57\r\n */\r\nVGAScreen.prototype.port3C9_write = function(color_byte)\r\n{\r\n    var index = this.dac_color_index_write / 3 | 0,\r\n        offset = this.dac_color_index_write % 3,\r\n        color = this.vga256_palette[index];\r\n\r\n    color_byte = (color_byte & 0x3F) * 255 / 63 | 0;\r\n\r\n    if(offset === 0)\r\n    {\r\n        color = color & ~0xFF0000 | color_byte << 16;\r\n    }\r\n    else if(offset === 1)\r\n    {\r\n        color = color & ~0xFF00 | color_byte << 8;\r\n    }\r\n    else\r\n    {\r\n        color = color & ~0xFF | color_byte;\r\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\r\n    }\r\n\r\n    if(this.vga256_palette[index] !== color)\r\n    {\r\n        this.vga256_palette[index] = color;\r\n        this.complete_redraw();\r\n    }\r\n    this.dac_color_index_write++;\r\n};\r\n\r\nVGAScreen.prototype.port3C9_read = function()\r\n{\r\n    dbg_log(\"3C9 read\", LOG_VGA);\r\n\r\n    var index = this.dac_color_index_read / 3 | 0;\r\n    var offset = this.dac_color_index_read % 3;\r\n    var color = this.vga256_palette[index];\r\n\r\n    this.dac_color_index_read++;\r\n    return (color >> (2 - offset) * 8 & 0xFF) / 255 * 63 | 0;\r\n};\r\n\r\nVGAScreen.prototype.port3CC_read = function()\r\n{\r\n    dbg_log(\"3CC read\", LOG_VGA);\r\n    return this.miscellaneous_output_register;\r\n};\r\n\r\nVGAScreen.prototype.port3CE_write = function(value)\r\n{\r\n    this.graphics_index = value;\r\n};\r\n\r\nVGAScreen.prototype.port3CE_read = function()\r\n{\r\n    return this.graphics_index;\r\n};\r\n\r\n/**\r\n * Graphics controller register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 78\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 29\r\n */\r\nVGAScreen.prototype.port3CF_write = function(value)\r\n{\r\n    switch(this.graphics_index)\r\n    {\r\n        case 0:\r\n            this.planar_setreset = value;\r\n            dbg_log(\"plane set/reset: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 1:\r\n            this.planar_setreset_enable = value;\r\n            dbg_log(\"plane set/reset enable: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 2:\r\n            this.color_compare = value;\r\n            dbg_log(\"color compare: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 3:\r\n            this.planar_rotate_reg = value;\r\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 4:\r\n            this.plane_read = value;\r\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 5:\r\n            var previous_planar_mode = this.planar_mode;\r\n            this.planar_mode = value;\r\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\r\n            if((previous_planar_mode ^ value) & 0x60)\r\n            {\r\n                // Shift mode modified. Pixel buffer invalidated\r\n                this.complete_replot();\r\n            }\r\n            break;\r\n        case 6:\r\n            dbg_log(\"miscellaneous graphics register: \" + h(value), LOG_VGA);\r\n            if(this.miscellaneous_graphics_register !== value)\r\n            {\r\n                this.miscellaneous_graphics_register = value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 7:\r\n            this.color_dont_care = value;\r\n            dbg_log(\"color don't care: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 8:\r\n            this.planar_bitmap = value;\r\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\r\n            break;\r\n        default:\r\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3CF_read = function()\r\n{\r\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\r\n\r\n    switch(this.graphics_index)\r\n    {\r\n        case 0:\r\n            return this.planar_setreset;\r\n        case 1:\r\n            return this.planar_setreset_enable;\r\n        case 2:\r\n            return this.color_compare;\r\n        case 3:\r\n            return this.planar_rotate_reg;\r\n        case 4:\r\n            return this.plane_read;\r\n        case 5:\r\n            return this.planar_mode;\r\n        case 6:\r\n            return this.miscellaneous_graphics_register;\r\n        case 7:\r\n            return this.color_dont_care;\r\n        case 8:\r\n            return this.planar_bitmap;\r\n        default:\r\n    }\r\n    return 0;\r\n};\r\n\r\nVGAScreen.prototype.port3D4_write = function(register)\r\n{\r\n    dbg_log(\"3D4 / crtc index: \" + register, LOG_VGA);\r\n    this.index_crtc = register;\r\n};\r\n\r\nVGAScreen.prototype.port3D4_read = function()\r\n{\r\n    dbg_log(\"3D4 read / crtc index: \" + this.index_crtc, LOG_VGA);\r\n    return this.index_crtc;\r\n};\r\n\r\n/**\r\n * CRT controller register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/crtcreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 55\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 63\r\n */\r\nVGAScreen.prototype.port3D5_write = function(value)\r\n{\r\n    switch(this.index_crtc)\r\n    {\r\n        case 0x1:\r\n            dbg_log(\"3D5 / hdisp enable end write: \" + h(value), LOG_VGA);\r\n            if(this.horizontal_display_enable_end !== value)\r\n            {\r\n                this.horizontal_display_enable_end = value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x2:\r\n            if(this.horizontal_blank_start !== value)\r\n            {\r\n                this.horizontal_blank_start = value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x7:\r\n            dbg_log(\"3D5 / overflow register write: \" + h(value), LOG_VGA);\r\n            var previous_vertical_display_enable_end = this.vertical_display_enable_end;\r\n            this.vertical_display_enable_end &= 0xFF;\r\n            this.vertical_display_enable_end |= (value << 3 & 0x200) | (value << 7 & 0x100);\r\n            if(previous_vertical_display_enable_end != this.vertical_display_enable_end)\r\n            {\r\n                this.update_vga_size();\r\n            }\r\n            this.line_compare = (this.line_compare & 0x2FF) | (value << 4 & 0x100);\r\n\r\n            var previous_vertical_blank_start = this.vertical_blank_start;\r\n            this.vertical_blank_start = (this.vertical_blank_start & 0x2FF) | (value << 5 & 0x100);\r\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\r\n            {\r\n                this.update_vga_size();\r\n            }\r\n            this.update_layers();\r\n            break;\r\n        case 0x8:\r\n            dbg_log(\"3D5 / preset row scan write: \" + h(value), LOG_VGA);\r\n            this.preset_row_scan = value;\r\n            this.update_layers();\r\n            break;\r\n        case 0x9:\r\n            dbg_log(\"3D5 / max scan line write: \" + h(value), LOG_VGA);\r\n            this.max_scan_line = value;\r\n            this.line_compare = (this.line_compare & 0x1FF) | (value << 3 & 0x200);\r\n\r\n            var previous_vertical_blank_start = this.vertical_blank_start;\r\n            this.vertical_blank_start = (this.vertical_blank_start & 0x1FF) | (value << 4 & 0x200);\r\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\r\n            {\r\n                this.update_vga_size();\r\n            }\r\n\r\n            this.update_layers();\r\n            break;\r\n        case 0xA:\r\n            dbg_log(\"3D5 / cursor scanline start write: \" + h(value), LOG_VGA);\r\n            this.cursor_scanline_start = value;\r\n            this.update_cursor_scanline();\r\n            break;\r\n        case 0xB:\r\n            dbg_log(\"3D5 / cursor scanline end write: \" + h(value), LOG_VGA);\r\n            this.cursor_scanline_end = value;\r\n            this.update_cursor_scanline();\r\n            break;\r\n        case 0xC:\r\n            if((this.start_address >> 8 & 0xFF) !== value)\r\n            {\r\n                this.start_address = this.start_address & 0xff | value << 8;\r\n                this.update_layers();\r\n                if(~this.crtc_mode &  0x3)\r\n                {\r\n                    // Address substitution implementation depends on the\r\n                    // starting row and column, so the pixel buffer is invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            dbg_log(\"3D5 / start addr hi write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\r\n            break;\r\n        case 0xD:\r\n            if((this.start_address & 0xFF) !== value)\r\n            {\r\n                this.start_address = this.start_address & 0xff00 | value;\r\n                this.update_layers();\r\n                if(~this.crtc_mode &  0x3)\r\n                {\r\n                    // Address substitution implementation depends on the\r\n                    // starting row and column, so the pixel buffer is invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            dbg_log(\"3D5 / start addr lo write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\r\n            break;\r\n        case 0xE:\r\n            dbg_log(\"3D5 / cursor address hi write: \" + h(value), LOG_VGA);\r\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\r\n            this.update_cursor();\r\n            break;\r\n        case 0xF:\r\n            dbg_log(\"3D5 / cursor address lo write: \" + h(value), LOG_VGA);\r\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\r\n            this.update_cursor();\r\n            break;\r\n        case 0x12:\r\n            dbg_log(\"3D5 / vdisp enable end write: \" + h(value), LOG_VGA);\r\n            if((this.vertical_display_enable_end & 0xFF) !== value)\r\n            {\r\n                this.vertical_display_enable_end = (this.vertical_display_enable_end & 0x300) | value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x13:\r\n            dbg_log(\"3D5 / offset register write: \" + h(value), LOG_VGA);\r\n            if(this.offset_register !== value)\r\n            {\r\n                this.offset_register = value;\r\n                this.update_vga_size();\r\n\r\n                if(~this.crtc_mode & 0x3)\r\n                {\r\n                    // Address substitution implementation depends on the\r\n                    // virtual width, so the pixel buffer is invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            break;\r\n        case 0x14:\r\n            dbg_log(\"3D5 / underline location write: \" + h(value), LOG_VGA);\r\n            if(this.underline_location_register !== value)\r\n            {\r\n                var previous_underline = this.underline_location_register;\r\n\r\n                this.underline_location_register = value;\r\n                this.update_vga_size();\r\n\r\n                if((previous_underline ^ value) & 0x40)\r\n                {\r\n                    // Doubleword addressing changed. Pixel buffer invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            break;\r\n        case 0x15:\r\n            dbg_log(\"3D5 / vertical blank start write: \" + h(value), LOG_VGA);\r\n            if((this.vertical_blank_start & 0xFF) !== value)\r\n            {\r\n                this.vertical_blank_start = (this.vertical_blank_start & 0x300) | value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x17:\r\n            dbg_log(\"3D5 / crtc mode write: \" + h(value), LOG_VGA);\r\n            if(this.crtc_mode !== value)\r\n            {\r\n                var previous_mode = this.crtc_mode;\r\n\r\n                this.crtc_mode = value;\r\n                this.update_vga_size();\r\n\r\n                if((previous_mode ^ value) & 0x43)\r\n                {\r\n                    // Word/byte addressing changed or address substitution changed.\r\n                    // Pixel buffer invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            break;\r\n        case 0x18:\r\n            dbg_log(\"3D5 / line compare write: \" + h(value), LOG_VGA);\r\n            this.line_compare = (this.line_compare & 0x300) | value;\r\n            this.update_layers();\r\n            break;\r\n        default:\r\n            if(this.index_crtc < this.crtc.length)\r\n            {\r\n                this.crtc[this.index_crtc] = value;\r\n            }\r\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\r\n    }\r\n\r\n};\r\n\r\nVGAScreen.prototype.port3D5_read = function()\r\n{\r\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\r\n\r\n    switch(this.index_crtc)\r\n    {\r\n        case 0x1:\r\n            return this.horizontal_display_enable_end;\r\n        case 0x2:\r\n            return this.horizontal_blank_start;\r\n        case 0x7:\r\n            return (this.vertical_display_enable_end >> 7 & 0x2) |\r\n                (this.vertical_blank_start >> 5 & 0x8) |\r\n                (this.line_compare >> 4 & 0x10) |\r\n                (this.vertical_display_enable_end >> 3 & 0x40);\r\n        case 0x8:\r\n            return this.preset_row_scan;\r\n        case 0x9:\r\n            return this.max_scan_line;\r\n        case 0xA:\r\n            return this.cursor_scanline_start;\r\n        case 0xB:\r\n            return this.cursor_scanline_end;\r\n        case 0xC:\r\n            return this.start_address & 0xFF;\r\n        case 0xD:\r\n            return this.start_address >> 8;\r\n        case 0xE:\r\n            return this.cursor_address >> 8;\r\n        case 0xF:\r\n            return this.cursor_address & 0xFF;\r\n        case 0x12:\r\n            return this.vertical_display_enable_end & 0xFF;\r\n        case 0x13:\r\n            return this.offset_register;\r\n        case 0x14:\r\n            return this.underline_location_register;\r\n        case 0x15:\r\n            return this.vertical_blank_start & 0xFF;\r\n        case 0x17:\r\n            return this.crtc_mode;\r\n        case 0x18:\r\n            return this.line_compare & 0xFF;\r\n    }\r\n\r\n    if(this.index_crtc < this.crtc.length)\r\n    {\r\n        return this.crtc[this.index_crtc];\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3DA_read = function()\r\n{\r\n    dbg_log(\"3DA read - status 1 and clear attr index\", LOG_VGA);\r\n\r\n    var value = this.port_3DA_value;\r\n\r\n    // Status register, bit 3 set by update_vertical_retrace\r\n    // during screen-fill-buffer\r\n    if(!this.graphical_mode)\r\n    {\r\n        // But screen-fill-buffer may not get triggered in text mode\r\n        // so toggle it manually here\r\n        if(this.port_3DA_value & 1)\r\n        {\r\n            this.port_3DA_value ^= 8;\r\n        }\r\n        this.port_3DA_value ^= 1;\r\n    }\r\n    else\r\n    {\r\n        this.port_3DA_value ^= 1;\r\n        this.port_3DA_value &= 1;\r\n    }\r\n    this.attribute_controller_index = -1;\r\n    return value;\r\n};\r\n\r\nVGAScreen.prototype.svga_bytes_per_line = function()\r\n{\r\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\r\n\r\n    return this.svga_width * bits / 8;\r\n};\r\n\r\nVGAScreen.prototype.port1CE_write = function(value)\r\n{\r\n    this.dispi_index = value;\r\n};\r\n\r\nVGAScreen.prototype.port1CF_write = function(value)\r\n{\r\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\r\n\r\n    switch(this.dispi_index)\r\n    {\r\n        case 1:\r\n            this.svga_width = value;\r\n            if(this.svga_width > MAX_XRES)\r\n            {\r\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\r\n                this.svga_width = MAX_XRES;\r\n            }\r\n            break;\r\n        case 2:\r\n            this.svga_height = value;\r\n            if(this.svga_height > MAX_YRES)\r\n            {\r\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\r\n                this.svga_height = MAX_YRES;\r\n            }\r\n            break;\r\n        case 3:\r\n            this.svga_bpp = value;\r\n            break;\r\n        case 4:\r\n            // enable, options\r\n            this.svga_enabled = (value & 1) === 1;\r\n            this.dispi_enable_value = value;\r\n            break;\r\n        case 5:\r\n            this.svga_bank_offset = value << 16;\r\n            break;\r\n        case 9:\r\n            // y offset\r\n            this.svga_offset = value * this.svga_bytes_per_line();\r\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\r\n            this.complete_redraw();\r\n            break;\r\n        default:\r\n    }\r\n\r\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\r\n    {\r\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\r\n        this.svga_enabled = false;\r\n    }\r\n\r\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\r\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\r\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\r\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\r\n               this.svga_bpp === 24 || this.svga_bpp === 32,\r\n               \"unexpected svga bpp: \" + this.svga_bpp);\r\n\r\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\r\n\r\n    if(this.svga_enabled && this.dispi_index === 4)\r\n    {\r\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp, this.svga_width, this.svga_height);\r\n        this.bus.send(\"screen-set-mode\", true);\r\n        this.graphical_mode = true;\r\n        this.graphical_mode_is_linear = true;\r\n    }\r\n\r\n    if(!this.svga_enabled)\r\n    {\r\n        this.svga_bank_offset = 0;\r\n    }\r\n\r\n    this.update_layers();\r\n};\r\n\r\nVGAScreen.prototype.port1CF_read = function()\r\n{\r\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\r\n    return this.svga_register_read(this.dispi_index);\r\n};\r\n\r\nVGAScreen.prototype.svga_register_read = function(n)\r\n{\r\n    switch(n)\r\n    {\r\n        case 0:\r\n            // id\r\n            return 0xB0C0;\r\n        case 1:\r\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\r\n        case 2:\r\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\r\n        case 3:\r\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\r\n        case 4:\r\n            return this.dispi_enable_value;\r\n        case 5:\r\n            return this.svga_bank_offset >>> 16;\r\n        case 6:\r\n            // virtual width\r\n            if(this.screen_width)\r\n            {\r\n                return this.screen_width;\r\n            }\r\n            else\r\n            {\r\n                return 1; // seabios/windows98 divide exception\r\n            }\r\n            break;\r\n\r\n        case 8:\r\n            // x offset\r\n            return 0;\r\n        case 0x0A:\r\n            // memory size in 64 kilobyte banks\r\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\r\n    }\r\n\r\n    return 0xFF;\r\n};\r\n\r\n/**\r\n * Transfers graphics from VGA Planes to the Pixel Buffer\r\n * VGA Planes represent data stored on actual hardware.\r\n * Pixel Buffer caches the 4-bit or 8-bit color indices for each pixel.\r\n */\r\nVGAScreen.prototype.vga_replot = function()\r\n{\r\n    // Round to multiple of 8 towards extreme\r\n    var start = this.diff_plot_min & ~0xF;\r\n    var end = Math.min((this.diff_plot_max | 0xF), VGA_PIXEL_BUFFER_SIZE - 1);\r\n\r\n    var addr_shift = this.vga_addr_shift_count();\r\n    var addr_substitution = ~this.crtc_mode & 0x3;\r\n\r\n    var shift_mode = this.planar_mode & 0x60\r\n    var pel_width = this.attribute_mode & 0x40;\r\n\r\n    for(var pixel_addr = start; pixel_addr <= end;)\r\n    {\r\n        var addr = pixel_addr >>> addr_shift;\r\n        if(addr_substitution)\r\n        {\r\n            var row = pixel_addr / this.virtual_width | 0;\r\n            var col = pixel_addr - this.virtual_width * row;\r\n\r\n            switch(addr_substitution)\r\n            {\r\n                case 0x1:\r\n                    // Alternating rows using bit 13\r\n                    // Assumes max scan line = 1\r\n                    addr = (row & 0x1) << 13;\r\n                    row >>>= 1;\r\n                    break;\r\n                case 0x2:\r\n                    // Alternating rows using bit 14\r\n                    // Assumes max scan line = 3\r\n                    addr = (row & 0x1) << 14;\r\n                    row >>>= 1;\r\n                    break;\r\n                case 0x3:\r\n                    // Cycling through rows using bit 13 and 14\r\n                    // Assumes max scan line = 3\r\n                    addr = (row & 0x3) << 13;\r\n                    row >>>= 2;\r\n                    break;\r\n            }\r\n\r\n            addr |= (row * this.virtual_width + col >>> addr_shift) + this.start_address;\r\n        }\r\n\r\n        var byte0 = this.plane0[addr];\r\n        var byte1 = this.plane1[addr];\r\n        var byte2 = this.plane2[addr];\r\n        var byte3 = this.plane3[addr];\r\n\r\n        var shift_loads = new Uint8Array(8);\r\n        switch(shift_mode)\r\n        {\r\n            // Planar Shift Mode\r\n            // See http://www.osdever.net/FreeVGA/vga/vgaseq.htm\r\n            case 0x00:\r\n                // Shift these, so that the bits for the color are in\r\n                // the correct position in the for loop\r\n                byte0 <<= 0;\r\n                byte1 <<= 1;\r\n                byte2 <<= 2;\r\n                byte3 <<= 3;\r\n\r\n                for(var i = 7; i >= 0; i--)\r\n                {\r\n                    shift_loads[7 - i] =\r\n                            byte0 >> i & 1 |\r\n                            byte1 >> i & 2 |\r\n                            byte2 >> i & 4 |\r\n                            byte3 >> i & 8;\r\n                }\r\n                break;\r\n\r\n            // Packed Shift Mode, aka Interleaved Shift Mode\r\n            // Video Modes 4h and 5h\r\n            case 0x20:\r\n                shift_loads[0] = (byte0 >> 6 & 0x3) | (byte2 >> 4 & 0xC);\r\n                shift_loads[1] = (byte0 >> 4 & 0x3) | (byte2 >> 2 & 0xC);\r\n                shift_loads[2] = (byte0 >> 2 & 0x3) | (byte2 >> 0 & 0xC);\r\n                shift_loads[3] = (byte0 >> 0 & 0x3) | (byte2 << 2 & 0xC);\r\n\r\n                shift_loads[4] = (byte1 >> 6 & 0x3) | (byte3 >> 4 & 0xC);\r\n                shift_loads[5] = (byte1 >> 4 & 0x3) | (byte3 >> 2 & 0xC);\r\n                shift_loads[6] = (byte1 >> 2 & 0x3) | (byte3 >> 0 & 0xC);\r\n                shift_loads[7] = (byte1 >> 0 & 0x3) | (byte3 << 2 & 0xC);\r\n                break;\r\n\r\n            // 256-Color Shift Mode\r\n            // Video Modes 13h and unchained 256 color\r\n            case 0x40:\r\n            case 0x60:\r\n                shift_loads[0] = byte0 >> 4 & 0xF;\r\n                shift_loads[1] = byte0 >> 0 & 0xF;\r\n                shift_loads[2] = byte1 >> 4 & 0xF;\r\n                shift_loads[3] = byte1 >> 0 & 0xF;\r\n                shift_loads[4] = byte2 >> 4 & 0xF;\r\n                shift_loads[5] = byte2 >> 0 & 0xF;\r\n                shift_loads[6] = byte3 >> 4 & 0xF;\r\n                shift_loads[7] = byte3 >> 0 & 0xF;\r\n                break;\r\n        }\r\n\r\n        if(pel_width)\r\n        {\r\n            // Assemble from two sets of 4 bits.\r\n            for(var i = 0, j = 0; i < 4; i++, pixel_addr++, j += 2)\r\n            {\r\n                this.pixel_buffer[pixel_addr] = (shift_loads[j] << 4) | shift_loads[j + 1];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for(var i = 0; i < 8; i++, pixel_addr++)\r\n            {\r\n                this.pixel_buffer[pixel_addr] = shift_loads[i];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Transfers graphics from Pixel Buffer to Destination Image Buffer.\r\n * The 4-bit/8-bit color indices in the Pixel Buffer are passed through\r\n * the internal palette (dac_map) and the DAC palette (vga256_palette) to\r\n * obtain the final 32 bit color that the Canvas API uses.\r\n */\r\nVGAScreen.prototype.vga_redraw = function()\r\n{\r\n    var start = this.diff_addr_min;\r\n    var end = Math.min(this.diff_addr_max, VGA_PIXEL_BUFFER_SIZE - 1);\r\n    var buffer = this.dest_buffer;\r\n\r\n    // Closure compiler\r\n    if(!buffer) return;\r\n\r\n    var mask = 0xFF;\r\n    var colorset = 0x00;\r\n    if(this.attribute_mode & 0x80)\r\n    {\r\n        // Palette bits 5/4 select\r\n        mask &= 0xCF;\r\n        colorset |= this.color_select << 4 & 0x30;\r\n    }\r\n\r\n    if(this.attribute_mode & 0x40)\r\n    {\r\n        // 8 bit mode\r\n\r\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\r\n        {\r\n            var color256 = (this.pixel_buffer[pixel_addr] & mask) | colorset;\r\n            var color = this.vga256_palette[color256];\r\n\r\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // 4 bit mode\r\n\r\n        // Palette bits 7/6 select\r\n        mask &= 0x3F;\r\n        colorset |= this.color_select << 4 & 0xC0;\r\n\r\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\r\n        {\r\n            var color16 = this.pixel_buffer[pixel_addr] & this.color_plane_enable;\r\n            var color256 = (this.dac_map[color16] & mask) | colorset;\r\n            var color = this.vga256_palette[color256];\r\n\r\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\r\n        }\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.screen_fill_buffer = function()\r\n{\r\n    if(!this.graphical_mode)\r\n    {\r\n        // text mode\r\n        // Update retrace behaviour anyway - programs waiting for signal before\r\n        // changing to graphical mode\r\n        this.update_vertical_retrace();\r\n        return;\r\n    }\r\n\r\n    if(!this.dest_buffer)\r\n    {\r\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\r\n        // Update retrace behaviour anyway\r\n        this.update_vertical_retrace();\r\n        return;\r\n    }\r\n\r\n    if(this.diff_addr_max < this.diff_addr_min && this.diff_plot_max < this.diff_plot_min)\r\n    {\r\n        // No pixels to update\r\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\r\n        this.update_vertical_retrace();\r\n        return;\r\n    }\r\n\r\n    if(this.svga_enabled)\r\n    {\r\n        var bpp = this.svga_bpp;\r\n\r\n        var buffer = this.dest_buffer;\r\n\r\n        var start = this.diff_addr_min;\r\n        var end = this.diff_addr_max;\r\n\r\n        switch(bpp)\r\n        {\r\n            case 32:\r\n                var start_pixel = start >> 2;\r\n                var end_pixel = (end >> 2) + 1;\r\n\r\n                for(var i = start_pixel; i < end_pixel; i++)\r\n                {\r\n                    var dword = this.svga_memory32[i];\r\n\r\n                    buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            case 24:\r\n                var start_pixel = start / 3 | 0;\r\n                var end_pixel = (end / 3 | 0) + 1;\r\n                var addr = start_pixel * 3;\r\n\r\n                for(var i = start_pixel; addr < end; i++)\r\n                {\r\n                    var red = this.svga_memory[addr++];\r\n                    var green = this.svga_memory[addr++];\r\n                    var blue = this.svga_memory[addr++];\r\n\r\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            case 16:\r\n                var start_pixel = start >> 1;\r\n                var end_pixel = (end >> 1) + 1;\r\n\r\n                for(var i = start_pixel; i < end_pixel; i++)\r\n                {\r\n                    var word = this.svga_memory16[i];\r\n\r\n                    var blue = (word >> 11) * 0xFF / 0x1F | 0;\r\n                    var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\r\n                    var red = (word & 0x1F) * 0xFF / 0x1F | 0;\r\n\r\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            case 8:\r\n                var start_pixel = start;\r\n                var end_pixel = end + 1;\r\n\r\n                for(var i = start; i <= end; i++)\r\n                {\r\n                    var color = this.vga256_palette[this.svga_memory[i]];\r\n                    buffer[i] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                dbg_assert(false, \"Unsupported BPP: \" + bpp);\r\n        }\r\n\r\n        var min_y = start_pixel / this.svga_width | 0;\r\n        var max_y = end_pixel / this.svga_width | 0;\r\n\r\n        this.bus.send(\"screen-fill-buffer-end\", [{\r\n            screen_x: 0, screen_y: min_y,\r\n            buffer_x: 0, buffer_y: min_y,\r\n            buffer_width: this.svga_width,\r\n            buffer_height: max_y - min_y + 1,\r\n        }]);\r\n    }\r\n    else\r\n    {\r\n        this.vga_replot();\r\n        this.vga_redraw();\r\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\r\n    }\r\n\r\n    this.reset_diffs();\r\n    this.update_vertical_retrace();\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n */\r\nfunction PS2(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    /** @type {boolean} */\r\n    this.enable_mouse_stream = false;\r\n\r\n    /** @type {boolean} */\r\n    this.use_mouse = false;\r\n\r\n    /** @type {boolean} */\r\n    this.have_mouse = true;\r\n\r\n    /** @type {number} */\r\n    this.mouse_delta_x = 0;\r\n    /** @type {number} */\r\n    this.mouse_delta_y = 0;\r\n    /** @type {number} */\r\n    this.mouse_clicks = 0;\r\n\r\n    /** @type {boolean} */\r\n    this.have_keyboard = true;\r\n\r\n    /** @type {boolean} */\r\n    this.enable_keyboard_stream = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_is_mouse_command = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_sample = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_led = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_handle_scan_code_set = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_rate = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_resolution = false;\r\n\r\n    /**\r\n     * @type {ByteQueue}\r\n     */\r\n    this.kbd_buffer = new ByteQueue(1024);\r\n\r\n    this.last_port60_byte = 0;\r\n\r\n    /** @type {number} */\r\n    this.sample_rate = 100;\r\n\r\n    /** @type {number} */\r\n    this.resolution = 4;\r\n\r\n    /** @type {boolean} */\r\n    this.scaling2 = false;\r\n\r\n    /** @type {number} */\r\n    this.last_mouse_packet = -1;\r\n\r\n    /**\r\n     * @type {ByteQueue}\r\n     */\r\n    this.mouse_buffer = new ByteQueue(1024);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * Also known as DBBOUT OBF - Output Buffer Full flag\r\n     */\r\n    this.next_byte_is_ready = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_byte_is_aux = false;\r\n\r\n    this.bus.register(\"keyboard-code\", function(code)\r\n    {\r\n        this.kbd_send_code(code);\r\n    }, this);\r\n\r\n    this.bus.register(\"mouse-click\", function(data)\r\n    {\r\n        this.mouse_send_click(data[0], data[1], data[2]);\r\n    }, this);\r\n\r\n    this.bus.register(\"mouse-delta\", function(data)\r\n    {\r\n        this.mouse_send_delta(data[0], data[1]);\r\n    }, this);\r\n\r\n    this.bus.register(\"mouse-wheel\", function(data)\r\n    {\r\n        // TODO: Mouse Wheel\r\n        // http://www.computer-engineering.org/ps2mouse/\r\n    }, this);\r\n\r\n    this.command_register = 1 | 4;\r\n    this.read_output_register = false;\r\n    this.read_command_register = false;\r\n\r\n    cpu.io.register_read(0x60, this, this.port60_read);\r\n    cpu.io.register_read(0x64, this, this.port64_read);\r\n\r\n    cpu.io.register_write(0x60, this, this.port60_write);\r\n    cpu.io.register_write(0x64, this, this.port64_write);\r\n}\r\n\r\nPS2.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.enable_mouse_stream;\r\n    state[1] = this.use_mouse;\r\n    state[2] = this.have_mouse;\r\n    state[3] = this.mouse_delta_x;\r\n    state[4] = this.mouse_delta_y;\r\n    state[5] = this.mouse_clicks;\r\n    state[6] = this.have_keyboard;\r\n    state[7] = this.enable_keyboard_stream;\r\n    state[8] = this.next_is_mouse_command;\r\n    state[9] = this.next_read_sample;\r\n    state[10] = this.next_read_led;\r\n    state[11] = this.next_handle_scan_code_set;\r\n    state[12] = this.next_read_rate;\r\n    state[13] = this.next_read_resolution;\r\n    //state[14] = this.kbd_buffer;\r\n    state[15] = this.last_port60_byte;\r\n    state[16] = this.sample_rate;\r\n    state[17] = this.resolution;\r\n    state[18] = this.scaling2;\r\n    //state[19] = this.mouse_buffer;\r\n    state[20] = this.command_register;\r\n    state[21] = this.read_output_register;\r\n    state[22] = this.read_command_register;\r\n\r\n    return state;\r\n};\r\n\r\nPS2.prototype.set_state = function(state)\r\n{\r\n    this.enable_mouse_stream = state[0];\r\n    this.use_mouse = state[1];\r\n    this.have_mouse = state[2];\r\n    this.mouse_delta_x = state[3];\r\n    this.mouse_delta_y = state[4];\r\n    this.mouse_clicks = state[5];\r\n    this.have_keyboard = state[6];\r\n    this.enable_keyboard_stream = state[7];\r\n    this.next_is_mouse_command = state[8];\r\n    this.next_read_sample = state[9];\r\n    this.next_read_led = state[10];\r\n    this.next_handle_scan_code_set = state[11];\r\n    this.next_read_rate = state[12];\r\n    this.next_read_resolution = state[13];\r\n    //this.kbd_buffer = state[14];\r\n    this.last_port60_byte = state[15];\r\n    this.sample_rate = state[16];\r\n    this.resolution = state[17];\r\n    this.scaling2 = state[18];\r\n    //this.mouse_buffer = state[19];\r\n    this.command_register = state[20];\r\n    this.read_output_register = state[21];\r\n    this.read_command_register = state[22];\r\n\r\n    this.next_byte_is_ready = false;\r\n    this.next_byte_is_aux = false;\r\n    this.kbd_buffer.clear();\r\n    this.mouse_buffer.clear();\r\n\r\n    this.bus.send(\"mouse-enable\", this.use_mouse);\r\n};\r\n\r\nPS2.prototype.raise_irq = function()\r\n{\r\n    if(this.next_byte_is_ready)\r\n    {\r\n        // Wait until previous byte is read\r\n        // http://halicery.com/Hardware/8042/8042_1503033_TXT.htm\r\n        return;\r\n    }\r\n\r\n    // Kbd has priority over aux\r\n    if(this.kbd_buffer.length)\r\n    {\r\n        this.kbd_irq();\r\n    }\r\n    else if(this.mouse_buffer.length)\r\n    {\r\n        this.mouse_irq();\r\n    }\r\n};\r\n\r\nPS2.prototype.mouse_irq = function()\r\n{\r\n    this.next_byte_is_ready = true;\r\n    this.next_byte_is_aux = true;\r\n\r\n    if(this.command_register & 2)\r\n    {\r\n        dbg_log(\"Mouse irq\", LOG_PS2);\r\n\r\n        // Pulse the irq line\r\n        // Note: can't lower immediately after rising, so lower before rising\r\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\r\n        this.cpu.device_lower_irq(12);\r\n        this.cpu.device_raise_irq(12);\r\n    }\r\n};\r\n\r\nPS2.prototype.kbd_irq = function()\r\n{\r\n    this.next_byte_is_ready = true;\r\n    this.next_byte_is_aux = false;\r\n\r\n    if(this.command_register & 1)\r\n    {\r\n        dbg_log(\"Keyboard irq\", LOG_PS2);\r\n\r\n        // Pulse the irq line\r\n        // Note: can't lower immediately after rising, so lower before rising\r\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\r\n        this.cpu.device_lower_irq(1);\r\n        this.cpu.device_raise_irq(1);\r\n    }\r\n};\r\n\r\nPS2.prototype.kbd_send_code = function(code)\r\n{\r\n    if(this.enable_keyboard_stream)\r\n    {\r\n        dbg_log(\"adding kbd code: \" + h(code), LOG_PS2);\r\n        this.kbd_buffer.push(code);\r\n        this.raise_irq();\r\n    }\r\n};\r\n\r\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\r\n{\r\n    if(!this.have_mouse || !this.use_mouse)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // note: delta_x or delta_y can be floating point numbers\r\n\r\n    var factor = this.resolution * this.sample_rate / 80;\r\n\r\n    this.mouse_delta_x += delta_x * factor;\r\n    this.mouse_delta_y += delta_y * factor;\r\n\r\n    if(this.enable_mouse_stream)\r\n    {\r\n        var change_x = this.mouse_delta_x | 0,\r\n            change_y = this.mouse_delta_y | 0;\r\n\r\n        if(change_x || change_y)\r\n        {\r\n            var now = Date.now();\r\n\r\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\r\n            //{\r\n            //    // TODO: set timeout\r\n            //    return;\r\n            //}\r\n\r\n            this.mouse_delta_x -= change_x;\r\n            this.mouse_delta_y -= change_y;\r\n\r\n            this.send_mouse_packet(change_x, change_y);\r\n        }\r\n    }\r\n};\r\n\r\nPS2.prototype.mouse_send_click = function(left, middle, right)\r\n{\r\n    if(!this.have_mouse || !this.use_mouse)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.mouse_clicks = left | right << 1 | middle << 2;\r\n\r\n    if(this.enable_mouse_stream)\r\n    {\r\n        this.send_mouse_packet(0, 0);\r\n    }\r\n};\r\n\r\nPS2.prototype.send_mouse_packet = function(dx, dy)\r\n{\r\n    var info_byte =\r\n            (dy < 0) << 5 |\r\n            (dx < 0) << 4 |\r\n            1 << 3 |\r\n            this.mouse_clicks,\r\n        delta_x = dx,\r\n        delta_y = dy;\r\n\r\n    this.last_mouse_packet = Date.now();\r\n\r\n    //if(this.scaling2)\r\n    //{\r\n    //    // only in automatic packets, not 0xEB requests\r\n    //    delta_x = this.apply_scaling2(delta_x);\r\n    //    delta_y = this.apply_scaling2(delta_y);\r\n    //}\r\n\r\n    this.mouse_buffer.push(info_byte);\r\n    this.mouse_buffer.push(delta_x);\r\n    this.mouse_buffer.push(delta_y);\r\n\r\n    dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\r\n\r\n    this.raise_irq();\r\n};\r\n\r\nPS2.prototype.apply_scaling2 = function(n)\r\n{\r\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\r\n    var abs = Math.abs(n),\r\n        sign = n >> 31;\r\n\r\n    switch(abs)\r\n    {\r\n        case 0:\r\n        case 1:\r\n        case 3:\r\n            return n;\r\n        case 2:\r\n            return sign;\r\n        case 4:\r\n            return 6 * sign;\r\n        case 5:\r\n            return 9 * sign;\r\n        default:\r\n            return n << 1;\r\n    }\r\n};\r\n\r\nPS2.prototype.port60_read = function()\r\n{\r\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\r\n\r\n    this.next_byte_is_ready = false;\r\n\r\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\r\n    {\r\n        // should not happen\r\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\r\n        return this.last_port60_byte;\r\n    }\r\n\r\n    if(this.next_byte_is_aux)\r\n    {\r\n        this.cpu.device_lower_irq(12);\r\n        this.last_port60_byte = this.mouse_buffer.shift();\r\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\r\n    }\r\n    else\r\n    {\r\n        this.cpu.device_lower_irq(1);\r\n        this.last_port60_byte = this.kbd_buffer.shift();\r\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\r\n    }\r\n\r\n    if(this.kbd_buffer.length || this.mouse_buffer.length)\r\n    {\r\n        this.raise_irq();\r\n    }\r\n\r\n    return this.last_port60_byte;\r\n};\r\n\r\nPS2.prototype.port64_read = function()\r\n{\r\n    // status port\r\n\r\n    var status_byte = 0x10;\r\n\r\n    if(this.next_byte_is_ready)\r\n    {\r\n        status_byte |= 0x1;\r\n    }\r\n    if(this.next_byte_is_aux)\r\n    {\r\n        status_byte |= 0x20;\r\n    }\r\n\r\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\r\n\r\n    return status_byte;\r\n};\r\n\r\nPS2.prototype.port60_write = function(write_byte)\r\n{\r\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\r\n\r\n    if(this.read_command_register)\r\n    {\r\n        this.command_register = write_byte;\r\n        this.read_command_register = false;\r\n\r\n        // not sure, causes \"spurious ack\" in Linux\r\n        //this.kbd_buffer.push(0xFA);\r\n        //this.kbd_irq();\r\n\r\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\r\n    }\r\n    else if(this.read_output_register)\r\n    {\r\n        this.read_output_register = false;\r\n\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(write_byte);\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.next_read_sample)\r\n    {\r\n        this.next_read_sample = false;\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(0xFA);\r\n\r\n        this.sample_rate = write_byte;\r\n        dbg_log(\"mouse sample rate: \" + h(write_byte), LOG_PS2);\r\n        if(!this.sample_rate)\r\n        {\r\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\r\n            this.sample_rate = 100;\r\n        }\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.next_read_resolution)\r\n    {\r\n        this.next_read_resolution = false;\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(0xFA);\r\n\r\n        if(write_byte > 3)\r\n        {\r\n            this.resolution = 4;\r\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\r\n        }\r\n        else\r\n        {\r\n            this.resolution = 1 << write_byte;\r\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\r\n        }\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.next_read_led)\r\n    {\r\n        // nope\r\n        this.next_read_led = false;\r\n        this.kbd_buffer.push(0xFA);\r\n        this.kbd_irq();\r\n    }\r\n    else if(this.next_handle_scan_code_set)\r\n    {\r\n        this.next_handle_scan_code_set = false;\r\n\r\n        this.kbd_buffer.push(0xFA);\r\n        this.kbd_irq();\r\n\r\n        if(write_byte)\r\n        {\r\n            // set scan code set\r\n        }\r\n        else\r\n        {\r\n            this.kbd_buffer.push(2);\r\n        }\r\n    }\r\n    else if(this.next_read_rate)\r\n    {\r\n        // nope\r\n        this.next_read_rate = false;\r\n        this.kbd_buffer.push(0xFA);\r\n        this.kbd_irq();\r\n    }\r\n    else if(this.next_is_mouse_command)\r\n    {\r\n        this.next_is_mouse_command = false;\r\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\r\n\r\n        if(!this.have_mouse)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // send ack\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(0xFA);\r\n\r\n        switch(write_byte)\r\n        {\r\n        case 0xE6:\r\n            // set scaling to 1:1\r\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\r\n            this.scaling2 = false;\r\n            break;\r\n        case 0xE7:\r\n            // set scaling to 2:1\r\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\r\n            this.scaling2 = true;\r\n            break;\r\n        case 0xE8:\r\n            // set mouse resolution\r\n            this.next_read_resolution = true;\r\n            break;\r\n        case 0xE9:\r\n            // status request - send one packet\r\n            this.send_mouse_packet(0, 0);\r\n            break;\r\n        case 0xEB:\r\n            // request single packet\r\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\r\n            this.send_mouse_packet(0, 0);\r\n            break;\r\n        case 0xF2:\r\n            //  MouseID Byte\r\n            this.mouse_buffer.push(0);\r\n            this.mouse_buffer.push(0);\r\n\r\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\r\n            break;\r\n        case 0xF3:\r\n            // sample rate\r\n            this.next_read_sample = true;\r\n            break;\r\n        case 0xF4:\r\n            // enable streaming\r\n            this.enable_mouse_stream = true;\r\n            this.use_mouse = true;\r\n            this.bus.send(\"mouse-enable\", true);\r\n\r\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\r\n            break;\r\n        case 0xF5:\r\n            // disable streaming\r\n            this.enable_mouse_stream = false;\r\n            break;\r\n        case 0xF6:\r\n            // set defaults\r\n            this.enable_mouse_stream = false;\r\n            this.sample_rate = 100;\r\n            this.scaling2 = false;\r\n            this.resolution = 4;\r\n            break;\r\n        case 0xFF:\r\n            // reset, send completion code\r\n            dbg_log(\"Mouse reset\", LOG_PS2);\r\n            this.mouse_buffer.push(0xAA);\r\n            this.mouse_buffer.push(0);\r\n\r\n            this.use_mouse = true;\r\n            this.bus.send(\"mouse-enable\", true);\r\n\r\n            this.enable_mouse_stream = false;\r\n            this.sample_rate = 100;\r\n            this.scaling2 = false;\r\n            this.resolution = 4;\r\n\r\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\r\n        }\r\n\r\n        this.mouse_irq();\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\r\n\r\n        // send ack\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.clear();\r\n        this.kbd_buffer.push(0xFA);\r\n\r\n        switch(write_byte)\r\n        {\r\n        case 0xED:\r\n            this.next_read_led = true;\r\n            break;\r\n        case 0xF0:\r\n            // get/set scan code set\r\n            this.next_handle_scan_code_set = true;\r\n            break;\r\n        case 0xF2:\r\n            // identify\r\n            this.kbd_buffer.push(0xAB);\r\n            this.kbd_buffer.push(83);\r\n            break;\r\n        case 0xF3:\r\n            //  Set typematic rate and delay\r\n            this.next_read_rate = true;\r\n            break;\r\n        case 0xF4:\r\n            // enable scanning\r\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\r\n            this.enable_keyboard_stream = true;\r\n            break;\r\n        case 0xF5:\r\n            // disable scanning\r\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\r\n            this.enable_keyboard_stream = false;\r\n            break;\r\n        case 0xF6:\r\n            // reset defaults\r\n            //this.enable_keyboard_stream = false;\r\n            break;\r\n        case 0xFF:\r\n            this.kbd_buffer.clear();\r\n            this.kbd_buffer.push(0xFA);\r\n            this.kbd_buffer.push(0xAA);\r\n            this.kbd_buffer.push(0);\r\n            break;\r\n        default:\r\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\r\n        }\r\n\r\n        this.kbd_irq();\r\n    }\r\n};\r\n\r\nPS2.prototype.port64_write = function(write_byte)\r\n{\r\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\r\n\r\n    switch(write_byte)\r\n    {\r\n    case 0x20:\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(this.command_register);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0x60:\r\n        this.read_command_register = true;\r\n        break;\r\n    case 0xD3:\r\n        this.read_output_register = true;\r\n        break;\r\n    case 0xD4:\r\n        this.next_is_mouse_command = true;\r\n        break;\r\n    case 0xA7:\r\n        // Disable second port\r\n        dbg_log(\"Disable second port\", LOG_PS2);\r\n        this.command_register |= 0x20;\r\n        break;\r\n    case 0xA8:\r\n        // Enable second port\r\n        dbg_log(\"Enable second port\", LOG_PS2);\r\n        this.command_register &= ~0x20;\r\n        break;\r\n    case 0xA9:\r\n        // test second ps/2 port\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(0);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0xAA:\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(0x55);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0xAB:\r\n        // Test first PS/2 port\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(0);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0xAD:\r\n        // Disable Keyboard\r\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\r\n        this.command_register |= 0x10;\r\n        break;\r\n    case 0xAE:\r\n        // Enable Keyboard\r\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\r\n        this.command_register &= ~0x10;\r\n        break;\r\n    case 0xFE:\r\n        dbg_log(\"CPU reboot via PS2\");\r\n        this.cpu.reboot_internal();\r\n        break;\r\n    default:\r\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar PIC_LOG_VERBOSE = false;\r\n\r\n/**\r\n * Programmable Interrupt Controller\r\n * http://stanislavs.org/helppc/8259.html\r\n *\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {PIC=} master\r\n */\r\nfunction PIC(cpu, master)\r\n{\r\n    /**\r\n     * all irqs off\r\n     * @type {number}\r\n     */\r\n    this.irq_mask = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     *\r\n     * Bogus default value (both master and slave mapped to 0).\r\n     * Will be initialized by the BIOS\r\n     */\r\n    this.irq_map = 0;\r\n\r\n    /**\r\n     * in-service register\r\n     * Holds interrupts that are currently being serviced\r\n     * @type {number}\r\n     */\r\n    this.isr = 0;\r\n\r\n    /**\r\n     * interrupt request register\r\n     * Holds interrupts that have been requested\r\n     * @type {number}\r\n     */\r\n    this.irr = 0;\r\n\r\n    this.irq_value = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.requested_irq = -1;\r\n\r\n    this.master = master;\r\n    this.is_master = this.master === undefined;\r\n    this.slave = undefined;\r\n\r\n    this.name = this.is_master ? \"master\" : \"slave \";\r\n\r\n    this.expect_icw4 = false;\r\n    this.state = 0;\r\n    this.read_isr = 0;\r\n    this.auto_eoi = 1;\r\n    this.special_mask_mode = 0;\r\n\r\n    this.elcr = 0;\r\n\r\n    this.cpu = cpu;\r\n\r\n    // Checking for callable interrupts:\r\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\r\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\r\n\r\n    // triggering irqs:\r\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\r\n\r\n\r\n    if(this.is_master)\r\n    {\r\n        this.slave = new PIC(this.cpu, this);\r\n\r\n        this.check_irqs = function()\r\n        {\r\n            if(this.requested_irq >= 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\r\n                this.cpu.handle_irqs();\r\n                return;\r\n            }\r\n\r\n            var enabled_irr = this.irr & this.irq_mask;\r\n\r\n            if(!enabled_irr)\r\n            {\r\n                if(PIC_LOG_VERBOSE)\r\n                {\r\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\r\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\r\n                }\r\n                return;\r\n            }\r\n\r\n            var irq_mask = enabled_irr & -enabled_irr;\r\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\r\n\r\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\r\n            {\r\n                // wait for eoi of higher or same priority interrupt\r\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\r\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\r\n                return;\r\n            }\r\n\r\n            dbg_assert(irq_mask !== 0);\r\n            var irq_number = v86util.int_log2_byte(irq_mask);\r\n            dbg_assert(irq_mask === (1 << irq_number));\r\n\r\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\r\n\r\n            this.requested_irq = irq_number;\r\n            this.cpu.handle_irqs();\r\n        };\r\n\r\n        this.acknowledge_irq = function()\r\n        {\r\n            if(this.requested_irq === -1)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(this.irr === 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\r\n                this.requested_irq = -1;\r\n                this.cpu.pic_call_irq(this.irq_map | 7);\r\n                return;\r\n            }\r\n            dbg_assert(this.irr); // spurious\r\n            dbg_assert(this.requested_irq >= 0);\r\n\r\n            var irq_mask = 1 << this.requested_irq;\r\n\r\n            if((this.elcr & irq_mask) === 0) // not in level mode\r\n            {\r\n                this.irr &= ~irq_mask;\r\n            }\r\n\r\n            if(!this.auto_eoi)\r\n            {\r\n                this.isr |= irq_mask;\r\n            }\r\n\r\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\r\n            if(this.requested_irq === 2)\r\n            {\r\n                this.slave.acknowledge_irq();\r\n            }\r\n            else\r\n            {\r\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\r\n            }\r\n\r\n            this.requested_irq = -1;\r\n            this.check_irqs();\r\n        };\r\n    }\r\n    else\r\n    {\r\n        // is slave\r\n        this.check_irqs = function()\r\n        {\r\n            if(this.requested_irq >= 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\r\n                this.cpu.handle_irqs();\r\n                return;\r\n            }\r\n\r\n            var enabled_irr = this.irr & this.irq_mask;\r\n\r\n            if(!enabled_irr)\r\n            {\r\n                if(PIC_LOG_VERBOSE)\r\n                {\r\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\r\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\r\n                }\r\n                return;\r\n            }\r\n\r\n            var irq_mask = enabled_irr & -enabled_irr;\r\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\r\n\r\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\r\n            {\r\n                // wait for eoi of higher or same priority interrupt\r\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\r\n                return;\r\n            }\r\n\r\n            dbg_assert(irq_mask !== 0);\r\n            var irq_number = v86util.int_log2_byte(irq_mask);\r\n            dbg_assert(irq_mask === (1 << irq_number));\r\n\r\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\r\n            this.requested_irq = irq_number;\r\n            this.master.set_irq(2);\r\n        };\r\n\r\n        this.acknowledge_irq = function()\r\n        {\r\n            if(this.requested_irq === -1)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(this.irr === 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\r\n                this.requested_irq = -1;\r\n                this.master.irq_value &= ~(1 << 2);\r\n                this.cpu.pic_call_irq(this.irq_map | 7);\r\n                return;\r\n            }\r\n\r\n            dbg_assert(this.irr); // spurious\r\n            dbg_assert(this.requested_irq >= 0);\r\n\r\n            var irq_mask = 1 << this.requested_irq;\r\n\r\n            if((this.elcr & irq_mask) === 0) // not in level mode\r\n            {\r\n                this.irr &= ~irq_mask;\r\n            }\r\n\r\n            if(!this.auto_eoi)\r\n            {\r\n                this.isr |= irq_mask;\r\n            }\r\n\r\n            this.master.irq_value &= ~(1 << 2);\r\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\r\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\r\n\r\n            this.requested_irq = -1;\r\n            this.check_irqs();\r\n        };\r\n    }\r\n\r\n    this.dump = function()\r\n    {\r\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\r\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\r\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\r\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\r\n\r\n        if(this.is_master)\r\n        {\r\n            this.slave.dump();\r\n        }\r\n    };\r\n\r\n    var io_base;\r\n    var iobase_high;\r\n    if(this.is_master)\r\n    {\r\n        io_base = 0x20;\r\n        iobase_high = 0x4D0;\r\n    }\r\n    else\r\n    {\r\n        io_base = 0xA0;\r\n        iobase_high = 0x4D1;\r\n    }\r\n\r\n    this.cpu.io.register_write(io_base, this, this.port20_write);\r\n    this.cpu.io.register_read(io_base, this, this.port20_read);\r\n\r\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\r\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\r\n\r\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\r\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\r\n\r\n\r\n    if(this.is_master)\r\n    {\r\n        this.set_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 16);\r\n\r\n            if(irq_number >= 8)\r\n            {\r\n                this.slave.set_irq(irq_number - 8);\r\n                return;\r\n            }\r\n\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if((this.irq_value & irq_mask) === 0)\r\n            {\r\n                this.irr |= irq_mask;\r\n                this.irq_value |= irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n\r\n        this.clear_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 16);\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            if(irq_number >= 8)\r\n            {\r\n                this.slave.clear_irq(irq_number - 8);\r\n                return;\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if(this.irq_value & irq_mask)\r\n            {\r\n                this.irq_value &= ~irq_mask;\r\n                this.irr &= ~irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n    }\r\n    else\r\n    {\r\n        this.set_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 8);\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if((this.irq_value & irq_mask) === 0)\r\n            {\r\n                this.irr |= irq_mask;\r\n                this.irq_value |= irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n\r\n        this.clear_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 8);\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if(this.irq_value & irq_mask)\r\n            {\r\n                this.irq_value &= ~irq_mask;\r\n                this.irr &= ~irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n    }\r\n\r\n    this.get_isr = function()\r\n    {\r\n        return this.isr;\r\n    };\r\n}\r\n\r\nPIC.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.irq_mask;\r\n    state[1] = this.irq_map;\r\n    state[2] = this.isr;\r\n    state[3] = this.irr;\r\n    state[4] = this.is_master;\r\n    state[5] = this.slave;\r\n    state[6] = this.expect_icw4;\r\n    state[7] = this.state;\r\n    state[8] = this.read_isr;\r\n    state[9] = this.auto_eoi;\r\n    state[10] = this.elcr;\r\n\r\n    return state;\r\n};\r\n\r\nPIC.prototype.set_state = function(state)\r\n{\r\n    this.irq_mask = state[0];\r\n    this.irq_map = state[1];\r\n    this.isr = state[2];\r\n    this.irr = state[3];\r\n    this.is_master = state[4];\r\n    this.slave = state[5];\r\n    this.expect_icw4 = state[6];\r\n    this.state = state[7];\r\n    this.read_isr = state[8];\r\n    this.auto_eoi = state[9];\r\n    this.elcr = state[10];\r\n};\r\n\r\nPIC.prototype.port20_write = function(data_byte)\r\n{\r\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\r\n    if(data_byte & 0x10) // xxxx1xxx\r\n    {\r\n        // icw1\r\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\r\n        this.isr = 0;\r\n        this.irr = 0;\r\n        this.irq_mask = 0;\r\n        this.irq_value = 0;\r\n        this.auto_eoi = 1;\r\n        this.requested_irq = -1;\r\n\r\n        this.expect_icw4 = data_byte & 1;\r\n        this.state = 1;\r\n    }\r\n    else if(data_byte & 8) // xxx01xxx\r\n    {\r\n        // ocw3\r\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\r\n        if(data_byte & 2)\r\n        {\r\n            this.read_isr = data_byte & 1;\r\n        }\r\n        if(data_byte & 4)\r\n        {\r\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\r\n        }\r\n        if(data_byte & 0x40)\r\n        {\r\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\r\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\r\n        }\r\n    }\r\n    else // xxx00xxx\r\n    {\r\n        // ocw2\r\n        // end of interrupt\r\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\r\n\r\n        var eoi_type = data_byte >> 5;\r\n\r\n        if(eoi_type === 1)\r\n        {\r\n            // non-specific eoi\r\n            this.isr &= this.isr - 1;\r\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\r\n        }\r\n        else if(eoi_type === 3)\r\n        {\r\n            // specific eoi\r\n            this.isr &= ~(1 << (data_byte & 7));\r\n        }\r\n        else if((data_byte & 0xC8) === 0xC0)\r\n        {\r\n            // os2 v4\r\n            let priority = data_byte & 7;\r\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\r\n            dbg_assert(false);\r\n            this.isr &= this.isr - 1;\r\n        }\r\n\r\n        this.check_irqs();\r\n    }\r\n};\r\n\r\nPIC.prototype.port20_read = function()\r\n{\r\n    if(this.read_isr)\r\n    {\r\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\r\n        return this.isr;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\r\n        return this.irr;\r\n    }\r\n};\r\n\r\nPIC.prototype.port21_write = function(data_byte)\r\n{\r\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\r\n    if(this.state === 0)\r\n    {\r\n        if(this.expect_icw4)\r\n        {\r\n            // icw4\r\n            this.expect_icw4 = false;\r\n            this.auto_eoi = data_byte & 2;\r\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\r\n\r\n            if((data_byte & 1) === 0)\r\n            {\r\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // ocw1\r\n            this.irq_mask = ~data_byte;\r\n\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\r\n                        \" (\" + this.name + \")\", LOG_PIC);\r\n            }\r\n\r\n            this.check_irqs();\r\n        }\r\n    }\r\n    else if(this.state === 1)\r\n    {\r\n        // icw2\r\n        this.irq_map = data_byte;\r\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\r\n                \" (\" + this.name + \")\", LOG_PIC);\r\n        this.state++;\r\n    }\r\n    else if(this.state === 2)\r\n    {\r\n        // icw3\r\n        this.state = 0;\r\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\r\n    }\r\n};\r\n\r\nPIC.prototype.port21_read = function()\r\n{\r\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\r\n    return ~this.irq_mask & 0xFF;\r\n};\r\n\r\nPIC.prototype.port4D0_read = function()\r\n{\r\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\r\n    return this.elcr;\r\n};\r\n\r\nPIC.prototype.port4D0_write = function(value)\r\n{\r\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\r\n    // set by seabios to 00 0C (only set for pci interrupts)\r\n    this.elcr = value;\r\n};\r\n\r\n","\"use strict\";\r\n\r\n/*\r\n * Serial ports\r\n * http://wiki.osdev.org/UART\r\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\r\n * https://www.freebsd.org/doc/en/articles/serial-uart/\r\n */\r\n\r\n/** @const */\r\nvar DLAB = 0x80;\r\n\r\n\r\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\r\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\r\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\r\n\r\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\r\n/** @const */var UART_IIR_NO_INT = 0x01;\r\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\r\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\r\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\r\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\r\n\r\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\r\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\r\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\r\n\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {number} port\r\n * @param {BusConnector} bus\r\n */\r\nfunction UART(cpu, port, bus)\r\n{\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.ints = 1 << UART_IIR_THRI;\r\n\r\n    this.baud_rate = 0;\r\n\r\n    this.line_control = 0;\r\n\r\n    // line status register\r\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\r\n\r\n    this.fifo_control = 0;\r\n\r\n    // interrupts enable\r\n    this.ier = 0;\r\n\r\n    // interrupt identification register\r\n    this.iir = UART_IIR_NO_INT;\r\n\r\n    this.modem_control = 0;\r\n    this.modem_status = 0;\r\n\r\n    this.scratch_register = 0;\r\n\r\n    this.irq = 0;\r\n\r\n    this.input = new ByteQueue(4096);\r\n\r\n    this.current_line = [];\r\n\r\n    switch(port)\r\n    {\r\n        case 0x3F8:\r\n            this.com = 0;\r\n            this.irq = 4;\r\n            break;\r\n        case 0x2F8:\r\n            this.com = 1;\r\n            this.irq = 3;\r\n            break;\r\n        case 0x3E8:\r\n            this.com = 2;\r\n            this.irq = 4;\r\n            break;\r\n        case 0x2E8:\r\n            this.com = 3;\r\n            this.irq = 3;\r\n            break;\r\n        default:\r\n            dbg_log(\"Invalid serial port: \" + h(port), LOG_SERIAL);\r\n            this.com = 0;\r\n            this.irq = 4;\r\n    }\r\n\r\n    this.bus.register(\"serial\" + this.com + \"-input\", function(data)\r\n    {\r\n        this.data_received(data);\r\n    }, this);\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_write(port, this, function(out_byte)\r\n    {\r\n        this.write_data(out_byte);\r\n    }, function(out_word)\r\n    {\r\n        this.write_data(out_word & 0xFF);\r\n        this.write_data(out_word >> 8);\r\n    });\r\n\r\n    io.register_write(port | 1, this, function(out_byte)\r\n    {\r\n        if(this.line_control & DLAB)\r\n        {\r\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\r\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\r\n        }\r\n        else\r\n        {\r\n            this.ier = out_byte & 0xF;\r\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\r\n            this.CheckInterrupt();\r\n        }\r\n    });\r\n\r\n    io.register_read(port, this, function()\r\n    {\r\n        if(this.line_control & DLAB)\r\n        {\r\n            return this.baud_rate & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            var data = this.input.shift();\r\n\r\n            if(data === -1)\r\n            {\r\n                dbg_log(\"Read input empty\", LOG_SERIAL);\r\n            }\r\n            else\r\n            {\r\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\r\n            }\r\n\r\n            if(this.input.length === 0)\r\n            {\r\n                this.lsr &= ~UART_LSR_DATA_READY;\r\n                this.ClearInterrupt(UART_IIR_CTI);\r\n            }\r\n\r\n            return data;\r\n        }\r\n    });\r\n\r\n    io.register_read(port | 1, this, function()\r\n    {\r\n        if(this.line_control & DLAB)\r\n        {\r\n            return this.baud_rate >> 8;\r\n        }\r\n        else\r\n        {\r\n            return this.ier & 0xF;\r\n        }\r\n    });\r\n\r\n    io.register_read(port | 2, this, function()\r\n    {\r\n        var ret = this.iir & 0xF | 0xC0;\r\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\r\n\r\n        if (this.iir == UART_IIR_THRI) {\r\n            this.ClearInterrupt(UART_IIR_THRI);\r\n        }\r\n\r\n        return ret;\r\n    });\r\n    io.register_write(port | 2, this, function(out_byte)\r\n    {\r\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\r\n        this.fifo_control = out_byte;\r\n    });\r\n\r\n    io.register_read(port | 3, this, function()\r\n    {\r\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\r\n        return this.line_control;\r\n    });\r\n    io.register_write(port | 3, this, function(out_byte)\r\n    {\r\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\r\n        this.line_control = out_byte;\r\n    });\r\n\r\n\r\n    io.register_read(port | 4, this, function()\r\n    {\r\n        return this.modem_control;\r\n    });\r\n    io.register_write(port | 4, this, function(out_byte)\r\n    {\r\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\r\n        this.modem_control = out_byte;\r\n    });\r\n\r\n    io.register_read(port | 5, this, function()\r\n    {\r\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\r\n        return this.lsr;\r\n    });\r\n    io.register_write(port | 5, this, function(out_byte)\r\n    {\r\n        dbg_log(\"Factory test write\", LOG_SERIAL);\r\n    });\r\n\r\n    io.register_read(port | 6, this, function()\r\n    {\r\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\r\n        return this.modem_status;\r\n    });\r\n    io.register_write(port | 6, this, function(out_byte)\r\n    {\r\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\r\n    });\r\n\r\n    io.register_read(port | 7, this, function()\r\n    {\r\n        return this.scratch_register;\r\n    });\r\n    io.register_write(port | 7, this, function(out_byte)\r\n    {\r\n        this.scratch_register = out_byte;\r\n    });\r\n}\r\n\r\nUART.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.ints;\r\n    state[1] = this.baud_rate;\r\n    state[2] = this.line_control;\r\n    state[3] = this.lsr;\r\n    state[4] = this.fifo_control;\r\n    state[5] = this.ier;\r\n    state[6] = this.iir;\r\n    state[7] = this.modem_control;\r\n    state[8] = this.modem_status;\r\n    state[9] = this.scratch_register;\r\n    state[10] = this.irq;\r\n\r\n    return state;\r\n};\r\n\r\nUART.prototype.set_state = function(state)\r\n{\r\n    this.ints = state[0];\r\n    this.baud_rate = state[1];\r\n    this.line_control = state[2];\r\n    this.lsr = state[3];\r\n    this.fifo_control = state[4];\r\n    this.ier = state[5];\r\n    this.iir = state[6];\r\n    this.modem_control = state[7];\r\n    this.modem_status = state[8];\r\n    this.scratch_register = state[9];\r\n    this.irq = state[10];\r\n};\r\n\r\nUART.prototype.CheckInterrupt = function() {\r\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\r\n        this.iir = UART_IIR_CTI;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    } else\r\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\r\n        this.iir = UART_IIR_THRI;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    } else\r\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\r\n        this.iir = UART_IIR_MSI;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    } else {\r\n        this.iir = UART_IIR_NO_INT;\r\n        this.cpu.device_lower_irq(this.irq);\r\n    }\r\n};\r\n\r\nUART.prototype.ThrowInterrupt = function(line) {\r\n    this.ints |= (1 << line);\r\n    this.CheckInterrupt();\r\n};\r\n\r\nUART.prototype.ClearInterrupt = function(line) {\r\n    this.ints &= ~(1 << line);\r\n    this.CheckInterrupt();\r\n};\r\n\r\n/**\r\n * @param {number} data\r\n */\r\nUART.prototype.data_received = function(data)\r\n{\r\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\r\n    this.input.push(data);\r\n\r\n    this.lsr |= UART_LSR_DATA_READY;\r\n    this.ThrowInterrupt(UART_IIR_CTI);\r\n};\r\n\r\nUART.prototype.write_data = function(out_byte)\r\n{\r\n    if(this.line_control & DLAB)\r\n    {\r\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\r\n        return;\r\n    }\r\n\r\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\r\n\r\n    this.ThrowInterrupt(UART_IIR_THRI);\r\n\r\n    this.bus.send(\"serial\" + this.com + \"-output-byte\", out_byte);\r\n\r\n    if(out_byte === 0xFF)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var char = String.fromCharCode(out_byte);\r\n\r\n    this.bus.send(\"serial\" + this.com + \"-output-char\", char);\r\n\r\n    this.current_line.push(out_byte);\r\n\r\n    if(char === \"\\n\")\r\n    {\r\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\r\n        this.bus.send(\"serial\" + this.com + \"-output-line\", String.fromCharCode.apply(\"\", this.current_line));\r\n        this.current_line = [];\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar STATE_VERSION = 5;\r\n\r\n/** @const */\r\nvar STATE_MAGIC = 0x86768676|0;\r\n\r\n/** @const */\r\nvar STATE_INDEX_MAGIC = 0;\r\n\r\n/** @const */\r\nvar STATE_INDEX_VERSION = 1;\r\n\r\n/** @const */\r\nvar STATE_INDEX_TOTAL_LEN = 2;\r\n\r\n/** @const */\r\nvar STATE_INDEX_INFO_LEN = 3;\r\n\r\n/** @const */\r\nvar STATE_INFO_BLOCK_START = 16;\r\n\r\n\r\n/** @constructor */\r\nfunction StateLoadError(msg)\r\n{\r\n    this.message = msg;\r\n}\r\nStateLoadError.prototype = new Error;\r\n\r\n\r\nfunction save_object(obj, saved_buffers)\r\n{\r\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\r\n    {\r\n        return obj;\r\n    }\r\n\r\n    dbg_assert(obj.constructor !== Object);\r\n\r\n    if(obj.BYTES_PER_ELEMENT)\r\n    {\r\n        // Uint8Array, etc.\r\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\r\n\r\n        return {\r\n            \"__state_type__\": obj.constructor.name,\r\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\r\n        };\r\n    }\r\n\r\n    if(DEBUG && !obj.get_state)\r\n    {\r\n        console.log(\"Object without get_state: \", obj);\r\n    }\r\n\r\n    var state = obj.get_state();\r\n    var result = [];\r\n\r\n    for(var i = 0; i < state.length; i++)\r\n    {\r\n        var value = state[i];\r\n\r\n        dbg_assert(typeof value !== \"function\");\r\n\r\n        result[i] = save_object(value, saved_buffers);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction restore_object(base, obj, buffers)\r\n{\r\n    // recursively restore obj into base\r\n\r\n    if(typeof obj !== \"object\" || obj === null)\r\n    {\r\n        return obj;\r\n    }\r\n\r\n    if(base instanceof Array)\r\n    {\r\n        return obj;\r\n    }\r\n\r\n    var type = obj[\"__state_type__\"];\r\n\r\n    if(type === undefined)\r\n    {\r\n        if(DEBUG && base === undefined)\r\n        {\r\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\r\n            dbg_assert(false);\r\n        }\r\n\r\n        if(DEBUG && !base.get_state)\r\n        {\r\n            console.log(\"No get_state:\", base);\r\n        }\r\n\r\n        var current = base.get_state();\r\n\r\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\r\n\r\n        for(var i = 0; i < obj.length; i++)\r\n        {\r\n            obj[i] = restore_object(current[i], obj[i], buffers);\r\n        }\r\n\r\n        base.set_state(obj);\r\n\r\n        return base;\r\n    }\r\n    else\r\n    {\r\n        var table = {\r\n            \"Uint8Array\": Uint8Array,\r\n            \"Int8Array\": Int8Array,\r\n            \"Uint16Array\": Uint16Array,\r\n            \"Int16Array\": Int16Array,\r\n            \"Uint32Array\": Uint32Array,\r\n            \"Int32Array\": Int32Array,\r\n            \"Float32Array\": Float32Array,\r\n            \"Float64Array\": Float64Array,\r\n        };\r\n\r\n        var constructor = table[type];\r\n        dbg_assert(constructor, \"Unkown type: \" + type);\r\n\r\n        var info = buffers.infos[obj[\"buffer_id\"]];\r\n\r\n        dbg_assert(base);\r\n        dbg_assert(base.constructor === constructor);\r\n\r\n        // restore large buffers by just returning a view on the state blob\r\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\r\n        {\r\n            return new Uint8Array(buffers.full, info.offset, info.length);\r\n        }\r\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\r\n        //      and possibly also breaks restore -> save -> restore again\r\n        // avoid a new allocation if possible\r\n        //else if(base &&\r\n        //        base.constructor === constructor &&\r\n        //        base.byteOffset === 0 &&\r\n        //        base.byteLength === info.length)\r\n        //{\r\n        //    new Uint8Array(base.buffer).set(\r\n        //        new Uint8Array(buffers.full, info.offset, info.length),\r\n        //        base.byteOffset\r\n        //    );\r\n        //    return base;\r\n        //}\r\n        else\r\n        {\r\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\r\n            return new constructor(buf);\r\n        }\r\n    }\r\n}\r\n\r\nCPU.prototype.save_state = function()\r\n{\r\n    var saved_buffers = [];\r\n    var state = save_object(this, saved_buffers);\r\n\r\n    var buffer_infos = [];\r\n    var total_buffer_size = 0;\r\n\r\n    for(var i = 0; i < saved_buffers.length; i++)\r\n    {\r\n        var len = saved_buffers[i].byteLength;\r\n\r\n        buffer_infos[i] = {\r\n            offset: total_buffer_size,\r\n            length: len,\r\n        };\r\n\r\n        total_buffer_size += len;\r\n\r\n        // align\r\n        total_buffer_size = total_buffer_size + 3 & ~3;\r\n    }\r\n\r\n    var info_object = JSON.stringify({\r\n        \"buffer_infos\": buffer_infos,\r\n        \"state\": state,\r\n    });\r\n\r\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\r\n    buffer_block_start = buffer_block_start + 3 & ~3;\r\n    var total_size = buffer_block_start + total_buffer_size;\r\n\r\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\r\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\r\n\r\n    var result = new ArrayBuffer(total_size);\r\n\r\n    var header_block = new Int32Array(\r\n        result,\r\n        0,\r\n        STATE_INFO_BLOCK_START / 4\r\n    );\r\n    var info_block = new Uint16Array(\r\n        result,\r\n        STATE_INFO_BLOCK_START,\r\n        info_object.length\r\n    );\r\n    var buffer_block = new Uint8Array(\r\n        result,\r\n        buffer_block_start\r\n    );\r\n\r\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\r\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\r\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\r\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\r\n\r\n    for(var i = 0; i < info_object.length; i++)\r\n    {\r\n        info_block[i] = info_object.charCodeAt(i);\r\n    }\r\n\r\n    for(var i = 0; i < saved_buffers.length; i++)\r\n    {\r\n        var buffer = saved_buffers[i];\r\n        dbg_assert(buffer.constructor === Uint8Array);\r\n        buffer_block.set(buffer, buffer_infos[i].offset);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nCPU.prototype.restore_state = function(state)\r\n{\r\n    var len = state.byteLength;\r\n\r\n    if(len < STATE_INFO_BLOCK_START)\r\n    {\r\n        throw new StateLoadError(\"Invalid length: \" + len);\r\n    }\r\n\r\n    var header_block = new Int32Array(state, 0, 4);\r\n\r\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\r\n    {\r\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\r\n    }\r\n\r\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\r\n    {\r\n        throw new StateLoadError(\r\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\r\n                \" we=\" + STATE_VERSION);\r\n    }\r\n\r\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\r\n    {\r\n        throw new StateLoadError(\r\n                \"Length doesn't match header: \" +\r\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\r\n    }\r\n\r\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\r\n\r\n    if(info_block_len < 0 ||\r\n       info_block_len + 12 >= len ||\r\n       info_block_len % 2)\r\n    {\r\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\r\n    }\r\n\r\n    var info_block_str_len = info_block_len / 2;\r\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\r\n    var info_block = \"\";\r\n\r\n    for(var i = 0; i < info_block_str_len - 8; )\r\n    {\r\n        info_block += String.fromCharCode(\r\n            info_block_buffer[i++], info_block_buffer[i++],\r\n            info_block_buffer[i++], info_block_buffer[i++],\r\n            info_block_buffer[i++], info_block_buffer[i++],\r\n            info_block_buffer[i++], info_block_buffer[i++]\r\n        );\r\n    }\r\n\r\n    for(; i < info_block_str_len; )\r\n    {\r\n        info_block += String.fromCharCode(info_block_buffer[i++]);\r\n    }\r\n\r\n    var info_block_obj = JSON.parse(info_block);\r\n    var state_object = info_block_obj[\"state\"];\r\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\r\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\r\n    buffer_block_start = buffer_block_start + 3 & ~3;\r\n\r\n    for(var i = 0; i < buffer_infos.length; i++)\r\n    {\r\n        buffer_infos[i].offset += buffer_block_start;\r\n    }\r\n\r\n    var buffers = {\r\n        full: state,\r\n        infos: buffer_infos,\r\n    };\r\n\r\n    restore_object(this, state_object, buffers);\r\n};\r\n","\"use strict\";\r\n\r\n\r\n/** @const */ var E8390_CMD = 0x00 /* The command register (for all pages) */\r\n\r\n/* Page 0 register offsets. */\r\n/** @const */ var EN0_CLDALO = 0x01 /* Low byte of current local dma addr RD */\r\n/** @const */ var EN0_STARTPG = 0x01 /* Starting page of ring bfr WR */\r\n/** @const */ var EN0_CLDAHI = 0x02 /* High byte of current local dma addr RD */\r\n/** @const */ var EN0_STOPPG = 0x02 /* Ending page +1 of ring bfr WR */\r\n/** @const */ var EN0_BOUNDARY = 0x03 /* Boundary page of ring bfr RD WR */\r\n/** @const */ var EN0_TSR = 0x04 /* Transmit status reg RD */\r\n/** @const */ var EN0_TPSR = 0x04 /* Transmit starting page WR */\r\n/** @const */ var EN0_NCR = 0x05 /* Number of collision reg RD */\r\n/** @const */ var EN0_TCNTLO = 0x05 /* Low byte of tx byte count WR */\r\n/** @const */ var EN0_FIFO = 0x06 /* FIFO RD */\r\n/** @const */ var EN0_TCNTHI = 0x06 /* High byte of tx byte count WR */\r\n/** @const */ var EN0_ISR = 0x07 /* Interrupt status reg RD WR */\r\n/** @const */ var EN0_CRDALO = 0x08 /* low byte of current remote dma address RD */\r\n/** @const */ var EN0_RSARLO = 0x08 /* Remote start address reg 0 */\r\n/** @const */ var EN0_CRDAHI = 0x09 /* high byte, current remote dma address RD */\r\n/** @const */ var EN0_RSARHI = 0x09 /* Remote start address reg 1 */\r\n/** @const */ var EN0_RCNTLO = 0x0a /* Remote byte count reg WR */\r\n/** @const */ var EN0_RCNTHI = 0x0b /* Remote byte count reg WR */\r\n/** @const */ var EN0_RSR = 0x0c /* rx status reg RD */\r\n/** @const */ var EN0_RXCR = 0x0c /* RX configuration reg WR */\r\n/** @const */ var EN0_TXCR = 0x0d /* TX configuration reg WR */\r\n/** @const */ var EN0_COUNTER0 = 0x0d /* Rcv alignment error counter RD */\r\n/** @const */ var EN0_DCFG = 0x0e /* Data configuration reg WR */\r\n/** @const */ var EN0_COUNTER1 = 0x0e /* Rcv CRC error counter RD */\r\n/** @const */ var EN0_IMR = 0x0f /* Interrupt mask reg WR */\r\n/** @const */ var EN0_COUNTER2 = 0x0f /* Rcv missed frame error counter RD */\r\n\r\n/** @const */ var NE_DATAPORT = 0x10 /* NatSemi-defined port window offset. */\r\n/** @const */ var NE_RESET = 0x1f /* Issue a read to reset, a write to clear. */\r\n\r\n/* Bits in EN0_ISR - Interrupt status register */\r\n/** @const */ var ENISR_RX = 0x01 /* Receiver, no error */\r\n/** @const */ var ENISR_TX = 0x02 /* Transmitter, no error */\r\n/** @const */ var ENISR_RX_ERR = 0x04 /* Receiver, with error */\r\n/** @const */ var ENISR_TX_ERR = 0x08 /* Transmitter, with error */\r\n/** @const */ var ENISR_OVER = 0x10 /* Receiver overwrote the ring */\r\n/** @const */ var ENISR_COUNTERS = 0x20 /* Counters need emptying */\r\n/** @const */ var ENISR_RDC = 0x40 /* remote dma complete */\r\n/** @const */ var ENISR_RESET = 0x80 /* Reset completed */\r\n/** @const */ var ENISR_ALL = 0x3f /* Interrupts we will enable */\r\n\r\n/** @const */ var ENRSR_RXOK = 0x01 /* Received a good packet */\r\n\r\n/** @const */ var START_PAGE = 0x40;\r\n/** @const */ var START_RX_PAGE = 0x40 + 12;\r\n/** @const */ var STOP_PAGE = 0x80;\r\n\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n */\r\nfunction Ne2k(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {PCI} */\r\n    this.pci = cpu.devices.pci;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n    this.bus.register(\"net0-receive\", function(data)\r\n    {\r\n        this.receive(data);\r\n    }, this);\r\n\r\n    this.port = 0x300;\r\n\r\n    this.name = \"ne2k\";\r\n\r\n    /** @const */\r\n    var use_pci = true;\r\n\r\n    if(use_pci)\r\n    {\r\n        this.pci_space = [\r\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\r\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\r\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\r\n        ];\r\n        this.pci_id = 0x05 << 3;\r\n        this.pci_bars = [\r\n            {\r\n                size: 32,\r\n            },\r\n        ];\r\n    }\r\n\r\n    this.isr = 0;\r\n    this.imr = 0; // interrupt mask register\r\n\r\n    this.cr = 1;\r\n\r\n    this.dcfg = 0;\r\n\r\n    this.rcnt = 0;\r\n\r\n    this.tcnt = 0;\r\n    this.tpsr = 0;\r\n    this.memory = new Uint8Array(256 * 0x80);\r\n\r\n    this.rxcr = 0;\r\n    this.txcr = 0;\r\n    this.tsr = 1;\r\n\r\n    // mac address\r\n    var mac = [\r\n        0x00, 0x22, 0x15,\r\n        Math.random() * 255 | 0,\r\n        Math.random() * 255 | 0,\r\n        Math.random() * 255 | 0,\r\n    ];\r\n\r\n    for(var i = 0; i < 6; i++)\r\n    {\r\n        this.memory[i << 1] = this.memory[i << 1 | 1] = mac[i];\r\n    }\r\n\r\n    this.memory[14] = this.memory[15] = 0x57;\r\n\r\n    dbg_log(\"Mac: \" + h(mac[0], 2) + \":\" +\r\n                      h(mac[1], 2) + \":\" +\r\n                      h(mac[2], 2) + \":\" +\r\n                      h(mac[3], 2) + \":\" +\r\n                      h(mac[4], 2) + \":\" +\r\n                      h(mac[5], 2), LOG_NET);\r\n\r\n    this.rsar = 0;\r\n\r\n    this.pstart = START_PAGE;\r\n    this.pstop = STOP_PAGE;\r\n\r\n    this.curpg = START_RX_PAGE;\r\n    this.boundary = START_RX_PAGE;\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_read(this.port | E8390_CMD, this, function()\r\n    {\r\n        dbg_log(\"Read cmd\", LOG_NET);\r\n        return this.cr;\r\n    });\r\n\r\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\r\n    {\r\n        this.cr = data_byte & ~4;\r\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\r\n\r\n        if(this.cr & 1)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if((data_byte | 0x18) && this.rcnt === 0)\r\n        {\r\n            this.do_interrupt(ENISR_RDC);\r\n        }\r\n\r\n        if(data_byte & 4)\r\n        {\r\n            var start = this.tpsr << 8;\r\n            var data = this.memory.subarray(start, start + this.tcnt);\r\n            this.bus.send(\"net0-send\", data);\r\n            this.bus.send(\"eth-transmit-end\", [data.length]);\r\n            this.do_interrupt(ENISR_TX);\r\n\r\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_COUNTER0, this, function()\r\n    {\r\n        dbg_log(\"Read counter0\", LOG_NET);\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(this.port | EN0_COUNTER1, this, function()\r\n    {\r\n        dbg_log(\"Read counter1\", LOG_NET);\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(this.port | EN0_COUNTER2, this, function()\r\n    {\r\n        dbg_log(\"Read counter2\", LOG_NET);\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(this.port | NE_RESET, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read reset\", LOG_NET);\r\n            this.do_interrupt(ENISR_RESET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg1/1f\", LOG_NET);\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\r\n            //this.isr &= ~ENISR_RESET;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/1f: \" + h(data_byte), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\r\n            this.pstart = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"pg1/1: \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\r\n            this.pstop = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"pg1/2: \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_ISR, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\r\n            return this.isr;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\r\n            return this.curpg;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            // acknowledge interrupts where bit is set\r\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\r\n            this.isr &= ~data_byte\r\n            this.update_irq();\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\r\n            this.curpg = data_byte\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            this.txcr = data_byte;\r\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x0d \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\r\n            this.dcfg = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x0e \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\r\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x0a \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\r\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x0b \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\r\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x08 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write start address count high: \" + h(data_byte, 2), LOG_NET);\r\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x09 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\r\n            this.imr = data_byte;\r\n            this.update_irq();\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x0f \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\r\n            return this.boundary;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg1/0x03\", LOG_NET);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\r\n            this.boundary = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x03 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_TSR, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            return this.tsr;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg1/0x04\", LOG_NET);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\r\n            this.tpsr = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x04 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\r\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x05 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\r\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg1/0x06 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_RSR, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            return 1 | 1 << 3; // receive status ok\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg1/0x0c\", LOG_NET);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\r\n    {\r\n        dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\r\n        this.rxcr = data_byte;\r\n    });\r\n\r\n    io.register_read(this.port | NE_DATAPORT | 0, this,\r\n            this.data_port_read8,\r\n            this.data_port_read16,\r\n            this.data_port_read32);\r\n    io.register_write(this.port | NE_DATAPORT | 0, this,\r\n            this.data_port_write16,\r\n            this.data_port_write16,\r\n            this.data_port_write32);\r\n\r\n    if(use_pci)\r\n    {\r\n        cpu.devices.pci.register_device(this);\r\n    }\r\n}\r\n\r\nNe2k.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.isr;\r\n    state[1] = this.imr;\r\n    state[2] = this.cr;\r\n    state[3] = this.dcfg;\r\n    state[4] = this.rcnt;\r\n    state[5] = this.tcnt;\r\n    state[6] = this.tpsr;\r\n    state[7] = this.rsar;\r\n    state[8] = this.pstart;\r\n    state[9] = this.curpg;\r\n    state[10] = this.boundary;\r\n\r\n    return state;\r\n};\r\n\r\nNe2k.prototype.set_state = function(state)\r\n{\r\n    this.isr = state[0];\r\n    this.imr = state[1];\r\n    this.cr = state[2];\r\n    this.dcfg = state[3];\r\n    this.rcnt = state[4];\r\n    this.tcnt = state[5];\r\n    this.tpsr = state[6];\r\n    this.rsar = state[7];\r\n    this.pstart = state[8];\r\n    this.curpg = state[9];\r\n    this.boundary = state[10];\r\n};\r\n\r\nNe2k.prototype.do_interrupt = function(ir_mask)\r\n{\r\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\r\n    this.isr |= ir_mask;\r\n    this.update_irq();\r\n};\r\n\r\nNe2k.prototype.update_irq = function()\r\n{\r\n    if(this.imr & this.isr)\r\n    {\r\n        this.pci.raise_irq(this.pci_id);\r\n    }\r\n    else\r\n    {\r\n        this.pci.lower_irq(this.pci_id);\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_write = function(data_byte)\r\n{\r\n    dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\r\n                            \" rsar=\" + h(this.rsar, 4) +\r\n                            \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\r\n\r\n    if(this.rsar > 0x10 && this.rsar < (START_PAGE << 8))\r\n    {\r\n        // unmapped\r\n        return;\r\n    }\r\n\r\n    this.rcnt--;\r\n    this.memory[this.rsar++] = data_byte;\r\n\r\n    if(this.rsar >= (this.pstop << 8))\r\n    {\r\n        this.rsar += (this.pstart - this.pstop) << 8;\r\n    }\r\n\r\n    if(this.rcnt === 0)\r\n    {\r\n        this.do_interrupt(ENISR_RDC);\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_write16 = function(data)\r\n{\r\n    this.data_port_write(data);\r\n\r\n    if(this.dcfg & 1)\r\n    {\r\n        this.data_port_write(data >> 8);\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_write32 = function(data)\r\n{\r\n    this.data_port_write(data);\r\n    this.data_port_write(data >> 8);\r\n    this.data_port_write(data >> 16);\r\n    this.data_port_write(data >> 24);\r\n};\r\n\r\nNe2k.prototype.data_port_read = function()\r\n{\r\n    var data = this.memory[this.rsar++];\r\n\r\n    dbg_log(\"Read data port: data=\" + h(data, 2) +\r\n                           \" rsar=\" + h(this.rsar - 1, 4) +\r\n                           \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\r\n    this.rcnt--;\r\n\r\n    if(this.rsar >= (this.pstop << 8))\r\n    {\r\n        this.rsar += (this.pstart - this.pstop) << 8;\r\n    }\r\n\r\n    if(this.rcnt === 0)\r\n    {\r\n        this.do_interrupt(ENISR_RDC);\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nNe2k.prototype.data_port_read8 = function()\r\n{\r\n    return this.data_port_read16() & 0xFF;\r\n};\r\n\r\nNe2k.prototype.data_port_read16 = function()\r\n{\r\n    if(this.dcfg & 1)\r\n    {\r\n        return this.data_port_read() | this.data_port_read() << 8;\r\n    }\r\n    else\r\n    {\r\n        return this.data_port_read();\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_read32 = function()\r\n{\r\n    return this.data_port_read() | this.data_port_read() << 8 |\r\n            this.data_port_read() << 16 | this.data_port_read() << 24;\r\n};\r\n\r\nNe2k.prototype.receive = function(data)\r\n{\r\n    // called from the adapter when data is received over the network\r\n\r\n    if(this.cr & 1)\r\n    {\r\n        // stop bit set\r\n        return;\r\n    }\r\n\r\n    this.bus.send(\"eth-receive-end\", [data.length]);\r\n\r\n    if(this.rxcr & 0x10)\r\n    {\r\n        // promiscuous\r\n    }\r\n    else if((this.rxcr & 4) &&\r\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\r\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\r\n    {\r\n        // broadcast\r\n    }\r\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\r\n    {\r\n        // multicast\r\n        // XXX\r\n        return;\r\n    }\r\n    else if(data[0] === this.memory[0] && data[1] === this.memory[2] &&\r\n            data[2] === this.memory[4] && data[3] === this.memory[6] &&\r\n            data[4] === this.memory[8] && data[5] === this.memory[10])\r\n    {\r\n    }\r\n    else\r\n    {\r\n        return;\r\n    }\r\n\r\n    var packet_length = Math.max(60, data.length);\r\n\r\n    var offset = this.curpg << 8;\r\n    var total_length = packet_length + 4;\r\n    var data_start = offset + 4;\r\n    var next = this.curpg + 1 + (total_length >> 8);\r\n\r\n    var end = offset + total_length;\r\n\r\n    if(end > this.memory.length)\r\n    {\r\n        // shouldn't happen because at this size it can't cross a page\r\n        dbg_assert(data.length >= 60);\r\n\r\n        var cut = this.memory.length - data_start;\r\n        this.memory.set(data.subarray(0, cut), data_start);\r\n        this.memory.set(data.subarray(cut), START_RX_PAGE);\r\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\r\n    }\r\n    else\r\n    {\r\n        this.memory.set(data, data_start);\r\n\r\n        if(data.length < 60)\r\n        {\r\n            for(var i = data.length; i < 60; i++)\r\n            {\r\n                this.memory[data_start + i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(next >= this.pstop)\r\n    {\r\n        next += this.pstart - this.pstop;\r\n    }\r\n\r\n    // write packet header\r\n    this.memory[offset] = ENRSR_RXOK; // status\r\n    this.memory[offset + 1] = next;\r\n    this.memory[offset + 2] = total_length;\r\n    this.memory[offset + 3] = total_length >> 8;\r\n\r\n    this.curpg = next;\r\n\r\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\r\n\r\n    this.do_interrupt(ENISR_RX);\r\n};\r\n\r\nNe2k.prototype.get_page = function()\r\n{\r\n    return this.cr & 0xC0;\r\n};\r\n","\"use strict\";\r\n\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n * @param {FS} filesystem\r\n */\r\nfunction VirtIO(cpu, bus, filesystem)\r\n{\r\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\r\n\r\n    this.pci_space = [\r\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\r\n    ];\r\n    this.pci_id = 0x06 << 3;\r\n    this.pci_bars = [\r\n        {\r\n            size: 256,\r\n        },\r\n    ];\r\n    this.name = \"virtio\";\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_read(0xA800, this,\r\n        function() {\r\n            dbg_log(\"Read device features\", LOG_VIRTIO);\r\n            return 1;\r\n        },\r\n        undefined,\r\n        function()\r\n        {\r\n            dbg_log(\"Read device features\", LOG_VIRTIO);\r\n            return 1;\r\n        }\r\n    );\r\n\r\n    io.register_write(0xA804, this, undefined, undefined, function(data)\r\n    {\r\n        // write guest features\r\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\r\n    });\r\n\r\n    io.register_write(0xA80E, this, undefined, function(data)\r\n    {\r\n        // rw queue select\r\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\r\n        this.queue_select = data;\r\n    }, undefined);\r\n\r\n    io.register_read(0xA80C, this, undefined, function()\r\n    {\r\n        // read queue size\r\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\r\n        return this.queue_size;\r\n    }, undefined);\r\n\r\n    io.register_read(0xA808, this, undefined, undefined, function()\r\n    {\r\n        // rw queue address\r\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\r\n\r\n        if(this.queue_select === 0)\r\n        {\r\n            return this.queue_address;\r\n        }\r\n        else\r\n        {\r\n            // queue does not exist\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(0xA808, this, undefined, undefined, function(data)\r\n    {\r\n        // rw queue address\r\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\r\n        this.queue_address = data;\r\n    });\r\n\r\n    io.register_write(0xA812, this, function(data)\r\n    {\r\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\r\n\r\n        if(data === 0)\r\n        {\r\n            dbg_log(\"Reset\", LOG_VIRTIO);\r\n            this.reset();\r\n        }\r\n        else if(data & 0x80)\r\n        {\r\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\r\n                    ((data & 2) ? \"DRIVER \" : \"\") +\r\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\r\n                    LOG_VIRTIO);\r\n\r\n        }\r\n\r\n        this.device_status = data;\r\n    });\r\n\r\n    io.register_read(0xA812, this, function()\r\n    {\r\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\r\n        return this.device_status;\r\n    });\r\n\r\n    io.register_read(0xA813, this, function()\r\n    {\r\n        dbg_log(\"Read isr\", LOG_VIRTIO);\r\n\r\n        // reading resets the isr\r\n        var isr = this.isr;\r\n        this.isr = 0;\r\n        this.pci.lower_irq(this.pci_id);\r\n        return isr;\r\n    });\r\n\r\n    io.register_write(0xA810, this, undefined, function(data)\r\n    {\r\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\r\n\r\n        // only queue 0 supported\r\n        dbg_assert(data === 0);\r\n\r\n        var queue_start = this.queue_address << 12;\r\n        var ring_start = queue_start + 16 * this.queue_size;\r\n        var ring_desc_start = ring_start + 4;\r\n\r\n        var //flags = this.cpu.read16(ring_start),\r\n            // index of the next free ring\r\n            idx = this.cpu.read16(ring_start + 2);\r\n\r\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\r\n        //dbg_assert(idx < this.queue_size);\r\n\r\n        var mask = this.queue_size - 1;\r\n        idx &= mask;\r\n\r\n        while(this.last_idx !== idx)\r\n        {\r\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\r\n            this.handle_descriptor(desc_idx);\r\n\r\n            this.last_idx = this.last_idx + 1 & mask;\r\n        }\r\n    });\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {PCI} */\r\n    this.pci = cpu.devices.pci;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    this.queue_select = 0;\r\n    this.device_status = 0;\r\n    this.isr = 0;\r\n\r\n    // these should be stored per queue if there is more than one queue\r\n    this.last_idx = 0;\r\n    this.queue_size = 32;\r\n    this.queue_address = 0;\r\n\r\n    for(var i = 0; i < 128; i++)\r\n    {\r\n        io.register_read(0xA814 + i, this, function(port)\r\n        {\r\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\r\n\r\n            if(port < this.device.configspace.length)\r\n            {\r\n                return this.device.configspace[port];\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        }.bind(this, i), undefined, undefined);\r\n\r\n        io.register_write(0xA814 + i, this, function(port, data)\r\n        {\r\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\r\n        }.bind(this, i), undefined, undefined);\r\n    }\r\n\r\n    // should be generalized to support more devices than just the filesystem\r\n    this.device = new Virtio9p(filesystem, bus);\r\n    this.device.SendReply = this.device_reply.bind(this);\r\n\r\n    cpu.devices.pci.register_device(this);\r\n}\r\n\r\nVirtIO.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = 0; // unused\r\n    state[1] = this.queue_select;\r\n    state[2] = this.device_status;\r\n    state[3] = this.isr;\r\n    state[4] = this.last_idx;\r\n    state[5] = this.queue_size;\r\n    state[6] = this.queue_address;\r\n    state[7] = this.device;\r\n\r\n    return state;\r\n};\r\n\r\nVirtIO.prototype.set_state = function(state)\r\n{\r\n    this.queue_select = state[1];\r\n    this.device_status = state[2];\r\n    this.isr = state[3];\r\n    this.last_idx = state[4];\r\n    this.queue_size = state[5];\r\n    this.queue_address = state[6];\r\n\r\n    this.device = state[7];\r\n    this.device.SendReply = this.device_reply.bind(this);\r\n};\r\n\r\nVirtIO.prototype.reset = function()\r\n{\r\n    this.queue_select = 0;\r\n    this.device_status = 0;\r\n    this.isr = 0;\r\n\r\n    this.last_idx = 0;\r\n    this.queue_size = 32;\r\n    this.queue_address = 0;\r\n};\r\n\r\nVirtIO.prototype.handle_descriptor = function(idx)\r\n{\r\n    var next = idx;\r\n    var desc_start = this.queue_address << 12;\r\n\r\n    var buffer_idx = 0;\r\n    var buffers = [];\r\n\r\n    do\r\n    {\r\n        var addr = desc_start + next * 16;\r\n        var flags = this.cpu.read16(addr + 12);\r\n\r\n        if(flags & VRING_DESC_F_WRITE)\r\n        {\r\n            break;\r\n        }\r\n\r\n        if(flags & VRING_DESC_F_INDIRECT) {\r\n            dbg_assert(false, \"unsupported\");\r\n        }\r\n\r\n        var addr_low = this.cpu.read32s(addr);\r\n        var addr_high = this.cpu.read32s(addr + 4);\r\n        var len = this.cpu.read32s(addr + 8) >>> 0;\r\n\r\n        buffers.push({\r\n            addr_low: addr_low,\r\n            addr_high: addr_high,\r\n            len: len,\r\n        });\r\n\r\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\r\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\r\n\r\n        if(flags & VRING_DESC_F_NEXT)\r\n        {\r\n            next = this.cpu.read16(addr + 14);\r\n            dbg_assert(next < this.queue_size);\r\n        }\r\n        else\r\n        {\r\n            next = -1;\r\n            break;\r\n        }\r\n    }\r\n    while(true);\r\n\r\n    var buffer_len = -1;\r\n    var pointer = 0;\r\n\r\n    var infos = {\r\n        start: idx,\r\n        next: next,\r\n    };\r\n\r\n    this.device.ReceiveRequest(infos, function()\r\n    {\r\n        // return one byte\r\n\r\n        if(pointer >= buffer_len)\r\n        {\r\n            if(buffer_idx === buffers.length)\r\n            {\r\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\r\n                return 0;\r\n            }\r\n\r\n            var buf = buffers[buffer_idx++];\r\n\r\n            addr_low = buf.addr_low;\r\n            buffer_len = buf.len;\r\n            pointer = 0;\r\n        }\r\n\r\n        return this.cpu.read8(addr_low + pointer++);\r\n    }.bind(this));\r\n};\r\n\r\nVirtIO.prototype.device_reply = function(queueidx, infos)\r\n{\r\n    if(infos.next === -1)\r\n    {\r\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\r\n        return;\r\n    }\r\n\r\n    var mask = this.queue_size - 1;\r\n    var result_length = this.device.replybuffersize;\r\n\r\n    var next = infos.next;\r\n    var desc_start = this.queue_address << 12;\r\n\r\n    var buffer_idx = 0;\r\n    var buffers = [];\r\n\r\n    do\r\n    {\r\n        var addr = desc_start + next * 16;\r\n        var flags = this.cpu.read16(addr + 12);\r\n\r\n        if((flags & VRING_DESC_F_WRITE) === 0)\r\n        {\r\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\r\n            break;\r\n        }\r\n\r\n        var addr_low = this.cpu.read32s(addr);\r\n        var addr_high = this.cpu.read32s(addr + 4);\r\n        var len = this.cpu.read32s(addr + 8) >>> 0;\r\n\r\n        buffers.push({\r\n            addr_low: addr_low,\r\n            addr_high: addr_high,\r\n            len: len,\r\n        });\r\n\r\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\r\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\r\n\r\n        if(flags & VRING_DESC_F_NEXT)\r\n        {\r\n            next = this.cpu.read16(addr + 14);\r\n            dbg_assert(next < this.queue_size);\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n    while(true);\r\n\r\n    var buffer_len = -1;\r\n    var pointer = 0;\r\n\r\n    for(var i = 0; i < result_length; i++)\r\n    {\r\n        var data = this.device.replybuffer[i];\r\n\r\n        if(pointer >= buffer_len)\r\n        {\r\n            if(buffer_idx === buffers.length)\r\n            {\r\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\r\n                return 0;\r\n            }\r\n\r\n            var buf = buffers[buffer_idx++];\r\n\r\n            addr_low = buf.addr_low;\r\n            buffer_len = buf.len;\r\n            pointer = 0;\r\n        }\r\n\r\n        this.cpu.write8(addr_low + pointer++, data);\r\n    }\r\n\r\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\r\n    used_desc_start = used_desc_start + 4095 & ~4095;\r\n\r\n    var flags = this.cpu.read16(used_desc_start);\r\n    var used_idx = this.cpu.read16(used_desc_start + 2);\r\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\r\n\r\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\r\n\r\n    used_idx &= mask;\r\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\r\n    this.cpu.write32(used_desc_offset, infos.start);\r\n    this.cpu.write32(used_desc_offset + 4, result_length);\r\n\r\n    this.isr |= 1;\r\n    this.pci.raise_irq(this.pci_id);\r\n};\r\n","\"use strict\";\r\n\r\n// jor1k compatibility\r\n\r\nvar VIRTIO_MAGIC_REG = 0x0;\r\nvar VIRTIO_VERSION_REG = 0x4;\r\nvar VIRTIO_DEVICE_REG = 0x8;\r\nvar VIRTIO_VENDOR_REG = 0xc;\r\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\r\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\r\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\r\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\r\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\r\nvar VIRTIO_QUEUESEL_REG = 0x30;\r\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\r\nvar VIRTIO_QUEUENUM_REG = 0x38;\r\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\r\nvar VIRTIO_QUEUEPFN_REG = 0x40;\r\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\r\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\r\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\r\nvar VIRTIO_STATUS_REG = 0x70;\r\n\r\n/** @const */\r\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\r\n/** @const */\r\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\r\n/** @const */\r\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\r\n\r\n\r\nfunction hex8(n)\r\n{\r\n    return h(n);\r\n}\r\n\r\nvar message = {};\r\n\r\n/** @param {...string} log */\r\nmessage.Debug = function(log)\r\n{\r\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\r\n}\r\n\r\nmessage.Abort = function()\r\n{ \r\n    if(DEBUG)\r\n    {\r\n        throw \"abort\"; \r\n    }\r\n}\r\n\r\n\r\n// XXX: Should go through emulator interface\r\nvar LoadBinaryResource;\r\n\r\nif(typeof XMLHttpRequest !== \"undefined\")\r\n{\r\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\r\n        var req = new XMLHttpRequest();\r\n        req.open('GET', url, true);\r\n        req.responseType = \"arraybuffer\";\r\n        req.onreadystatechange = function () {\r\n            if (req.readyState != 4) {\r\n                return;\r\n            }\r\n            if ((req.status != 200) && (req.status != 0)) {\r\n                OnError(\"Error: Could not load file \" + url);\r\n                return;\r\n            }\r\n            var arrayBuffer = req.response;\r\n            if (arrayBuffer) {\r\n                OnSuccess(arrayBuffer);\r\n            } else {\r\n                OnError(\"Error: No data received from: \" + url);\r\n            }\r\n        };\r\n        /*\r\n            req.onload = function(e)\r\n            {\r\n                    var arrayBuffer = req.response;\r\n                    if (arrayBuffer) {\r\n                        OnLoadFunction(arrayBuffer);\r\n                    }\r\n            };\r\n        */\r\n        req.send(null);\r\n    }\r\n}\r\nelse\r\n{\r\n    LoadBinaryResource = function(url, OnSuccess, OnError)\r\n    {\r\n        //console.log(url);\r\n        require(\"fs\")[\"readFile\"](url, function(err, data)\r\n        {\r\n            if(err)\r\n            {\r\n                OnError(err);\r\n            }\r\n            else\r\n            {\r\n                OnSuccess(new Uint8Array(data).buffer);\r\n            }\r\n        });\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nvar Bus = {};\r\n\r\n/** @constructor */\r\nfunction BusConnector()\r\n{\r\n    this.listeners = {};\r\n    this.pair = undefined;\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n * @param {function(?)} fn\r\n * @param {Object} this_value\r\n */\r\nBusConnector.prototype.register = function(name, fn, this_value)\r\n{\r\n    var listeners = this.listeners[name];\r\n\r\n    if(listeners === undefined)\r\n    {\r\n        listeners = this.listeners[name] = [];\r\n    }\r\n\r\n    listeners.push({\r\n        fn: fn,\r\n        this_value: this_value,\r\n    });\r\n};\r\n\r\n/**\r\n * Unregister one message with the given name and callback\r\n *\r\n * @param {string} name\r\n * @param {function()} fn\r\n */\r\nBusConnector.prototype.unregister = function(name, fn)\r\n{\r\n    var listeners = this.listeners[name];\r\n\r\n    if(listeners === undefined)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.listeners[name] = listeners.filter(function(l)\r\n    {\r\n        return l.fn !== fn;\r\n    });\r\n};\r\n\r\n/**\r\n * Send (\"emit\") a message\r\n *\r\n * @param {string} name\r\n * @param {*=} value\r\n * @param {*=} unused_transfer\r\n */\r\nBusConnector.prototype.send = function(name, value, unused_transfer)\r\n{\r\n    if(!this.pair)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var listeners = this.pair.listeners[name];\r\n\r\n    if(listeners === undefined)\r\n    {\r\n        return;\r\n    }\r\n\r\n    for(var i = 0; i < listeners.length; i++)\r\n    {\r\n        var listener = listeners[i];\r\n        listener.fn.call(listener.this_value, value);\r\n    }\r\n};\r\n\r\n/**\r\n * Send a message, guaranteeing that it is received asynchronously\r\n *\r\n * @param {string} name\r\n * @param {Object=} value\r\n */\r\nBusConnector.prototype.send_async = function(name, value)\r\n{\r\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\r\n\r\n    setTimeout(this.send.bind(this, name, value), 0);\r\n};\r\n\r\nBus.create = function()\r\n{\r\n    var c0 = new BusConnector();\r\n    var c1 = new BusConnector();\r\n\r\n    c0.pair = c1;\r\n    c1.pair = c0;\r\n\r\n    return [c0, c1];\r\n};\r\n\r\n","/**\r\n * This file contains functions to decode the modrm and sib bytes\r\n *\r\n * These functions return a virtual address\r\n *\r\n * @fileoverview .\r\n * @suppress {newCheckTypes}\r\n */\r\n\"use strict\";\r\n(function()\r\n{\r\n    CPU.prototype.modrm_table16 = Array(0xC0);\r\n    CPU.prototype.modrm_table32 = Array(0xC0);\r\n    CPU.prototype.sib_table = Array(0x100);\r\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    // special cases\r\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\r\n    }\r\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\r\n    {\r\n        return cpu.sib_resolve(false) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\r\n    {\r\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\r\n    {\r\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\r\n    };\r\n    for(var low = 0; low < 8; low++)\r\n    {\r\n        for(var high = 0; high < 3; high++)\r\n        {\r\n            var x = low | high << 6;\r\n            for(var i = 1; i < 8; i++)\r\n            {\r\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\r\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\r\n            }\r\n        }\r\n    }\r\n\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n})();\r\n","\"use strict\";\r\n\r\n/*\r\n * string operations\r\n *\r\n *       cmp  si  di\r\n * movs   0    1   1/w    A4\r\n * cmps   1    1   1/r    A6\r\n * stos   0    0   1/w    AA\r\n * lods   0    1   0      AC\r\n * scas   1    0   1/r    AE\r\n * ins    0    0   1/w\r\n * outs   0    1   0\r\n */\r\n\r\n/** @const */\r\nvar MAX_COUNT_PER_CYCLE = 0x1000;\r\n\r\n\r\nfunction string_get_cycle_count(size, address)\r\n{\r\n    dbg_assert(size && size <= 4 && size >= -4);\r\n\r\n    if(size < 0)\r\n    {\r\n        return (address & 0xFFF) >> (-size >> 1);\r\n    }\r\n    else\r\n    {\r\n        return (~address & 0xFFF) >> size;\r\n    }\r\n}\r\n\r\nfunction string_get_cycle_count2(size, addr1, addr2)\r\n{\r\n    dbg_assert(arguments.length === 3);\r\n\r\n    return Math.min(\r\n            string_get_cycle_count(size, addr1),\r\n            string_get_cycle_count(size, addr2));\r\n}\r\n\r\n\r\nCPU.prototype.movsb = function()\r\n{\r\n    var cpu = this;\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        var phys_dest = cpu.translate_address_write(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count2(size, src, dest);\r\n        }\r\n        do\r\n        {\r\n            cpu.write8(phys_dest, cpu.read8(phys_src));\r\n            phys_dest += size;\r\n            phys_src += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write8(dest, cpu.safe_read8(src));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nCPU.prototype.movsw = function()\r\n{\r\n    var cpu = this;\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1) && !(src & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write16(dest, cpu.safe_read16(src));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write16(dest, cpu.safe_read16(src));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nCPU.prototype.movsd = function()\r\n{\r\n    var cpu = this;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        // often used by memcpy, well worth optimizing\r\n        //   using cpu.mem32s.set\r\n        var ds = cpu.get_seg_prefix(reg_ds),\r\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\r\n            es = cpu.get_seg(reg_es),\r\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\r\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n\r\n        if(!count)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // must be page-aligned if cpu.paging is enabled\r\n        // and dword-aligned in general\r\n        var align_mask = cpu.paging ? 0xFFF : 3;\r\n\r\n        if((dest & align_mask) === 0 &&\r\n           (src & align_mask) === 0 &&\r\n           // If df is set, alignment works a different\r\n           // This should be unlikely\r\n           (cpu.flags & flag_direction) === 0)\r\n        {\r\n            var cont = false;\r\n            if(cpu.paging)\r\n            {\r\n                src = cpu.translate_address_read(src);\r\n                dest = cpu.translate_address_write(dest);\r\n\r\n                if(count > 0x400)\r\n                {\r\n                    count = 0x400;\r\n                    cont = true;\r\n                }\r\n            }\r\n\r\n            if(!cpu.io.in_mmap_range(src, count) &&\r\n                !cpu.io.in_mmap_range(dest, count))\r\n            {\r\n                var diff = count << 2;\r\n                cpu.add_reg_asize(reg_ecx, -count);\r\n                cpu.add_reg_asize(reg_edi, diff);\r\n                cpu.add_reg_asize(reg_esi, diff);\r\n\r\n                dest >>>= 2;\r\n                src >>>= 2;\r\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\r\n\r\n                if(cont)\r\n                {\r\n                    cpu.instruction_pointer = cpu.previous_ip;\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3) && !(src & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 2;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            this.instruction_pointer = this.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nfunction cmpsb(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var data_src, data_dest;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        var phys_dest = cpu.translate_address_read(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count2(size, src, dest);\r\n        }\r\n        do\r\n        {\r\n            data_dest = cpu.read8(phys_dest);\r\n            data_src = cpu.read8(phys_src);\r\n            phys_dest += size;\r\n            phys_src += size;\r\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_src = cpu.safe_read8(src);\r\n        data_dest = cpu.safe_read8(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n\r\n    cpu.cmp8(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction cmpsw(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var data_src, data_dest;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1) && !(src & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 1;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned16(phys_dest);\r\n                data_src = cpu.read_aligned16(phys_src);\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read16(dest);\r\n                data_src = cpu.safe_read16(src);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read16(dest);\r\n        data_src = cpu.safe_read16(src);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n\r\n    cpu.cmp16(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction cmpsd(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var data_src, data_dest;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3) && !(src & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 2;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned32(phys_dest);\r\n                data_src = cpu.read_aligned32(phys_src);\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read32s(dest);\r\n                data_src = cpu.safe_read32s(src);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read32s(dest);\r\n        data_src = cpu.safe_read32s(src);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n\r\n    cpu.cmp32(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction stosb(cpu)\r\n{\r\n    var data = cpu.reg8[reg_al];\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_dest = cpu.translate_address_write(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, dest);\r\n        }\r\n        do\r\n        {\r\n            cpu.write8(phys_dest, data);\r\n            phys_dest += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write8(dest, data);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction stosw(cpu)\r\n{\r\n    var data = cpu.reg16[reg_ax];\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned16(phys_dest, data);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write16(dest, data);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write16(dest, data);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction stosd(cpu)\r\n{\r\n    var data = cpu.reg32s[reg_eax];\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned32(phys_dest, data);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write32(dest, data);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write32(dest, data);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction lodsb(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, src);\r\n        }\r\n        do\r\n        {\r\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\r\n            phys_src += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction lodsw(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        do\r\n        {\r\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\r\n            src += size;\r\n            cpu.add_reg_asize(reg_esi, size);\r\n            cont = cpu.decr_ecx_asize() !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction lodsd(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        do\r\n        {\r\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\r\n            src += size;\r\n            cpu.add_reg_asize(reg_esi, size);\r\n            cont = cpu.decr_ecx_asize() !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction scasb(cpu)\r\n{\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n    var data_dest;\r\n    var data_src = cpu.reg8[reg_al];\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_dest = cpu.translate_address_read(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, dest);\r\n        }\r\n        do\r\n        {\r\n            data_dest = cpu.read8(phys_dest);\r\n            phys_dest += size;\r\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read8(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n\r\n    cpu.cmp8(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction scasw(cpu)\r\n{\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n    var data_dest;\r\n    var data_src = cpu.reg16[reg_al];\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned16(phys_dest);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read16(dest);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read16(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n\r\n    cpu.cmp16(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction scasd(cpu)\r\n{\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n    var data_dest;\r\n    var data_src = cpu.reg32s[reg_eax];\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned32(phys_dest);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read32s(dest);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read32s(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n\r\n    cpu.cmp32(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction insb(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_dest = cpu.translate_address_write(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, dest);\r\n        }\r\n        do\r\n        {\r\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\r\n            phys_dest += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.writable_or_pagefault(dest, 1);\r\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction insw(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.writable_or_pagefault(dest, 2);\r\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction insd(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.writable_or_pagefault(dest, 4);\r\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction outsb(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, src);\r\n        }\r\n        do\r\n        {\r\n            cpu.io.port_write8(port, cpu.read8(phys_src));\r\n            phys_src += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.io.port_write8(port, cpu.safe_read8(src));\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction outsw(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(src & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, src);\r\n            }\r\n            do\r\n            {\r\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.io.port_write16(port, cpu.safe_read16(src));\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.io.port_write16(port, cpu.safe_read16(src));\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction outsd(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(src & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, src);\r\n            }\r\n            do\r\n            {\r\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n","/*\r\n * Arithmatic functions\r\n * This file contains:\r\n *\r\n * add, adc, sub, sbc, cmp\r\n * inc, dec\r\n * neg, not\r\n * imul, mul, idiv, div\r\n * xadd\r\n *\r\n * das, daa, aad, aam\r\n *\r\n * and, or, xor, test\r\n * shl, shr, sar, ror, rol, rcr, rcl\r\n * shld, shrd\r\n *\r\n * bts, btr, btc, bt\r\n * bsf, bsr\r\n *\r\n * popcnt\r\n*/\r\n\"use strict\";\r\n\r\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\r\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\r\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\r\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\r\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\r\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\r\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\r\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\r\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\r\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\r\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\r\n{\r\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\r\n\r\n    this.last_op1 = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\r\n{\r\n    var cf = this.getcf();\r\n    this.last_op1 = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_add_result = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\r\n{\r\n    var cf = this.getcf();\r\n    this.last_add_result = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\r\n    this.last_op_size = op_size;\r\n\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n/*\r\n * inc and dec\r\n */\r\n\r\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\r\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\r\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\r\n\r\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\r\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\r\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\r\n\r\nCPU.prototype.inc = function(dest_operand, op_size)\r\n{\r\n    this.flags = (this.flags & ~1) | this.getcf();\r\n    this.last_op1 = dest_operand;\r\n    this.last_op2 = 1;\r\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\r\n    this.last_op_size = op_size;\r\n\r\n    this.flags_changed = flags_all & ~1;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.dec = function(dest_operand, op_size)\r\n{\r\n    this.flags = (this.flags & ~1) | this.getcf();\r\n    this.last_add_result = dest_operand;\r\n    this.last_op2 = 1;\r\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\r\n    this.last_op_size = op_size;\r\n\r\n    this.flags_changed = flags_all & ~1;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\n/*\r\n * neg\r\n */\r\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\r\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\r\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\r\n\r\nCPU.prototype.neg = function(dest_operand, op_size)\r\n{\r\n    this.last_op1 = this.last_result = -dest_operand | 0;\r\n\r\n    this.flags_changed = flags_all;\r\n    this.last_add_result = 0;\r\n    this.last_op2 = dest_operand;\r\n    this.last_op_size = op_size;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\n/*\r\n * mul, imul, div, idiv\r\n *\r\n * Note: imul has some extra opcodes\r\n *       while other functions only allow\r\n *       ax * modrm\r\n */\r\n\r\nCPU.prototype.mul8 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg8[reg_al];\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.last_result = result & 0xFF;\r\n    this.last_op_size = OPSIZE_8;\r\n\r\n    if(result < 0x100)\r\n    {\r\n        this.flags = this.flags & ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags = this.flags | 1 | flag_overflow;\r\n    }\r\n\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.imul8 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg8s[reg_al];\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.last_result = result & 0xFF;\r\n    this.last_op_size = OPSIZE_8;\r\n\r\n    if(result > 0x7F || result < -0x80)\r\n    {\r\n        this.flags = this.flags | 1 | flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags = this.flags & ~1 & ~flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.mul16 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg16[reg_ax],\r\n        high_result = result >>> 16;\r\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.reg16[reg_dx] = high_result;\r\n\r\n    this.last_result = result & 0xFFFF;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(high_result === 0)\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\n/*\r\n * imul with 1 argument\r\n * ax = ax * r/m\r\n */\r\nCPU.prototype.imul16 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg16s[reg_ax];\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.reg16[reg_dx] = result >> 16;\r\n\r\n    this.last_result = result & 0xFFFF;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(result > 0x7FFF || result < -0x8000)\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\n/*\r\n * imul with 2 or 3 arguments\r\n * reg = reg * r/m\r\n * reg = imm * r/m\r\n */\r\nCPU.prototype.imul_reg16 = function(operand1, operand2)\r\n{\r\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\r\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\r\n\r\n    var result = operand1 * operand2;\r\n\r\n    this.last_result = result & 0xFFFF;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(result > 0x7FFF || result < -0x8000)\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.mul32 = function(source_operand)\r\n{\r\n    var dest_operand = this.reg32s[reg_eax];\r\n\r\n    var lo = v86util.mul_low(dest_operand, source_operand);\r\n    var hi = v86util.mul_high(dest_operand, source_operand);\r\n\r\n    this.reg32s[reg_eax] = lo;\r\n    this.reg32s[reg_edx] = hi;\r\n\r\n    this.last_result = lo;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(hi === 0)\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\r\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\r\n}\r\n\r\nCPU.prototype.imul32 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\r\n\r\n    var dest_operand = this.reg32s[reg_eax];\r\n\r\n    var lo = v86util.imul_low(dest_operand, source_operand);\r\n    var hi = v86util.imul_high(dest_operand, source_operand);\r\n\r\n    this.reg32s[reg_eax] = lo;\r\n    this.reg32s[reg_edx] = hi;\r\n\r\n    this.last_result = lo;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(hi === (lo >> 31))\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    //console.log(target_operand + \" * \" + source_operand);\r\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\r\n}\r\n\r\n/*\r\n * imul with 2 or 3 arguments\r\n * reg = reg * r/m\r\n * reg = imm * r/m\r\n */\r\nCPU.prototype.imul_reg32 = function(operand1, operand2)\r\n{\r\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\r\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\r\n\r\n    var lo = v86util.imul_low(operand1, operand2);\r\n    var hi = v86util.imul_high(operand1, operand2);\r\n\r\n    this.last_result = lo;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(hi === (lo >> 31))\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return lo;\r\n\r\n    //console.log(operand + \" * \" + source_operand);\r\n    //console.log(\"= \" + this.reg32[reg]);\r\n}\r\n\r\nCPU.prototype.div8 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var target_operand = this.reg16[reg_ax],\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x100)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg8[reg_al] = result;\r\n        this.reg8[reg_ah] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\nCPU.prototype.idiv8 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var target_operand = this.reg16s[reg_ax],\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x80 || result <= -0x81)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg8[reg_al] = result;\r\n        this.reg8[reg_ah] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\nCPU.prototype.div16 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var\r\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x10000 || result < 0)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_ax] = result;\r\n        this.reg16[reg_dx] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\nCPU.prototype.idiv16 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x8000 || result <= -0x8001)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_ax] = result;\r\n        this.reg16[reg_dx] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\n// If the dividend is too large, the division cannot be done precisely using\r\n// JavaScript's double floating point numbers. Run simple long division until\r\n// the dividend is small enough\r\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\r\n{\r\n    if(div_high >= quot || quot === 0)\r\n    {\r\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\r\n        this.trigger_de();\r\n    }\r\n\r\n    var result = 0;\r\n\r\n    if(div_high > 0x100000)\r\n    {\r\n        var m = 0;\r\n        var i = 32;\r\n        var q = quot;\r\n        while(q > div_high)\r\n        {\r\n            q >>>= 1;\r\n            i--;\r\n        }\r\n        while(div_high > 0x100000)\r\n        {\r\n            if(div_high >= q)\r\n            {\r\n                div_high -= q;\r\n                var sub = quot << i >>> 0;\r\n                if(sub > div_low)\r\n                {\r\n                    div_high--;\r\n                }\r\n                div_low = div_low - sub >>> 0;\r\n                result |= 1 << i\r\n            }\r\n            i--;\r\n            q >>= 1;\r\n        }\r\n        result >>>= 0;\r\n    }\r\n\r\n    var div = div_low + div_high * 0x100000000;\r\n    var mod = div % quot;\r\n    result += div / quot | 0;\r\n\r\n    this.div32_result[0] = result;\r\n    this.div32_result[1] = mod;\r\n    return this.div32_result;\r\n}\r\n\r\n\r\nCPU.prototype.div32 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\r\n\r\n    var dest_operand_low = this.reg32[reg_eax],\r\n        dest_operand_high = this.reg32[reg_edx];\r\n\r\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\r\n    var result = result_mod[0];\r\n    var mod = result_mod[1];\r\n\r\n    // XXX\r\n    dbg_assert(source_operand);\r\n    if(result >= 0x100000000)\r\n    {\r\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\r\n        dbg_log(\"-> \" + h(result));\r\n\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg32s[reg_eax] = result;\r\n        this.reg32s[reg_edx] = mod;\r\n    }\r\n\r\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\r\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\r\n}\r\n\r\nCPU.prototype.idiv32 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\r\n\r\n    var dest_operand_low = this.reg32[reg_eax],\r\n        dest_operand_high = this.reg32s[reg_edx],\r\n        div_is_neg = false,\r\n        is_neg = false;\r\n\r\n    if(source_operand < 0)\r\n    {\r\n        is_neg = true;\r\n        source_operand = -source_operand;\r\n    }\r\n\r\n    if(dest_operand_high < 0)\r\n    {\r\n        div_is_neg = true;\r\n        is_neg = !is_neg;\r\n        dest_operand_low = -dest_operand_low >>> 0;\r\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\r\n    }\r\n\r\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\r\n    var result = result_mod[0];\r\n    var mod = result_mod[1];\r\n\r\n    if(is_neg)\r\n    {\r\n        result = -result | 0;\r\n    }\r\n\r\n    if(div_is_neg)\r\n    {\r\n        mod = -mod | 0;\r\n    }\r\n\r\n    dbg_assert(source_operand);\r\n    if(result >= 0x80000000 || result <= -0x80000001)\r\n    {\r\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\r\n        dbg_log(\"-> \" + h(result));\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg32s[reg_eax] = result;\r\n        this.reg32s[reg_edx] = mod;\r\n    }\r\n\r\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\r\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\r\n}\r\n\r\n\r\nCPU.prototype.xadd8 = function(source_operand, reg)\r\n{\r\n    var tmp = this.reg8[reg];\r\n\r\n    this.reg8[reg] = source_operand;\r\n\r\n    return this.add(source_operand, tmp, OPSIZE_8);\r\n}\r\n\r\n\r\nCPU.prototype.xadd16 = function(source_operand, reg)\r\n{\r\n    var tmp = this.reg16[reg];\r\n\r\n    this.reg16[reg] = source_operand;\r\n\r\n    return this.add(source_operand, tmp, OPSIZE_16);\r\n}\r\n\r\n\r\nCPU.prototype.xadd32 = function(source_operand, reg)\r\n{\r\n    var tmp = this.reg32s[reg];\r\n\r\n    this.reg32s[reg] = source_operand;\r\n\r\n    return this.add(source_operand, tmp, OPSIZE_32);\r\n}\r\n\r\n\r\nCPU.prototype.bcd_daa = function()\r\n{\r\n    //dbg_log(\"daa\");\r\n    // decimal adjust after addition\r\n    var old_al = this.reg8[reg_al],\r\n        old_cf = this.getcf(),\r\n        old_af = this.getaf();\r\n\r\n    this.flags &= ~1 & ~flag_adjust\r\n\r\n    if((old_al & 0xF) > 9 || old_af)\r\n    {\r\n        this.reg8[reg_al] += 6;\r\n        this.flags |= flag_adjust;\r\n    }\r\n    if(old_al > 0x99 || old_cf)\r\n    {\r\n        this.reg8[reg_al] += 0x60;\r\n        this.flags |= 1;\r\n    }\r\n\r\n    this.last_result = this.reg8[reg_al];\r\n    this.last_op_size = OPSIZE_8;\r\n    this.last_op1 = this.last_op2 = 0;\r\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.bcd_das = function()\r\n{\r\n    //dbg_log(\"das\");\r\n    // decimal adjust after subtraction\r\n    var old_al = this.reg8[reg_al],\r\n        old_cf = this.getcf();\r\n\r\n    this.flags &= ~1;\r\n\r\n    if((old_al & 0xF) > 9 || this.getaf())\r\n    {\r\n        this.reg8[reg_al] -= 6;\r\n        this.flags |= flag_adjust;\r\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_adjust;\r\n    }\r\n\r\n    if(old_al > 0x99 || old_cf)\r\n    {\r\n        this.reg8[reg_al] -= 0x60;\r\n        this.flags |= 1;\r\n    }\r\n\r\n    this.last_result = this.reg8[reg_al];\r\n    this.last_op_size = OPSIZE_8;\r\n    this.last_op1 = this.last_op2 = 0;\r\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.bcd_aam = function(imm8)\r\n{\r\n    //dbg_log(\"aam\");\r\n    // ascii adjust after multiplication\r\n\r\n    if(imm8 === 0)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        var temp = this.reg8[reg_al];\r\n        this.reg8[reg_ah] = temp / imm8;\r\n        this.reg8[reg_al] = temp % imm8;\r\n\r\n        this.last_result = this.reg8[reg_al];\r\n\r\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\r\n    }\r\n}\r\n\r\nCPU.prototype.bcd_aad = function(imm8)\r\n{\r\n    //dbg_log(\"aad\");\r\n    // ascii adjust before division\r\n\r\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\r\n    this.last_result = result & 0xFF;\r\n    this.reg16[reg_ax] = this.last_result;\r\n    this.last_op_size = OPSIZE_8;\r\n\r\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\r\n\r\n    if(result > 0xFFFF)\r\n    {\r\n        this.flags |= 1;\r\n    }\r\n}\r\n\r\nCPU.prototype.bcd_aaa = function()\r\n{\r\n    //dbg_log(\"aaa\");\r\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\r\n    {\r\n        this.reg16[reg_ax] += 6;\r\n        this.reg8[reg_ah] += 1;\r\n        this.flags |= flag_adjust | 1;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_adjust & ~1;\r\n    }\r\n    this.reg8[reg_al] &= 0xF;\r\n\r\n    this.flags_changed &= ~flag_adjust & ~1;\r\n};\r\n\r\n\r\nCPU.prototype.bcd_aas = function()\r\n{\r\n    //dbg_log(\"aas\");\r\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\r\n    {\r\n        this.reg16[reg_ax] -= 6;\r\n        this.reg8[reg_ah] -= 1;\r\n        this.flags |= flag_adjust | 1;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_adjust & ~1;\r\n    }\r\n    this.reg8[reg_al] &= 0xF;\r\n\r\n    this.flags_changed &= ~flag_adjust & ~1;\r\n}\r\n\r\n\r\n/*                     \\O\r\n * bitwise functions    |\\\r\n *                     / \\\r\n *\r\n * and, or, xor, test\r\n * shl, shr, sar, rol, ror, rcl, ror\r\n * shrd, shld\r\n *\r\n * bt, bts, btr, btc\r\n * bsf, bsr\r\n */\r\n\r\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\r\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\r\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\r\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\r\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\r\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\r\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\r\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\r\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_result = dest_operand & source_operand;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_result = dest_operand | source_operand;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_result = dest_operand ^ source_operand;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\n/*\r\n * rotates and shifts\r\n */\r\n\r\nCPU.prototype.rol8 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n    count &= 7;\r\n\r\n    var result = dest_operand << count | dest_operand >> (8 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result & 1)\r\n                | (result << 11 ^ result << 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rol16 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n    count &= 15;\r\n\r\n    var result = dest_operand << count | dest_operand >> (16 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result & 1)\r\n                | (result << 11 ^ result >> 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rol32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | dest_operand >>> (32 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result & 1)\r\n                | (result << 11 ^ result >> 20) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcl8 = function(dest_operand, count)\r\n{\r\n    count %= 9;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 8 & 1)\r\n                | (result << 3 ^ result << 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcl16 = function(dest_operand, count)\r\n{\r\n    count %= 17;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 16 & 1)\r\n                | (result >> 5 ^ result >> 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcl32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | this.getcf() << (count - 1);\r\n\r\n    if(count > 1)\r\n    {\r\n        result |= dest_operand >>> (33 - count);\r\n    }\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\r\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.ror8 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    count &= 7;\r\n    var result = dest_operand >> count | dest_operand << (8 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 7 & 1)\r\n                | (result << 4 ^ result << 5) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.ror16 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    count &= 15;\r\n    var result = dest_operand >> count | dest_operand << (16 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 15 & 1)\r\n                | (result >> 4 ^ result >> 3) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.ror32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >>> count | dest_operand << (32 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 31 & 1)\r\n                | (result >> 20 ^ result >> 19) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcr8 = function(dest_operand, count)\r\n{\r\n    count %= 9;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 8 & 1)\r\n                | (result << 4 ^ result << 5) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcr16 = function(dest_operand, count)\r\n{\r\n    count %= 17;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 16 & 1)\r\n                | (result >> 4 ^ result >> 3) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcr32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\r\n\r\n    if(count > 1)\r\n    {\r\n        result |= dest_operand << (33 - count);\r\n    }\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >> (count - 1) & 1)\r\n                | (result >> 20 ^ result >> 19) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.shl8 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count;\r\n\r\n    this.last_op_size = OPSIZE_8;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (this.last_result >> 8 & 1)\r\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shl16 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count;\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (this.last_result >> 16 & 1)\r\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shl32 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count;\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    // test this\r\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\r\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shr8 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >> count;\r\n\r\n    this.last_op_size = OPSIZE_8;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >> (count - 1) & 1)\r\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shr16 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >> count;\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >> (count - 1) & 1)\r\n                | (dest_operand >> 4)  & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shr32 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >>> count;\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >>> (count - 1) & 1)\r\n                | (dest_operand >> 20) & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sar8 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count < 8)\r\n    {\r\n        this.last_result = dest_operand << 24 >> count + 24;\r\n        // of is zero\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand << 24 >> 31;\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_8;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sar16 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count < 16)\r\n    {\r\n        this.last_result = dest_operand << 16 >> count + 16;\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand << 16 >> 31;\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sar32 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >> count;\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count <= 16)\r\n    {\r\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\r\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\r\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\r\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count <= 16)\r\n    {\r\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\r\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\r\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\r\n\r\n    if(count === 1)\r\n    {\r\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_overflow;\r\n    }\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n}\r\n\r\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    return bit_base ^ 1 << bit_offset;\r\n}\r\n\r\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    return bit_base | 1 << bit_offset;\r\n}\r\n\r\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    return bit_base & ~(1 << bit_offset);\r\n}\r\n\r\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\r\n{\r\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n}\r\n\r\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\r\n{\r\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\r\n    var bit_base = this.read8(phys_addr);\r\n\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\r\n}\r\n\r\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\r\n{\r\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\r\n    var bit_base = this.read8(phys_addr);\r\n\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\r\n}\r\n\r\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\r\n{\r\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\r\n    var bit_base = this.read8(phys_addr);\r\n\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\r\n}\r\n\r\nCPU.prototype.bsf16 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n\r\n        // not defined in the docs, but value doesn't change on my intel machine\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n\r\n        // http://jsperf.com/lowest-bit-index\r\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\r\n    }\r\n}\r\n\r\nCPU.prototype.bsf32 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n\r\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\r\n    }\r\n}\r\n\r\nCPU.prototype.bsr16 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n\r\n        return this.last_result = v86util.int_log2(bit_base);\r\n    }\r\n}\r\n\r\nCPU.prototype.bsr32 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\r\n    }\r\n}\r\n\r\nCPU.prototype.popcnt = function(v)\r\n{\r\n    this.flags_changed = 0;\r\n    this.flags &= ~flags_all;\r\n\r\n    if(v)\r\n    {\r\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\r\n        v = v - ((v >> 1) & 0x55555555);\r\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\r\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= flag_zero;\r\n        return 0;\r\n    }\r\n};\r\n\r\nCPU.prototype.saturate_sw_to_ub = function(v)\r\n{\r\n    dbg_assert((v & 0xFFFF0000) === 0);\r\n\r\n    let ret = v >>> 0;\r\n    if (ret >= 0x8000) {\r\n        ret = 0;\r\n    }\r\n    else if (ret > 0xFF) {\r\n        ret = 0xFF;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sw_to_sb = function(v)\r\n{\r\n    dbg_assert((v & 0xFFFF0000) === 0);\r\n\r\n    let ret = v;\r\n\r\n    if (ret > 0xFF80) {\r\n        ret = ret & 0xFF;\r\n    }\r\n    else if (ret > 0x7FFF) {\r\n        ret = 0x80;\r\n    }\r\n    else if (ret > 0x7F) {\r\n        ret = 0x7F;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sd_to_sw = function(v)\r\n{\r\n    let ret = v >>> 0;\r\n\r\n    if (ret > 0xFFFF8000) {\r\n        ret = ret & 0xFFFF;\r\n    }\r\n    else if (ret > 0x7FFFFFFF) {\r\n        ret = 0x8000;\r\n    }\r\n    else if (ret > 0x7FFF) {\r\n        ret = 0x7FFF;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFF0000) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sd_to_sb = function(v)\r\n{\r\n    let ret = v >>> 0;\r\n\r\n    if (ret > 0xFFFFFF80) {\r\n        ret = ret & 0xFF;\r\n    }\r\n    else if (ret > 0x7FFFFFFF) {\r\n        ret = 0x80;\r\n    }\r\n    else if (ret > 0x7F) {\r\n        ret = 0x7F;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sd_to_ub = function(v)\r\n{\r\n    let ret = v | 0;\r\n\r\n    if (ret < 0) {\r\n        ret = 0;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\n\r\nCPU.prototype.saturate_ud_to_ub = function(v)\r\n{\r\n    let ret = v >>> 0;\r\n\r\n    if (ret > 0xFF) {\r\n        ret = 0xFF;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_uw = function(v)\r\n{\r\n    dbg_assert(v >= 0);\r\n    return v > 0xFFFF ? 0xFFFF : v;\r\n};\r\n\r\nCPU.prototype.integer_round = function(f, rc)\r\n{\r\n    if(rc === 0)\r\n    {\r\n        // Round to nearest, or even if equidistant\r\n        var rounded = Math.round(f);\r\n\r\n        if(rounded - f === 0.5 && (rounded % 2))\r\n        {\r\n            // Special case: Math.round rounds to positive infinity\r\n            // if equidistant\r\n            rounded--;\r\n        }\r\n\r\n        return rounded;\r\n    }\r\n    // rc=3 is truncate -> floor for positive numbers\r\n    else if(rc === 1 || (rc === 3 && f > 0))\r\n    {\r\n        return Math.floor(f);\r\n    }\r\n    else\r\n    {\r\n        return Math.ceil(f);\r\n    }\r\n}\r\n","/*\r\n * Some miscellaneous instructions:\r\n *\r\n * jmpcc16, jmpcc32, jmp16\r\n * loop, loope, loopne, jcxz\r\n * test_cc\r\n *\r\n * mov, push, pop\r\n * pusha, popa\r\n * xchg, lss\r\n * lea\r\n * enter\r\n * bswap\r\n * fxsave, fxrstor\r\n */\r\n\"use strict\";\r\n\r\nCPU.prototype.jmpcc8 = function(condition)\r\n{\r\n    var imm8 = this.read_op8s();\r\n    if(condition)\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n};\r\n\r\nCPU.prototype.jmp_rel16 = function(rel16)\r\n{\r\n    var current_cs = this.get_seg(reg_cs);\r\n\r\n    // limit ip to 16 bit\r\n    // ugly\r\n    this.instruction_pointer -= current_cs;\r\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\r\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\r\n};\r\n\r\nCPU.prototype.jmpcc16 = function(condition)\r\n{\r\n    var imm16 = this.read_op16();\r\n    if(condition)\r\n    {\r\n        this.jmp_rel16(imm16);\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\n\r\nCPU.prototype.jmpcc32 = function(condition)\r\n{\r\n    var imm32s = this.read_op32s();\r\n    if(condition)\r\n    {\r\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\r\n        //   since read_op32s modifies instruction_pointer\r\n\r\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n};\r\n\r\nCPU.prototype.cmovcc16 = function(condition)\r\n{\r\n    var data = this.read_e16();\r\n    if(condition)\r\n    {\r\n        this.write_g16(data);\r\n    }\r\n};\r\n\r\nCPU.prototype.cmovcc32 = function(condition)\r\n{\r\n    var data = this.read_e32s();\r\n    if(condition)\r\n    {\r\n        this.write_g32(data);\r\n    }\r\n};\r\n\r\nCPU.prototype.setcc = function(condition)\r\n{\r\n    this.set_e8(condition ? 1 : 0)\r\n};\r\n\r\nCPU.prototype.loopne = function(imm8s)\r\n{\r\n    if(this.decr_ecx_asize() && !this.getzf())\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\nCPU.prototype.loope = function(imm8s)\r\n{\r\n    if(this.decr_ecx_asize() && this.getzf())\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\nCPU.prototype.loop = function(imm8s)\r\n{\r\n    if(this.decr_ecx_asize())\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\nCPU.prototype.jcxz = function(imm8s)\r\n{\r\n    if(this.get_reg_asize(reg_ecx) === 0)\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n * @const\r\n */\r\nCPU.prototype.getcf = function()\r\n{\r\n    if(this.flags_changed & 1)\r\n    {\r\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & 1;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getpf = function()\r\n{\r\n    if(this.flags_changed & flag_parity)\r\n    {\r\n        // inverted lookup table\r\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_parity;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getaf = function()\r\n{\r\n    if(this.flags_changed & flag_adjust)\r\n    {\r\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_adjust;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getzf = function()\r\n{\r\n    if(this.flags_changed & flag_zero)\r\n    {\r\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_zero;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getsf = function()\r\n{\r\n    if(this.flags_changed & flag_sign)\r\n    {\r\n        return this.last_result >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_sign;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getof = function()\r\n{\r\n    if(this.flags_changed & flag_overflow)\r\n    {\r\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_overflow;\r\n    }\r\n};\r\n\r\nCPU.prototype.test_o = CPU.prototype.getof;\r\nCPU.prototype.test_b = CPU.prototype.getcf;\r\nCPU.prototype.test_z = CPU.prototype.getzf;\r\nCPU.prototype.test_s = CPU.prototype.getsf;\r\nCPU.prototype.test_p = CPU.prototype.getpf;\r\n\r\nCPU.prototype.test_be = function()\r\n{\r\n    // Idea:\r\n    //    return this.last_op1 <= this.last_op2;\r\n    return this.getcf() || this.getzf();\r\n}\r\n\r\nCPU.prototype.test_l = function()\r\n{\r\n    // Idea:\r\n    //    return this.last_add_result < this.last_op2;\r\n    return !this.getsf() !== !this.getof();\r\n}\r\n\r\nCPU.prototype.test_le = function()\r\n{\r\n    // Idea:\r\n    //    return this.last_add_result <= this.last_op2;\r\n    return this.getzf() || !this.getsf() !== !this.getof();\r\n}\r\n\r\n\r\n\r\nCPU.prototype.push16 = function(imm16)\r\n{\r\n    var sp = this.get_stack_pointer(-2);\r\n\r\n    this.safe_write16(sp, imm16);\r\n    this.adjust_stack_reg(-2);\r\n}\r\n\r\nCPU.prototype.push32 = function(imm32)\r\n{\r\n    var sp = this.get_stack_pointer(-4);\r\n\r\n    this.safe_write32(sp, imm32);\r\n    this.adjust_stack_reg(-4);\r\n}\r\n\r\nCPU.prototype.pop16 = function()\r\n{\r\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\r\n        result = this.safe_read16(sp);\r\n\r\n    this.adjust_stack_reg(2);\r\n    return result;\r\n}\r\n\r\nCPU.prototype.pop32s = function()\r\n{\r\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\r\n        result = this.safe_read32s(sp);\r\n\r\n    this.adjust_stack_reg(4);\r\n    return result;\r\n}\r\n\r\nCPU.prototype.pusha16 = function()\r\n{\r\n    var temp = this.reg16[reg_sp];\r\n\r\n    // make sure we don't get a pagefault after having\r\n    // pushed several registers already\r\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\r\n\r\n    this.push16(this.reg16[reg_ax]);\r\n    this.push16(this.reg16[reg_cx]);\r\n    this.push16(this.reg16[reg_dx]);\r\n    this.push16(this.reg16[reg_bx]);\r\n    this.push16(temp);\r\n    this.push16(this.reg16[reg_bp]);\r\n    this.push16(this.reg16[reg_si]);\r\n    this.push16(this.reg16[reg_di]);\r\n}\r\n\r\nCPU.prototype.pusha32 = function()\r\n{\r\n    var temp = this.reg32s[reg_esp];\r\n\r\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\r\n\r\n    this.push32(this.reg32s[reg_eax]);\r\n    this.push32(this.reg32s[reg_ecx]);\r\n    this.push32(this.reg32s[reg_edx]);\r\n    this.push32(this.reg32s[reg_ebx]);\r\n    this.push32(temp);\r\n    this.push32(this.reg32s[reg_ebp]);\r\n    this.push32(this.reg32s[reg_esi]);\r\n    this.push32(this.reg32s[reg_edi]);\r\n}\r\n\r\nCPU.prototype.popa16 = function()\r\n{\r\n    this.translate_address_read(this.get_stack_pointer(0));\r\n    this.translate_address_read(this.get_stack_pointer(15));\r\n\r\n    this.reg16[reg_di] = this.pop16();\r\n    this.reg16[reg_si] = this.pop16();\r\n    this.reg16[reg_bp] = this.pop16();\r\n    this.adjust_stack_reg(2);\r\n    this.reg16[reg_bx] = this.pop16();\r\n    this.reg16[reg_dx] = this.pop16();\r\n    this.reg16[reg_cx] = this.pop16();\r\n    this.reg16[reg_ax] = this.pop16();\r\n}\r\n\r\nCPU.prototype.popa32 = function()\r\n{\r\n    this.translate_address_read(this.get_stack_pointer(0));\r\n    this.translate_address_read(this.get_stack_pointer(31));\r\n\r\n    this.reg32s[reg_edi] = this.pop32s();\r\n    this.reg32s[reg_esi] = this.pop32s();\r\n    this.reg32s[reg_ebp] = this.pop32s();\r\n    this.adjust_stack_reg(4);\r\n    this.reg32s[reg_ebx] = this.pop32s();\r\n    this.reg32s[reg_edx] = this.pop32s();\r\n    this.reg32s[reg_ecx] = this.pop32s();\r\n    this.reg32s[reg_eax] = this.pop32s();\r\n}\r\n\r\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\r\n{\r\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\r\n        tmp = this.reg8[mod];\r\n\r\n    this.reg8[mod] = memory_data;\r\n\r\n    return tmp;\r\n}\r\n\r\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\r\n{\r\n    var mod = modrm_byte >> 2 & 14,\r\n        tmp = this.reg16[mod];\r\n\r\n    this.reg16[mod] = memory_data;\r\n\r\n    return tmp;\r\n}\r\n\r\nCPU.prototype.xchg16r = function(operand)\r\n{\r\n    var temp = this.reg16[reg_ax];\r\n    this.reg16[reg_ax] = this.reg16[operand];\r\n    this.reg16[operand] = temp;\r\n}\r\n\r\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\r\n{\r\n    var mod = modrm_byte >> 3 & 7,\r\n        tmp = this.reg32s[mod];\r\n\r\n    this.reg32s[mod] = memory_data;\r\n\r\n    return tmp;\r\n}\r\n\r\nCPU.prototype.xchg32r = function(operand)\r\n{\r\n    var temp = this.reg32s[reg_eax];\r\n    this.reg32s[reg_eax] = this.reg32s[operand];\r\n    this.reg32s[operand] = temp;\r\n}\r\n\r\nCPU.prototype.lss16 = function(seg)\r\n{\r\n    if(this.modrm_byte >= 0xC0)\r\n    {\r\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\r\n        this.trigger_ud();\r\n    }\r\n\r\n    var addr = this.modrm_resolve(this.modrm_byte);\r\n\r\n    var new_reg = this.safe_read16(addr),\r\n        new_seg = this.safe_read16(addr + 2 | 0);\r\n\r\n    this.switch_seg(seg, new_seg);\r\n\r\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\r\n}\r\n\r\nCPU.prototype.lss32 = function(seg)\r\n{\r\n    if(this.modrm_byte >= 0xC0)\r\n    {\r\n        this.trigger_ud();\r\n    }\r\n\r\n    var addr = this.modrm_resolve(this.modrm_byte);\r\n\r\n    var new_reg = this.safe_read32s(addr),\r\n        new_seg = this.safe_read16(addr + 4 | 0);\r\n\r\n    this.switch_seg(seg, new_seg);\r\n\r\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\r\n}\r\n\r\nCPU.prototype.enter16 = function(size, nesting_level)\r\n{\r\n    nesting_level &= 31;\r\n\r\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\r\n    this.push16(this.reg16[reg_bp]);\r\n    var frame_temp = this.reg16[reg_sp];\r\n\r\n    if(nesting_level > 0)\r\n    {\r\n        var tmp_ebp = this.reg16[reg_ebp];\r\n        for(var i = 1; i < nesting_level; i++)\r\n        {\r\n            tmp_ebp -= 2;\r\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\r\n        }\r\n        this.push16(frame_temp);\r\n    }\r\n    this.reg16[reg_bp] = frame_temp;\r\n    this.adjust_stack_reg(-size);\r\n};\r\n\r\nCPU.prototype.enter32 = function(size, nesting_level)\r\n{\r\n    nesting_level &= 31;\r\n\r\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\r\n    this.push32(this.reg32s[reg_ebp]);\r\n    var frame_temp = this.reg32s[reg_esp];\r\n\r\n    if(nesting_level > 0)\r\n    {\r\n        var tmp_ebp = this.reg32s[reg_ebp];\r\n        for(var i = 1; i < nesting_level; i++)\r\n        {\r\n            tmp_ebp -= 4;\r\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\r\n        }\r\n        this.push32(frame_temp);\r\n    }\r\n    this.reg32s[reg_ebp] = frame_temp;\r\n    this.adjust_stack_reg(-size);\r\n};\r\n\r\nCPU.prototype.bswap = function(reg)\r\n{\r\n    var temp = this.reg32s[reg];\r\n\r\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\r\n}\r\n\r\nCPU.prototype.fxsave = function(addr)\r\n{\r\n    this.writable_or_pagefault(addr, 512);\r\n\r\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\r\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\r\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\r\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\r\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\r\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\r\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\r\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\r\n\r\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\r\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\r\n    }\r\n\r\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\r\n    // instruction may not save these registers. This behavior is\r\n    // implementation dependent.\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\r\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\r\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\r\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\r\n    }\r\n};\r\n\r\nCPU.prototype.fxrstor = function(addr)\r\n{\r\n    this.translate_address_read(addr | 0);\r\n    this.translate_address_read(addr + 511 | 0);\r\n\r\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\r\n\r\n    if(new_mxcsr & ~MXCSR_MASK)\r\n    {\r\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\r\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\r\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\r\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\r\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\r\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\r\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\r\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\r\n\r\n    this.mxcsr = new_mxcsr;\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\r\n    }\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\r\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\r\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\r\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\nvar t = [];\r\nvar t16 = [];\r\nvar t32 = [];\r\n\r\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\r\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\r\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\r\n\r\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\r\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\r\nt16[0x07] = cpu => {\r\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0x07] = cpu => {\r\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\r\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\n\r\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\r\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\r\nt16[0x0F] = cpu => {\r\n    cpu.table0F_16[cpu.read_op0F()](cpu);\r\n};\r\nt32[0x0F] = cpu => {\r\n    cpu.table0F_32[cpu.read_op0F()](cpu);\r\n};\r\n\r\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\r\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\r\nt16[0x17] = cpu => {\r\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n    cpu.clear_prefixes();\r\n    cpu.cycle_internal();\r\n};\r\nt32[0x17] = cpu => {\r\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n    cpu.clear_prefixes();\r\n    cpu.cycle_internal();\r\n};\r\n\r\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\n\r\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\r\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\r\nt16[0x1F] = cpu => {\r\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0x1F] = cpu => {\r\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\n\r\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\r\nt[0x27] = cpu => { cpu.bcd_daa(); };\r\n\r\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\r\nt[0x2F] = cpu => { cpu.bcd_das(); };\r\n\r\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\r\nt[0x37] = cpu => { cpu.bcd_aaa(); };\r\n\r\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\r\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\r\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\r\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\r\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\r\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\r\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\r\nt[0x3F] = cpu => { cpu.bcd_aas(); };\r\n\r\n\r\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\r\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\r\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\r\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\r\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\r\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\r\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\r\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\r\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\r\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\r\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\r\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\r\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\r\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\r\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\r\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\r\n\r\n\r\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\r\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\r\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\r\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\r\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\r\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\r\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\r\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\r\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\r\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\r\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\r\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\r\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\r\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\r\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\r\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\r\n\r\n\r\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\r\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\r\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\r\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\r\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\r\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\r\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\r\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\r\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\r\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\r\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\r\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\r\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\r\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\r\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\r\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\r\n\r\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\r\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\r\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\r\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\r\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\r\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\r\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\r\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\r\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\r\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\r\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\r\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\r\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\r\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\r\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\r\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\r\n\r\n\r\nt16[0x60] = cpu => { cpu.pusha16(); };\r\nt32[0x60] = cpu => { cpu.pusha32(); };\r\nt16[0x61] = cpu => { cpu.popa16(); };\r\nt32[0x61] = cpu => { cpu.popa32(); };\r\n\r\nt[0x62] = cpu => {\r\n    // bound\r\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\r\n    dbg_assert(false);\r\n};\r\nt[0x63] = cpu => { cpu.read_modrm_byte();\r\n    // arpl\r\n    //dbg_log(\"arpl\", LOG_CPU);\r\n    if(cpu.protected_mode && !cpu.vm86_mode())\r\n    {\r\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"arpl #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n};\r\n\r\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\r\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\r\n\r\nt[0x66] = cpu => {\r\n    // Operand-size override prefix\r\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt[0x67] = cpu => {\r\n    // Address-size override prefix\r\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\r\n\r\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\r\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\r\n\r\nt16[0x69] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\r\n};\r\nt32[0x69] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\r\n};\r\n\r\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\r\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\r\n\r\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\r\n};\r\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\r\n};\r\n\r\nt[0x6C] = cpu => { insb(cpu); };\r\nt16[0x6D] = cpu => { insw(cpu); };\r\nt32[0x6D] = cpu => { insd(cpu); };\r\nt[0x6E] = cpu => { outsb(cpu); };\r\nt16[0x6F] = cpu => { outsw(cpu); };\r\nt32[0x6F] = cpu => { outsd(cpu); };\r\n\r\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\r\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\r\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\r\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\r\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\r\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\r\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\r\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\r\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\r\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\r\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\r\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\r\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\r\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\r\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\r\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\r\n\r\nt[0x80] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\r\n    }\r\n};\r\nt16[0x81] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\r\n    }\r\n};\r\nt32[0x81] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\r\n    }\r\n};\r\nt[0x82] = t[0x80]; // alias\r\nt16[0x83] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\r\n    }\r\n};\r\nt32[0x83] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\r\n    }\r\n};\r\n\r\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\r\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\r\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\r\n\r\n\r\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\r\nt16[0x87] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\r\n};\r\nt32[0x87] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\r\n};\r\n\r\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\r\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\r\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\r\n\r\nt[0x8A] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e8();\r\n    cpu.write_g8(data);\r\n};\r\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\r\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\r\n};\r\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\r\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\r\n};\r\n\r\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\r\n    // lea\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        dbg_log(\"lea #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n\r\n    // override prefix, so modrm_resolve does not return the segment part\r\n    cpu.prefixes |= SEG_PREFIX_ZERO;\r\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.prefixes = 0;\r\n};\r\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        dbg_log(\"lea #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n\r\n    cpu.prefixes |= SEG_PREFIX_ZERO;\r\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt[0x8E] = cpu => { cpu.read_modrm_byte();\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n    var data = cpu.read_e16();\r\n    cpu.switch_seg(mod, data);\r\n\r\n    if(mod === reg_ss)\r\n    {\r\n        // run next instruction, so no interrupts are handled\r\n        cpu.clear_prefixes();\r\n        cpu.cycle_internal();\r\n    }\r\n};\r\n\r\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\r\n    // pop\r\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\r\n\r\n    cpu.adjust_stack_reg(2);\r\n\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.adjust_stack_reg(-2);\r\n        cpu.safe_write16(addr, sp);\r\n        cpu.adjust_stack_reg(2);\r\n    } else {\r\n        cpu.write_reg_e16(sp);\r\n    }\r\n};\r\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\r\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\r\n\r\n    // change esp first, then resolve modrm address\r\n    cpu.adjust_stack_reg(4);\r\n\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n\r\n        // Before attempting a write that might cause a page fault,\r\n        // we must set esp to the old value. Fuck Intel.\r\n        cpu.adjust_stack_reg(-4);\r\n        cpu.safe_write32(addr, sp);\r\n        cpu.adjust_stack_reg(4);\r\n    } else {\r\n        cpu.write_reg_e32(sp);\r\n    }\r\n};\r\n\r\nt[0x90] = cpu => { };\r\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\r\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\r\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\r\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\r\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\r\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\r\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\r\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\r\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\r\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\r\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\r\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\r\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\r\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\r\n\r\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\r\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\r\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\r\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\r\n\r\nt16[0x9A] = cpu => {\r\n    // callf\r\n    var new_ip = cpu.read_op16();\r\n    var new_cs = cpu.read_disp16();\r\n\r\n    cpu.far_jump(new_ip, new_cs, true);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt32[0x9A] = cpu => {\r\n    var new_ip = cpu.read_op32s();\r\n    var new_cs = cpu.read_disp16();\r\n\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        if(new_ip & 0xFFFF0000)\r\n        {\r\n            throw cpu.debug.unimpl(\"#GP handler\");\r\n        }\r\n    }\r\n\r\n    cpu.far_jump(new_ip, new_cs, true);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0x9B] = cpu => {\r\n    // fwait: check for pending fpu exceptions\r\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\r\n    {\r\n        // task switched and MP bit is set\r\n        cpu.trigger_nm();\r\n    }\r\n    else\r\n    {\r\n        if(cpu.fpu)\r\n        {\r\n            cpu.fpu.fwait();\r\n        }\r\n        else\r\n        {\r\n            // EM bit isn't checked\r\n            // If there's no FPU, do nothing\r\n        }\r\n    }\r\n};\r\nt16[0x9C] = cpu => {\r\n    // pushf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        dbg_assert(cpu.protected_mode);\r\n        dbg_log(\"pushf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    else\r\n    {\r\n        cpu.push16(cpu.get_eflags());\r\n    }\r\n};\r\nt32[0x9C] = cpu => {\r\n    // pushf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        // trap to virtual 8086 monitor\r\n        dbg_assert(cpu.protected_mode);\r\n        dbg_log(\"pushf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    else\r\n    {\r\n        // vm and rf flag are cleared in image stored on the stack\r\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\r\n    }\r\n};\r\nt16[0x9D] = cpu => {\r\n    // popf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        dbg_log(\"popf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\r\n\r\n    if(cpu.flags & flag_trap)\r\n    {\r\n        // XXX: Problems with fdgame\r\n        //cpu.clear_prefixes();\r\n        //cpu.cycle_internal();\r\n        cpu.flags &= ~flag_trap;\r\n        //cpu.instruction_pointer = cpu.previous_ip;\r\n        //cpu.raise_exception(1);\r\n    }\r\n    else\r\n    {\r\n        cpu.handle_irqs();\r\n    }\r\n};\r\nt32[0x9D] = cpu => {\r\n    // popf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        dbg_log(\"popf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    cpu.update_eflags(cpu.pop32s());\r\n    cpu.handle_irqs();\r\n};\r\nt[0x9E] = cpu => {\r\n    // sahf\r\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\r\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\r\n    cpu.flags_changed = 0;\r\n};\r\nt[0x9F] = cpu => {\r\n    // lahf\r\n    cpu.reg8[reg_ah] = cpu.get_eflags();\r\n};\r\n\r\nt[0xA0] = cpu => {\r\n    // mov\r\n    var data = cpu.safe_read8(cpu.read_moffs());\r\n    cpu.reg8[reg_al] = data;\r\n};\r\nt16[0xA1] = cpu => {\r\n    // mov\r\n    var data = cpu.safe_read16(cpu.read_moffs());\r\n    cpu.reg16[reg_ax] = data;\r\n};\r\nt32[0xA1] = cpu => {\r\n    var data = cpu.safe_read32s(cpu.read_moffs());\r\n    cpu.reg32s[reg_eax] = data;\r\n};\r\nt[0xA2] = cpu => {\r\n    // mov\r\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\r\n};\r\nt16[0xA3] = cpu => {\r\n    // mov\r\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\r\n};\r\nt32[0xA3] = cpu => {\r\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\r\n};\r\n\r\nt[0xA4] = cpu => { cpu.movsb(); };\r\nt16[0xA5] = cpu => { cpu.movsw(); };\r\nt32[0xA5] = cpu => { cpu.movsd(); };\r\nt[0xA6] = cpu => { cmpsb(cpu); };\r\nt16[0xA7] = cpu => { cmpsw(cpu); };\r\nt32[0xA7] = cpu => { cmpsd(cpu); };\r\n\r\nt[0xA8] = cpu => {\r\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\r\n};\r\nt16[0xA9] = cpu => {\r\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\r\n};\r\nt32[0xA9] = cpu => {\r\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\r\n};\r\n\r\nt[0xAA] = cpu => { stosb(cpu); };\r\nt16[0xAB] = cpu => { stosw(cpu); };\r\nt32[0xAB] = cpu => { stosd(cpu); };\r\nt[0xAC] = cpu => { lodsb(cpu); };\r\nt16[0xAD] = cpu => { lodsw(cpu); };\r\nt32[0xAD] = cpu => { lodsd(cpu); };\r\nt[0xAE] = cpu => { scasb(cpu); };\r\nt16[0xAF] = cpu => { scasw(cpu); };\r\nt32[0xAF] = cpu => { scasd(cpu); };\r\n\r\n\r\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\r\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\r\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\r\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\r\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\r\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\r\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\r\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\r\n\r\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\r\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\r\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\r\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\r\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\r\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\r\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\r\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\r\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\r\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\r\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\r\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\r\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\r\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\r\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\r\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\r\n\r\n\r\nt[0xC0] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e8();\r\n    var op2 = cpu.read_op8() & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol8(op1, op2); break;\r\n        case 1: result = cpu.ror8(op1, op2); break;\r\n        case 2: result = cpu.rcl8(op1, op2); break;\r\n        case 3: result = cpu.rcr8(op1, op2); break;\r\n        case 4: result = cpu.shl8(op1, op2); break;\r\n        case 5: result = cpu.shr8(op1, op2); break;\r\n        case 6: result = cpu.shl8(op1, op2); break;\r\n        case 7: result = cpu.sar8(op1, op2); break;\r\n    }\r\n    cpu.write_e8(result);\r\n};\r\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e16();\r\n    var op2 = cpu.read_op8() & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol16(op1, op2); break;\r\n        case 1: result = cpu.ror16(op1, op2); break;\r\n        case 2: result = cpu.rcl16(op1, op2); break;\r\n        case 3: result = cpu.rcr16(op1, op2); break;\r\n        case 4: result = cpu.shl16(op1, op2); break;\r\n        case 5: result = cpu.shr16(op1, op2); break;\r\n        case 6: result = cpu.shl16(op1, op2); break;\r\n        case 7: result = cpu.sar16(op1, op2); break;\r\n    }\r\n    cpu.write_e16(result);\r\n};\r\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e32();\r\n    var op2 = cpu.read_op8() & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol32(op1, op2); break;\r\n        case 1: result = cpu.ror32(op1, op2); break;\r\n        case 2: result = cpu.rcl32(op1, op2); break;\r\n        case 3: result = cpu.rcr32(op1, op2); break;\r\n        case 4: result = cpu.shl32(op1, op2); break;\r\n        case 5: result = cpu.shr32(op1, op2); break;\r\n        case 6: result = cpu.shl32(op1, op2); break;\r\n        case 7: result = cpu.sar32(op1, op2); break;\r\n    }\r\n    cpu.write_e32(result);\r\n};\r\n\r\nt16[0xC2] = cpu => {\r\n    // retn\r\n    var imm16 = cpu.read_op16();\r\n\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.adjust_stack_reg(imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xC2] = cpu => {\r\n    // retn\r\n    var imm16 = cpu.read_op16();\r\n    var ip = cpu.pop32s();\r\n\r\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\r\n    cpu.adjust_stack_reg(imm16);\r\n    cpu.diverged();\r\n};\r\nt16[0xC3] = cpu => {\r\n    // retn\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\r\n    cpu.diverged();\r\n};\r\nt32[0xC3] = cpu => {\r\n    // retn\r\n    var ip = cpu.pop32s();\r\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\r\n    cpu.diverged();\r\n};\r\n\r\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_es);\r\n};\r\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_es);\r\n};\r\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_ds);\r\n};\r\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_ds);\r\n};\r\n\r\nt[0xC6] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\r\n    } else {\r\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\r\n    }\r\n}\r\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\r\n    } else {\r\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\r\n    }\r\n};\r\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\r\n    } else {\r\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\r\n    }\r\n}\r\n\r\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\r\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\r\nt16[0xC9] = cpu => {\r\n    // leave\r\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\r\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\r\n    cpu.set_stack_reg(old_vbp + 2 | 0);\r\n    cpu.reg16[reg_bp] = new_bp;\r\n};\r\nt32[0xC9] = cpu => {\r\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\r\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\r\n    cpu.set_stack_reg(old_vbp + 4 | 0);\r\n    cpu.reg32s[reg_ebp] = new_ebp;\r\n};\r\nt16[0xCA] = cpu => {\r\n    // retf\r\n    var imm16 = cpu.read_op16();\r\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\r\n\r\n    cpu.far_return(ip, cs, imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xCA] = cpu => {\r\n    // retf\r\n    var imm16 = cpu.read_op16();\r\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\r\n\r\n    cpu.far_return(ip, cs, imm16);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt16[0xCB] = cpu => {\r\n    // retf\r\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\r\n\r\n    cpu.far_return(ip, cs, 0);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt32[0xCB] = cpu => {\r\n    // retf\r\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\r\n\r\n    cpu.far_return(ip, cs, 0);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xCC] = cpu => {\r\n    // INT3\r\n    // TODO: inhibit iopl checks\r\n    dbg_log(\"INT3\", LOG_CPU);\r\n    cpu.call_interrupt_vector(3, true, false);\r\n    cpu.diverged();\r\n};\r\nt[0xCD] = cpu => {\r\n    // INT\r\n    var imm8 = cpu.read_op8();\r\n    cpu.call_interrupt_vector(imm8, true, false);\r\n    cpu.diverged();\r\n};\r\nt[0xCE] = cpu => {\r\n    // INTO\r\n    dbg_log(\"INTO\", LOG_CPU);\r\n    if(cpu.getof())\r\n    {\r\n        // TODO: inhibit iopl checks\r\n        cpu.call_interrupt_vector(4, true, false);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nt16[0xCF] = cpu => {\r\n    // iret\r\n    cpu.iret16();\r\n    cpu.diverged();\r\n};\r\nt32[0xCF] = cpu => {\r\n    cpu.iret32();\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xD0] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e8();\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol8(op1, 1); break;\r\n        case 1: result = cpu.ror8(op1, 1); break;\r\n        case 2: result = cpu.rcl8(op1, 1); break;\r\n        case 3: result = cpu.rcr8(op1, 1); break;\r\n        case 4: result = cpu.shl8(op1, 1); break;\r\n        case 5: result = cpu.shr8(op1, 1); break;\r\n        case 6: result = cpu.shl8(op1, 1); break;\r\n        case 7: result = cpu.sar8(op1, 1); break;\r\n    }\r\n    cpu.write_e8(result);\r\n};\r\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e16();\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol16(op1, 1); break;\r\n        case 1: result = cpu.ror16(op1, 1); break;\r\n        case 2: result = cpu.rcl16(op1, 1); break;\r\n        case 3: result = cpu.rcr16(op1, 1); break;\r\n        case 4: result = cpu.shl16(op1, 1); break;\r\n        case 5: result = cpu.shr16(op1, 1); break;\r\n        case 6: result = cpu.shl16(op1, 1); break;\r\n        case 7: result = cpu.sar16(op1, 1); break;\r\n    }\r\n    cpu.write_e16(result);\r\n};\r\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e32();\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol32(op1, 1); break;\r\n        case 1: result = cpu.ror32(op1, 1); break;\r\n        case 2: result = cpu.rcl32(op1, 1); break;\r\n        case 3: result = cpu.rcr32(op1, 1); break;\r\n        case 4: result = cpu.shl32(op1, 1); break;\r\n        case 5: result = cpu.shr32(op1, 1); break;\r\n        case 6: result = cpu.shl32(op1, 1); break;\r\n        case 7: result = cpu.sar32(op1, 1); break;\r\n    }\r\n    cpu.write_e32(result);\r\n};\r\n\r\nt[0xD2] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e8();\r\n    var op2 = cpu.reg8[reg_cl] & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol8(op1, op2); break;\r\n        case 1: result = cpu.ror8(op1, op2); break;\r\n        case 2: result = cpu.rcl8(op1, op2); break;\r\n        case 3: result = cpu.rcr8(op1, op2); break;\r\n        case 4: result = cpu.shl8(op1, op2); break;\r\n        case 5: result = cpu.shr8(op1, op2); break;\r\n        case 6: result = cpu.shl8(op1, op2); break;\r\n        case 7: result = cpu.sar8(op1, op2); break;\r\n    }\r\n    cpu.write_e8(result);\r\n};\r\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e16();\r\n    var op2 = cpu.reg8[reg_cl] & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol16(op1, op2); break;\r\n        case 1: result = cpu.ror16(op1, op2); break;\r\n        case 2: result = cpu.rcl16(op1, op2); break;\r\n        case 3: result = cpu.rcr16(op1, op2); break;\r\n        case 4: result = cpu.shl16(op1, op2); break;\r\n        case 5: result = cpu.shr16(op1, op2); break;\r\n        case 6: result = cpu.shl16(op1, op2); break;\r\n        case 7: result = cpu.sar16(op1, op2); break;\r\n    }\r\n    cpu.write_e16(result);\r\n};\r\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e32();\r\n    var op2 = cpu.reg8[reg_cl] & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol32(op1, op2); break;\r\n        case 1: result = cpu.ror32(op1, op2); break;\r\n        case 2: result = cpu.rcl32(op1, op2); break;\r\n        case 3: result = cpu.rcr32(op1, op2); break;\r\n        case 4: result = cpu.shl32(op1, op2); break;\r\n        case 5: result = cpu.shr32(op1, op2); break;\r\n        case 6: result = cpu.shl32(op1, op2); break;\r\n        case 7: result = cpu.sar32(op1, op2); break;\r\n    }\r\n    cpu.write_e32(result);\r\n};\r\n\r\nt[0xD4] = cpu => {\r\n    cpu.bcd_aam(cpu.read_op8());\r\n};\r\nt[0xD5] = cpu => {\r\n    cpu.bcd_aad(cpu.read_op8());\r\n};\r\n\r\nt[0xD6] = cpu => {\r\n    // salc\r\n    cpu.reg8[reg_al] = -cpu.getcf();\r\n};\r\nt[0xD7] = cpu => {\r\n    // xlat\r\n    if(cpu.is_asize_32())\r\n    {\r\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\r\n    }\r\n    else\r\n    {\r\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\r\n    }\r\n};\r\n\r\nt[0xD8] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\r\n};\r\nt[0xD9] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\r\n};\r\nt[0xDA] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\r\n};\r\nt[0xDB] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\r\n};\r\nt[0xDC] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\r\n};\r\nt[0xDD] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\r\n};\r\nt[0xDE] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\r\n};\r\nt[0xDF] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\r\n};\r\n\r\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\r\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\r\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\r\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\r\n\r\nt[0xE4] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\r\n    cpu.diverged();\r\n};\r\nt16[0xE5] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\r\n    cpu.diverged();\r\n};\r\nt32[0xE5] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\r\n    cpu.diverged();\r\n};\r\nt[0xE6] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\r\n    cpu.diverged();\r\n};\r\nt16[0xE7] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\r\n    cpu.diverged();\r\n};\r\nt32[0xE7] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\r\n    cpu.diverged();\r\n};\r\n\r\nt16[0xE8] = cpu => {\r\n    // call\r\n    var imm16 = cpu.read_op16();\r\n    cpu.push16(cpu.get_real_eip());\r\n\r\n    cpu.jmp_rel16(imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xE8] = cpu => {\r\n    // call\r\n    var imm32s = cpu.read_op32s();\r\n    cpu.push32(cpu.get_real_eip());\r\n\r\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt16[0xE9] = cpu => {\r\n    // jmp\r\n    var imm16 = cpu.read_op16();\r\n    cpu.jmp_rel16(imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xE9] = cpu => {\r\n    // jmp\r\n    var imm32s = cpu.read_op32s();\r\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt16[0xEA] = cpu => {\r\n    // jmpf\r\n    var ip = cpu.read_op16();\r\n    var cs = cpu.read_disp16();\r\n    cpu.far_jump(ip, cs, false);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt32[0xEA] = cpu => {\r\n    // jmpf\r\n    var new_ip = cpu.read_op32s();\r\n    var cs = cpu.read_disp16();\r\n    cpu.far_jump(new_ip, cs, false);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt[0xEB] = cpu => {\r\n    // jmp near\r\n    var imm8 = cpu.read_op8s();\r\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xEC] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\r\n    cpu.diverged();\r\n};\r\nt16[0xED] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\r\n    cpu.diverged();\r\n};\r\nt32[0xED] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\r\n    cpu.diverged();\r\n};\r\nt[0xEE] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\r\n    cpu.diverged();\r\n};\r\nt16[0xEF] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\r\n    cpu.diverged();\r\n};\r\nt32[0xEF] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xF0] = cpu => {\r\n    // lock\r\n    //dbg_log(\"lock\", LOG_CPU);\r\n\r\n    // TODO\r\n    // This triggers UD when used with\r\n    // some instructions that don't write to memory\r\n    cpu.run_prefix_instruction();\r\n};\r\nt[0xF1] = cpu => {\r\n    // INT1\r\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\r\n    throw cpu.debug.unimpl(\"int1 instruction\");\r\n};\r\n\r\nt[0xF2] = cpu => {\r\n    // repnz\r\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\r\n    cpu.prefixes |= PREFIX_REPNZ;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\nt[0xF3] = cpu => {\r\n    // repz\r\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\r\n    cpu.prefixes |= PREFIX_REPZ;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt[0xF4] = cpu => {\r\n    cpu.hlt_op();\r\n};\r\n\r\nt[0xF5] = cpu => {\r\n    // cmc\r\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\r\n    cpu.flags_changed &= ~1;\r\n};\r\n\r\nt[0xF6] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\r\n            break;\r\n        case 2:\r\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\r\n            break;\r\n        case 3:\r\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\r\n            break;\r\n        case 4:\r\n            var data = cpu.read_e8(); cpu.mul8(data);\r\n            break;\r\n        case 5:\r\n            var data = cpu.read_e8s(); cpu.imul8(data);\r\n            break;\r\n        case 6:\r\n            var data = cpu.read_e8(); cpu.div8(data);\r\n            break;\r\n        case 7:\r\n            var data = cpu.read_e8s(); cpu.idiv8(data);\r\n            break;\r\n    }\r\n};\r\n\r\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\r\n            break;\r\n        case 2:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\r\n            break;\r\n        case 3:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\r\n            break;\r\n        case 4:\r\n            var data = cpu.read_e16(); cpu.mul16(data);\r\n            break;\r\n        case 5:\r\n            var data = cpu.read_e16s(); cpu.imul16(data);\r\n            break;\r\n        case 6:\r\n            var data = cpu.read_e16(); cpu.div16(data);\r\n            break;\r\n        case 7:\r\n            var data = cpu.read_e16s(); cpu.idiv16(data);\r\n            break;\r\n    }\r\n};\r\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\r\n            break;\r\n        case 2:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\r\n            break;\r\n        case 3:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\r\n            break;\r\n        case 4:\r\n            var data = cpu.read_e32(); cpu.mul32(data);\r\n            break;\r\n        case 5:\r\n            var data = cpu.read_e32s(); cpu.imul32(data);\r\n            break;\r\n        case 6:\r\n            var data = cpu.read_e32(); cpu.div32(data);\r\n            break;\r\n        case 7:\r\n            var data = cpu.read_e32s(); cpu.idiv32(data);\r\n            break;\r\n    }\r\n};\r\n\r\nt[0xF8] = cpu => {\r\n    // clc\r\n    cpu.flags &= ~flag_carry;\r\n    cpu.flags_changed &= ~1;\r\n};\r\nt[0xF9] = cpu => {\r\n    // stc\r\n    cpu.flags |= flag_carry;\r\n    cpu.flags_changed &= ~1;\r\n};\r\n\r\nt[0xFA] = cpu => {\r\n    // cli\r\n    //dbg_log(\"interrupts off\");\r\n\r\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\r\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\r\n    {\r\n        cpu.flags &= ~flag_interrupt;\r\n    }\r\n    else\r\n    {\r\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\r\n        //    (cpu.cr[4] & CR4_VME) :\r\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\r\n        //{\r\n        //    cpu.flags &= ~flag_vif;\r\n        //}\r\n        //else\r\n        {\r\n            dbg_log(\"cli #gp\", LOG_CPU);\r\n            cpu.trigger_gp(0);\r\n        }\r\n    }\r\n};\r\nt[0xFB] = cpu => {\r\n    // sti\r\n    //dbg_log(\"interrupts on\");\r\n\r\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\r\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\r\n    {\r\n        cpu.flags |= flag_interrupt;\r\n\r\n        cpu.clear_prefixes();\r\n        cpu.cycle_internal();\r\n\r\n        cpu.handle_irqs();\r\n    }\r\n    else\r\n    {\r\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\r\n        //    (cpu.cr[4] & CR4_VME) :\r\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\r\n        //{\r\n        //    cpu.flags |= flag_vif;\r\n        //}\r\n        //else\r\n        {\r\n            dbg_log(\"sti #gp\", LOG_CPU);\r\n            cpu.trigger_gp(0);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nt[0xFC] = cpu => {\r\n    // cld\r\n    cpu.flags &= ~flag_direction;\r\n};\r\nt[0xFD] = cpu => {\r\n    // std\r\n    cpu.flags |= flag_direction;\r\n};\r\n\r\nt[0xFE] = cpu => { cpu.read_modrm_byte();\r\n    var mod = cpu.modrm_byte & 56;\r\n\r\n    if(mod === 0)\r\n    {\r\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\r\n    }\r\n    else if(mod === 8)\r\n    {\r\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\r\n    }\r\n    else\r\n    {\r\n        cpu.todo();\r\n    }\r\n};\r\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\r\n            break;\r\n        case 2:\r\n            // 2, call near\r\n            var data = cpu.read_e16();\r\n            cpu.push16(cpu.get_real_eip());\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 3:\r\n            // 3, callf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"callf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read16(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\r\n\r\n            cpu.far_jump(new_ip, new_cs, true);\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 4:\r\n            // 4, jmp near\r\n            var data = cpu.read_e16();\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 5:\r\n            // 5, jmpf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"jmpf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read16(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\r\n\r\n            cpu.far_jump(new_ip, new_cs, false);\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 6:\r\n            // 6, push\r\n            var data = cpu.read_e16();\r\n            cpu.push16(data);\r\n            break;\r\n        case 7:\r\n            cpu.todo();\r\n    }\r\n};\r\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\r\n            break;\r\n        case 2:\r\n            // 2, call near\r\n            var data = cpu.read_e32s();\r\n            cpu.push32(cpu.get_real_eip());\r\n\r\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            cpu.diverged();\r\n            break;\r\n        case 3:\r\n            // 3, callf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"callf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read32s(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\r\n\r\n            if(!cpu.protected_mode || cpu.vm86_mode())\r\n            {\r\n                if(new_ip & 0xFFFF0000)\r\n                {\r\n                    throw cpu.debug.unimpl(\"#GP handler\");\r\n                }\r\n            }\r\n\r\n            cpu.far_jump(new_ip, new_cs, true);\r\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 4:\r\n            // 4, jmp near\r\n            var data = cpu.read_e32s();\r\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            cpu.diverged();\r\n            break;\r\n        case 5:\r\n            // 5, jmpf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"jmpf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read32s(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\r\n\r\n            if(!cpu.protected_mode || cpu.vm86_mode())\r\n            {\r\n                if(new_ip & 0xFFFF0000)\r\n                {\r\n                    throw cpu.debug.unimpl(\"#GP handler\");\r\n                }\r\n            }\r\n\r\n            cpu.far_jump(new_ip, new_cs, false);\r\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 6:\r\n            // push\r\n            var data = cpu.read_e32s();\r\n            cpu.push32(data);\r\n            break;\r\n        case 7:\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nvar table16 = [];\r\nvar table32 = [];\r\nCPU.prototype.table16 = table16;\r\nCPU.prototype.table32 = table32;\r\n\r\nfor(var i = 0; i < 256; i++)\r\n{\r\n    if(t[i])\r\n    {\r\n        //dbg_assert(!t16[i]);\r\n        //dbg_assert(!t32[i]);\r\n        table16[i] = table32[i] = t[i];\r\n    }\r\n    else if(t16[i])\r\n    {\r\n        //dbg_assert(!t[i]);\r\n        //dbg_assert(t32[i]);\r\n        table16[i] = t16[i];\r\n        table32[i] = t32[i];\r\n    }\r\n}\r\n\r\nt = [];\r\nt16 = [];\r\nt32 = [];\r\n\r\n// 0F ops start here\r\n\r\nt[0x00] = cpu => { cpu.read_modrm_byte();\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        // No GP, UD is correct here\r\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            // sldt\r\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\r\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\r\n            {\r\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\r\n            }\r\n            break;\r\n        case 1:\r\n            // str\r\n            cpu.set_e16(cpu.sreg[reg_tr]);\r\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\r\n            {\r\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\r\n            }\r\n            break;\r\n        case 2:\r\n            // lldt\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var data = cpu.read_e16();\r\n            cpu.load_ldt(data);\r\n            break;\r\n        case 3:\r\n            // ltr\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var data = cpu.read_e16();\r\n            cpu.load_tr(data);\r\n            break;\r\n        case 4:\r\n            cpu.verr(cpu.read_e16());\r\n            break;\r\n        case 5:\r\n            cpu.verw(cpu.read_e16());\r\n            break;\r\n\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt[0x01] = cpu => { cpu.read_modrm_byte();\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n\r\n    if(mod === 4)\r\n    {\r\n        // smsw\r\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\r\n        {\r\n            cpu.set_e32(cpu.cr[0]);\r\n        }\r\n        else\r\n        {\r\n            cpu.set_e16(cpu.cr[0]);\r\n        }\r\n        return;\r\n    }\r\n    else if(mod === 6)\r\n    {\r\n        // lmsw\r\n        if(cpu.cpl)\r\n        {\r\n            cpu.trigger_gp(0);\r\n        }\r\n\r\n        var cr0 = cpu.read_e16();\r\n\r\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\r\n\r\n        if(cpu.protected_mode)\r\n        {\r\n            // lmsw cannot be used to switch back\r\n            cr0 |= CR0_PE;\r\n        }\r\n\r\n        cpu.set_cr0(cr0);\r\n        return;\r\n    }\r\n\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        // only memory\r\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // sgdt\r\n            cpu.writable_or_pagefault(addr, 6);\r\n            cpu.safe_write16(addr, cpu.gdtr_size);\r\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\r\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\r\n            break;\r\n        case 1:\r\n            // sidt\r\n            cpu.writable_or_pagefault(addr, 6);\r\n            cpu.safe_write16(addr, cpu.idtr_size);\r\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\r\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\r\n            break;\r\n        case 2:\r\n            // lgdt\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var size = cpu.safe_read16(addr);\r\n            var offset = cpu.safe_read32s(addr + 2);\r\n\r\n            cpu.gdtr_size = size;\r\n            cpu.gdtr_offset = offset;\r\n\r\n            if(!cpu.is_osize_32())\r\n            {\r\n                cpu.gdtr_offset &= 0xFFFFFF;\r\n            }\r\n\r\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\r\n            //cpu.debug.dump_state();\r\n            //cpu.debug.dump_regs_short();\r\n            //cpu.debug.dump_gdt_ldt();\r\n            break;\r\n        case 3:\r\n            // lidt\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var size = cpu.safe_read16(addr);\r\n            var offset = cpu.safe_read32s(addr + 2);\r\n\r\n            cpu.idtr_size = size;\r\n            cpu.idtr_offset = offset;\r\n\r\n            if(!cpu.is_osize_32())\r\n            {\r\n                cpu.idtr_offset &= 0xFFFFFF;\r\n            }\r\n\r\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\r\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\r\n            break;\r\n        case 7:\r\n            // flush translation lookaside buffer\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            cpu.invlpg(addr);\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt16[0x02] = cpu => { cpu.read_modrm_byte();\r\n    // lar\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lar #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\r\n};\r\nt32[0x02] = cpu => { cpu.read_modrm_byte();\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lar #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\r\n};\r\n\r\nt16[0x03] = cpu => { cpu.read_modrm_byte();\r\n    // lsl\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lsl #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\r\n};\r\nt32[0x03] = cpu => { cpu.read_modrm_byte();\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lsl #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\r\n};\r\n\r\nt[0x04] = cpu => { cpu.undefined_instruction(); };\r\nt[0x05] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x06] = cpu => {\r\n    // clts\r\n    if(cpu.cpl)\r\n    {\r\n        dbg_log(\"clts #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    else\r\n    {\r\n        //dbg_log(\"clts\", LOG_CPU);\r\n        cpu.cr[0] &= ~CR0_TS;\r\n    }\r\n};\r\n\r\nt[0x07] = cpu => { cpu.undefined_instruction(); };\r\nt[0x08] = cpu => {\r\n    // invd\r\n    cpu.todo();\r\n};\r\n\r\nt[0x09] = cpu => {\r\n    if(cpu.cpl)\r\n    {\r\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    // wbinvd\r\n};\r\n\r\n\r\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\r\nt[0x0B] = cpu => {\r\n    // UD2\r\n    cpu.trigger_ud();\r\n};\r\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x0D] = cpu => {\r\n    // nop\r\n    cpu.todo();\r\n};\r\n\r\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\r\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x12] = cpu => {\r\n    // movlpd xmm, xmm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_xmm_mem64s();\r\n    cpu.write_xmm64(data[0], data[1]);\r\n};\r\nt[0x13] = cpu => {\r\n    // movlpd xmm/m64, xmm\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_xmm64s();\r\n    dbg_assert(cpu.modrm_byte < 0xC0);\r\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.safe_write64(addr, data[0], data[1]);\r\n};\r\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0x18] = cpu => { cpu.read_modrm_byte();\r\n    // prefetch\r\n    // nop for us\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.modrm_resolve(cpu.modrm_byte);\r\n};\r\n\r\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\r\n// endbr32/endbr64\r\nt[0x1E] = cpu => { cpu.read_modrm_byte()\r\n    // multi-byte nop\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.modrm_resolve(cpu.modrm_byte);\r\n};\r\nt[0x1F] = cpu => { cpu.read_modrm_byte()\r\n    // multi-byte nop\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.modrm_resolve(cpu.modrm_byte);\r\n};\r\n\r\n\r\nt[0x20] = cpu => { cpu.read_modrm_byte();\r\n\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\r\n\r\n    // mov addr, cr\r\n    // mod = which control register\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            cpu.write_reg_e32(cpu.cr[0]);\r\n            break;\r\n        case 2:\r\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\r\n            cpu.write_reg_e32(cpu.cr[2]);\r\n            break;\r\n        case 3:\r\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\r\n            cpu.write_reg_e32(cpu.cr[3]);\r\n            break;\r\n        case 4:\r\n            cpu.write_reg_e32(cpu.cr[4]);\r\n            break;\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            dbg_assert(false);\r\n            cpu.trigger_ud();\r\n    }\r\n};\r\n\r\nt[0x21] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var dreg = cpu.modrm_byte >> 3 & 7;\r\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\r\n    {\r\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // high two bits of modrm are ignored\r\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\r\n\r\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\r\n};\r\n\r\nt[0x22] = cpu => { cpu.read_modrm_byte();\r\n\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var data = cpu.read_reg_e32s();\r\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\r\n\r\n    // mov cr, addr\r\n    // mod = which control register\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            cpu.set_cr0(data);\r\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\r\n            break;\r\n\r\n        case 2:\r\n            cpu.cr[2] = data;\r\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\r\n            break;\r\n\r\n        case 3:\r\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\r\n            data &= ~0b111111100111;\r\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\r\n            cpu.cr[3] = data;\r\n            cpu.clear_tlb();\r\n\r\n            //dump_page_directory();\r\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\r\n            break;\r\n\r\n        case 4:\r\n            cpu.set_cr4(data);\r\n            break;\r\n\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            dbg_assert(false);\r\n            cpu.trigger_ud();\r\n    }\r\n};\r\nt[0x23] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var dreg = cpu.modrm_byte >> 3 & 7;\r\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\r\n    {\r\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // high two bits of modrm are ignored\r\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\r\n\r\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\r\n};\r\n\r\nt[0x24] = cpu => { cpu.undefined_instruction(); };\r\nt[0x25] = cpu => { cpu.undefined_instruction(); };\r\nt[0x26] = cpu => { cpu.undefined_instruction(); };\r\nt[0x27] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x28] = cpu => {\r\n    // movaps xmm, xmm/m128\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_xmm_mem128s();\r\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\r\n};\r\nt[0x29] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // movapd xmm/m128, xmm\r\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movaps xmm/m128, xmm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n};\r\nt[0x2A] = cpu => {\r\n    // cvtpi2ps xmm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_mmx_mem64s();\r\n    let float32 = new Float32Array(2);\r\n    let res32 = new Uint32Array(float32.buffer);\r\n    float32[0] = data[0];\r\n    float32[1] = data[1];\r\n    cpu.write_xmm64(res32[0], res32[1]);\r\n };\r\nt[0x2B] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // movntpd m128, xmm\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movntps m128, xmm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n };\r\nt[0x2C] = cpu => {\r\n    // cvttps2pi mm, xmm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let data = cpu.read_xmm_mem64s();\r\n    let float32 = new Float32Array(data.buffer);\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    var res0 = Math.trunc(float32[0]);\r\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\r\n    {\r\n        low = res0;\r\n    }\r\n    else\r\n    {\r\n        low = 0x80000000|0;\r\n    }\r\n\r\n    var res1 = Math.trunc(float32[1]);\r\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\r\n    {\r\n        high = res1;\r\n    }\r\n    else\r\n    {\r\n        high = 0x80000000|0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x2D] = cpu => {\r\n    // cvtps2pi mm, xmm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let data = cpu.read_xmm_mem64s();\r\n    let float32 = new Float32Array(data.buffer);\r\n    let low = 0;\r\n    let high = 0;\r\n    var rc = cpu.mxcsr >> 13 & 3;\r\n\r\n    var res0 = cpu.integer_round(float32[0], rc);\r\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\r\n    {\r\n        low = res0;\r\n    }\r\n    else\r\n    {\r\n        low = 0x80000000|0;\r\n    }\r\n\r\n    var res1 = cpu.integer_round(float32[1], rc);\r\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\r\n    {\r\n        high = res1;\r\n    }\r\n    else\r\n    {\r\n        high = 0x80000000|0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x2E] = cpu => {\r\n    // ucomiss xmm1, xmm2/m32\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source1 = cpu.read_xmm128s();\r\n    let source2 = cpu.read_xmm_mem128s();\r\n\r\n    let x = (new Float32Array(source1.buffer))[0];\r\n    let y = (new Float32Array(source2.buffer))[0];\r\n\r\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\r\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        cpu.flags |= 1;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        cpu.flags |= flag_zero;\r\n    }\r\n    else\r\n    {\r\n        cpu.flags |= 1 | flag_parity | flag_zero;\r\n\r\n        if (cpu.is_SNaN32(source1[0]) || cpu.is_SNaN32(source2[0])) {\r\n            cpu.invalid_arithmatic();\r\n        }\r\n    }\r\n};\r\n\r\nt[0x2F] = cpu => {\r\n    // comiss xmm1, xmm2/m32\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source1 = cpu.read_xmm128s();\r\n    let source2 = cpu.read_xmm_mem128s();\r\n\r\n    let x = (new Float32Array(source1.buffer))[0];\r\n    let y = (new Float32Array(source2.buffer))[0];\r\n\r\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\r\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        cpu.flags |= 1;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        cpu.flags |= flag_zero;\r\n    }\r\n    else\r\n    {\r\n        cpu.flags |= 1 | flag_parity | flag_zero;\r\n        cpu.invalid_arithmatic();\r\n    }\r\n};\r\n\r\n// wrmsr\r\nt[0x30] = cpu => {\r\n    // wrmsr - write maschine specific register\r\n\r\n    if(cpu.cpl)\r\n    {\r\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var index = cpu.reg32s[reg_ecx];\r\n    var low = cpu.reg32s[reg_eax];\r\n    var high = cpu.reg32s[reg_edx];\r\n\r\n    if(index !== IA32_SYSENTER_ESP)\r\n    {\r\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\r\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\r\n    }\r\n\r\n    switch(index)\r\n    {\r\n        case IA32_SYSENTER_CS:\r\n            cpu.sysenter_cs = low & 0xFFFF;\r\n            break;\r\n\r\n        case IA32_SYSENTER_EIP:\r\n            cpu.sysenter_eip = low;\r\n            break;\r\n\r\n        case IA32_SYSENTER_ESP:\r\n            cpu.sysenter_esp = low;\r\n            break;\r\n\r\n        case IA32_APIC_BASE_MSR:\r\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\r\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\r\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\r\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\r\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\r\n            break;\r\n\r\n        case IA32_TIME_STAMP_COUNTER:\r\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\r\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\r\n            break;\r\n\r\n        case IA32_BIOS_SIGN_ID:\r\n            break;\r\n\r\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\r\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\r\n            break;\r\n\r\n        case IA32_MCG_CAP:\r\n            // netbsd\r\n            break;\r\n\r\n        case IA32_KERNEL_GS_BASE:\r\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\r\n            dbg_log(\"GS Base written\", LOG_CPU);\r\n            break;\r\n\r\n        default:\r\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\r\n    }\r\n};\r\n\r\nt[0x31] = cpu => {\r\n    // rdtsc - read timestamp counter\r\n\r\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\r\n    {\r\n        var n = v86.microtick() - cpu.tsc_offset;\r\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\r\n\r\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\r\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\r\n\r\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\r\n    }\r\n    else\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n};\r\n\r\nt[0x32] = cpu => {\r\n    // rdmsr - read maschine specific register\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var index = cpu.reg32s[reg_ecx];\r\n\r\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\r\n\r\n    var low = 0;\r\n    var high = 0;\r\n\r\n    switch(index)\r\n    {\r\n        case IA32_SYSENTER_CS:\r\n            low = cpu.sysenter_cs;\r\n            break;\r\n\r\n        case IA32_SYSENTER_EIP:\r\n            low = cpu.sysenter_eip;\r\n            break;\r\n\r\n        case IA32_SYSENTER_ESP:\r\n            low = cpu.sysenter_esp;\r\n            break;\r\n\r\n        case IA32_TIME_STAMP_COUNTER:\r\n            var n = v86.microtick() - cpu.tsc_offset;\r\n            low = n * TSC_RATE;\r\n            high = n * (TSC_RATE / 0x100000000);\r\n            break;\r\n\r\n        case IA32_PLATFORM_ID:\r\n            break;\r\n\r\n        case IA32_APIC_BASE_MSR:\r\n            if(ENABLE_ACPI)\r\n            {\r\n                low = APIC_ADDRESS;\r\n\r\n                if(cpu.apic_enabled)\r\n                {\r\n                    low |= IA32_APIC_BASE_EN;\r\n                }\r\n            }\r\n            break;\r\n\r\n        case IA32_BIOS_SIGN_ID:\r\n            break;\r\n\r\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\r\n            break;\r\n\r\n        case IA32_RTIT_CTL:\r\n            // linux4\r\n            break;\r\n\r\n        case MSR_SMI_COUNT:\r\n            break;\r\n\r\n        case IA32_MCG_CAP:\r\n            // netbsd\r\n            break;\r\n\r\n        case MSR_PKG_C2_RESIDENCY:\r\n            break;\r\n\r\n        case MSR_EBC_FREQUENCY_ID:\r\n            low = 1 << 24;\r\n            break;\r\n\r\n        default:\r\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\r\n    }\r\n\r\n    cpu.reg32s[reg_eax] = low;\r\n    cpu.reg32s[reg_edx] = high;\r\n};\r\n\r\nt[0x33] = cpu => {\r\n    // rdpmc\r\n    cpu.todo();\r\n};\r\n\r\nt[0x34] = cpu => {\r\n    // sysenter\r\n    var seg = cpu.sysenter_cs & 0xFFFC;\r\n\r\n    if(!cpu.protected_mode || seg === 0)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\r\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\r\n\r\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\r\n\r\n    cpu.instruction_pointer = cpu.sysenter_eip;\r\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\r\n\r\n    cpu.sreg[reg_cs] = seg;\r\n    cpu.segment_is_null[reg_cs] = 0;\r\n    cpu.segment_limits[reg_cs] = -1;\r\n    cpu.segment_offsets[reg_cs] = 0;\r\n\r\n    cpu.update_cs_size(true);\r\n\r\n    cpu.cpl = 0;\r\n    cpu.cpl_changed();\r\n\r\n    cpu.sreg[reg_ss] = seg + 8;\r\n    cpu.segment_is_null[reg_ss] = 0;\r\n    cpu.segment_limits[reg_ss] = -1;\r\n    cpu.segment_offsets[reg_ss] = 0;\r\n\r\n    cpu.stack_size_32 = true;\r\n    cpu.diverged();\r\n};\r\n\r\nt[0x35] = cpu => {\r\n    // sysexit\r\n    var seg = cpu.sysenter_cs & 0xFFFC;\r\n\r\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\r\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\r\n\r\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\r\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\r\n\r\n    cpu.sreg[reg_cs] = seg + 16 | 3;\r\n\r\n    cpu.segment_is_null[reg_cs] = 0;\r\n    cpu.segment_limits[reg_cs] = -1;\r\n    cpu.segment_offsets[reg_cs] = 0;\r\n\r\n    cpu.update_cs_size(true);\r\n\r\n    cpu.cpl = 3;\r\n    cpu.cpl_changed();\r\n\r\n    cpu.sreg[reg_ss] = seg + 24 | 3;\r\n    cpu.segment_is_null[reg_ss] = 0;\r\n    cpu.segment_limits[reg_ss] = -1;\r\n    cpu.segment_offsets[reg_ss] = 0;\r\n\r\n    cpu.stack_size_32 = true;\r\n    cpu.diverged();\r\n};\r\n\r\nt[0x36] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x37] = cpu => {\r\n    // getsec\r\n    cpu.todo();\r\n};\r\n\r\n// sse3+\r\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\r\n\r\n// cmov\r\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\r\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\r\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\r\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\r\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\r\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\r\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\r\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\r\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\r\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\r\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\r\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\r\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\r\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\r\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\r\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\r\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\r\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\r\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\r\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\r\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\r\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\r\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\r\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\r\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\r\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\r\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\r\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\r\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\r\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\r\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\r\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\r\n\r\n\r\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x57] = cpu => {\r\n    // xorps xmm, xmm/mem128\r\n    // xorpd xmm, xmm/mem128\r\n    // Note: Same code as pxor\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_xmm_mem128s();\r\n    let destination = cpu.read_xmm128s();\r\n\r\n    cpu.write_xmm128s(\r\n        source[0] ^ destination[0],\r\n        source[1] ^ destination[1],\r\n        source[2] ^ destination[2],\r\n        source[3] ^ destination[3]\r\n    );\r\n};\r\n\r\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0x60] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // punpcklbw xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem64s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm64s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\r\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\r\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\r\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // punpcklbw mm, mm/m32\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem32s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n        let byte0 = destination_low & 0xFF;\r\n        let byte1 = source & 0xFF;\r\n        let byte2 = (destination_low >> 8) & 0xFF;\r\n        let byte3 = (source >> 8) & 0xFF;\r\n        let byte4 = (destination_low >> 16) & 0xFF;\r\n        let byte5 = (source >> 16) & 0xFF;\r\n        let byte6 = destination_low >>> 24;\r\n        let byte7 = source >>> 24;\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x61] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // punpcklwd xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem64s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm64s();\r\n        let destination16 = new Uint16Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            destination16[0] | source16[0] << 16,\r\n            destination16[1] | source16[1] << 16,\r\n            destination16[2] | source16[2] << 16,\r\n            destination16[3] | source16[3] << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // punpcklwd mm, mm/m32\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source = cpu.read_mmx_mem32s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n        let word0 = destination_low & 0xFFFF;\r\n        let word1 = source & 0xFFFF;\r\n        let word2 = destination_low >>> 16;\r\n        let word3 = source >>> 16;\r\n\r\n        let low = word0 | word1 << 16;\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x62] = cpu => {\r\n    // punpckldq mm, mm/m32\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem32s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n    let low = destination_low;\r\n    let high = source;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x63] = cpu => {\r\n    // packsswb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = 0;\r\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\r\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\r\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\r\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\r\n\r\n    let high = 0;\r\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\r\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\r\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\r\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x64] = cpu => {\r\n    // pcmpgtb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\r\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\r\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\r\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\r\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\r\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\r\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\r\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x65] = cpu => {\r\n    // pcmpgtw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\r\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\r\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\r\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x66] = cpu => {\r\n    // pcmpgtd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_low > source[0] ? -1 : 0;\r\n    let high = destination_high > source[1] ? -1 : 0;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x67] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16s = new Int16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination16s = new Int16Array(destination.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 8; i++)\r\n        {\r\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\r\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\r\n    }\r\n    else\r\n    {\r\n        // packuswb mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = 0;\r\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\r\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\r\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\r\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\r\n\r\n        let high = 0;\r\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\r\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\r\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\r\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x68] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // punpckhbw xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\r\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\r\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\r\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // punpckhbw mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let byte0 = destination_high & 0xFF;\r\n        let byte1 = source[1] & 0xFF;\r\n        let byte2 = (destination_high >> 8) & 0xFF;\r\n        let byte3 = (source[1] >> 8) & 0xFF;\r\n        let byte4 = (destination_high >> 16) & 0xFF;\r\n        let byte5 = (source[1] >> 16) & 0xFF;\r\n        let byte6 = destination_high >>> 24;\r\n        let byte7 = source[1] >>> 24;\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x69] = cpu => {\r\n    // punpckhwd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = destination_high & 0xFFFF;\r\n    let word1 = source[1] & 0xFFFF;\r\n    let word2 = destination_high >>> 16;\r\n    let word3 = source[1] >>> 16;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x6A] = cpu => {\r\n    // punpckhdq mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_high;\r\n    let high = source[1];\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x6B] = cpu => {\r\n    // packssdw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = 0;\r\n    low |= cpu.saturate_sd_to_sw(destination_low);\r\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\r\n\r\n    let high = 0;\r\n    high |= cpu.saturate_sd_to_sw(source[0]);\r\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x6E] = cpu => {\r\n    // movd mm, r/m32\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        let data = cpu.read_e32s();\r\n        cpu.write_xmm128s(data, 0, 0, 0);\r\n    }\r\n    else\r\n    {\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let data = cpu.read_e32s();\r\n        cpu.write_mmx64s(data, 0);\r\n    }\r\n};\r\nt[0x6F] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // movdqa xmm, xmm/mem128\r\n        let data = cpu.read_xmm_mem128s();\r\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\r\n    {\r\n        // movdqu xmm, xmm/m128\r\n        let data = cpu.read_xmm_mem128s_unaligned();\r\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movq mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let data = cpu.read_mmx_mem64s();\r\n        cpu.write_mmx64s(data[0], data[1]);\r\n    }\r\n};\r\n\r\nt[0x70] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // pshufd xmm, xmm/mem128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let order = cpu.read_op8();\r\n\r\n        cpu.write_xmm128s(\r\n            source[order & 3],\r\n            source[order >> 2 & 3],\r\n            source[order >> 4 & 3],\r\n            source[order >> 6 & 3]\r\n        );\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\r\n    {\r\n        // pshuflw xmm, xmm/m128, imm8\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n        let order = cpu.read_op8();\r\n\r\n        cpu.write_xmm128s(\r\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\r\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\r\n            source[2],\r\n            source[3]\r\n        );\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\r\n    {\r\n        // pshufhw xmm, xmm/m128, imm8\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n        let order = cpu.read_op8();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0],\r\n            source[1],\r\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\r\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // pshufw mm1, mm2/m64, imm8\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source = cpu.read_mmx_mem64s();\r\n        let order = cpu.read_op8();\r\n\r\n        let word0_shift = order & 0b11;\r\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\r\n        let word1_shift = (order >> 2) & 0b11;\r\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\r\n        let low = word0 | word1 << 16;\r\n\r\n        let word2_shift = (order >> 4) & 0b11;\r\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\r\n        let word3_shift = (order >>> 6);\r\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\nt[0x71] = cpu => {\r\n    cpu.read_modrm_byte();\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // psrlw, psraw, psllw\r\n    //     2,     4,     6\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 2:\r\n            // psrlw mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 15) {\r\n                var word0 = (destination_low & 0xFFFF) >>> shift;\r\n                var word1 = (destination_low >>> 16) >>> shift;\r\n                low = word0 | word1 << 16;\r\n\r\n                var word2 = (destination_high & 0xFFFF) >>> shift;\r\n                var word3 = (destination_high >>> 16) >>> shift;\r\n                high = word2 | word3 << 16;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 4:\r\n            // psraw mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            if (shift > 15) {\r\n                shift = 16;\r\n            }\r\n\r\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\r\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\r\n            var low = word0 | word1 << 16;\r\n\r\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\r\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\r\n            var high = word2 | word3 << 16;\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 6:\r\n            // psllw mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 15) {\r\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\r\n                var word1 = (destination_low >>> 16) << shift;\r\n                low = word0 | word1 << 16;\r\n\r\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\r\n                var word3 = (destination_high >>> 16) << shift;\r\n                high = word2 | word3 << 16;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        default:\r\n            cpu.unimplemented_sse();\r\n            break;\r\n    }\r\n};\r\n\r\nt[0x72] = cpu => {\r\n    cpu.read_modrm_byte();\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // psrld, psrad, pslld\r\n    //     2,     4,     6\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 2:\r\n            // psrld mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low >>> shift;\r\n                high = destination_high >>> shift;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 4:\r\n            // psrad mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            if (shift > 31) {\r\n                shift = 31;\r\n            }\r\n\r\n            var low = destination_low >> shift;\r\n            var high = destination_high >> shift;\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 6:\r\n            // pslld mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low << shift;\r\n                high = destination_high << shift;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        default:\r\n            cpu.unimplemented_sse();\r\n            break;\r\n    }\r\n};\r\n\r\nt[0x73] = cpu => {\r\n    cpu.read_modrm_byte();\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // psrlq, psllq\r\n    //     2,     6\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 2:\r\n            // psrlq mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low >>> shift | (destination_high << (32 - shift));\r\n                high = destination_high >>> shift;\r\n            }\r\n            else if (shift <= 63) {\r\n                low = destination_high >>> (shift & 0x1F);\r\n                high = 0;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 6:\r\n            // psllq mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low << shift;\r\n                high = destination_high << shift | (destination_low >>> (32 - shift));\r\n            }\r\n            else if (shift <= 63) {\r\n                high = destination_low << (shift & 0x1F);\r\n                low = 0;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        default:\r\n            cpu.unimplemented_sse();\r\n            break;\r\n    }\r\n};\r\n\r\nt[0x74] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pcmpeqb xmm, xmm/m128\r\n        let source64s = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source64s.buffer);\r\n\r\n        let destination128 = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination128.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 16; i++)\r\n        {\r\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n    }\r\n    else\r\n    {\r\n        // pcmpeqb mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source64s = cpu.read_mmx_mem64s();\r\n        let source8s = new Int8Array(source64s.buffer);\r\n\r\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n        let destination8s = cpu.reg_mmx8s;\r\n\r\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\r\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\r\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\r\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\r\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\r\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\r\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\r\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x75] = cpu => {\r\n    // pcmpeqw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\r\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\r\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\r\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x76] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pcmpeqd xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0] === destination[0] ? -1 : 0,\r\n            source[1] === destination[1] ? -1 : 0,\r\n            source[2] === destination[2] ? -1 : 0,\r\n            source[3] === destination[3] ? -1 : 0\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // pcmpeqd mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = destination_low === source[0] ? -1 : 0;\r\n        let high = destination_high === source[1] ? -1 : 0;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x77] = cpu => {\r\n    // emms\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.fpu.stack_empty = 0xFF;\r\n};\r\n\r\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7E] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\r\n    {\r\n        // movq xmm, xmm/mem64\r\n        let data = cpu.read_xmm_mem64s();\r\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // movd r/m32, xmm\r\n        let data = cpu.read_xmm64s();\r\n        cpu.set_e32(data[0]);\r\n    }\r\n    else\r\n    {\r\n        // movd r/m32, mm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let data = cpu.read_mmx64s();\r\n        cpu.set_e32(data[0]);\r\n    }\r\n};\r\nt[0x7F] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\r\n    {\r\n        // movdqu xmm/m128, xmm\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // movdqa xmm/m128, xmm\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movq mm/m64, mm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let data = cpu.read_mmx64s();\r\n        cpu.set_mmx_mem64s(data[0], data[1]);\r\n    }\r\n};\r\n\r\n// jmpcc\r\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\r\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\r\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\r\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\r\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\r\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\r\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\r\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\r\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\r\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\r\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\r\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\r\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\r\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\r\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\r\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\r\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\r\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\r\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\r\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\r\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\r\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\r\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\r\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\r\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\r\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\r\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\r\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\r\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\r\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\r\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\r\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\r\n\r\n// setcc\r\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\r\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\r\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\r\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\r\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\r\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\r\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\r\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\r\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\r\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\r\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\r\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\r\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\r\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\r\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\r\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\r\n\r\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\r\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\r\nt16[0xA1] = cpu => {\r\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0xA1] = cpu => {\r\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\nt[0xA2] = cpu => { cpu.cpuid(); };\r\n\r\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    }\r\n    else\r\n    {\r\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\r\n    }\r\n};\r\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    }\r\n    else\r\n    {\r\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\r\n    }\r\n};\r\n\r\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\r\n};\r\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\r\n};\r\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\r\n};\r\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\r\n};\r\n\r\nt[0xA6] = cpu => {\r\n    // obsolete cmpxchg (os/2)\r\n    cpu.trigger_ud();\r\n};\r\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\r\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\r\nt16[0xA9] = cpu => {\r\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0xA9] = cpu => {\r\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\n\r\nt[0xAA] = cpu => {\r\n    // rsm\r\n    cpu.todo();\r\n};\r\n\r\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    } else {\r\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\r\n    }\r\n};\r\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    } else {\r\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\r\n    }\r\n};\r\n\r\n\r\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\r\n};\r\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\r\n};\r\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\r\n};\r\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\r\n};\r\n\r\nt[0xAE] = cpu => { cpu.read_modrm_byte();\r\n    // xsave, xrstor, ...\r\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\r\n\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: // fxsave\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.fxsave(addr);\r\n            break;\r\n\r\n        case 1: // fxrstor\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.fxrstor(addr);\r\n            break;\r\n\r\n        case 2: // ldmxcsr\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            let new_mxcsr = cpu.safe_read32s(addr);\r\n            if(new_mxcsr & ~MXCSR_MASK)\r\n            {\r\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\r\n                cpu.trigger_gp(0);\r\n            }\r\n            cpu.mxcsr = new_mxcsr;\r\n            break;\r\n\r\n        case 3: // stmxcsr\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.safe_write32(addr, cpu.mxcsr);\r\n            break;\r\n\r\n        case 5:\r\n            // lfence\r\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\r\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n            break;\r\n        case 6:\r\n            // mfence\r\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\r\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n            break;\r\n        case 7:\r\n            // sfence or clflush\r\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\r\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n            break;\r\n        default:\r\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16s();\r\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\r\n};\r\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\r\n};\r\n\r\nt[0xB0] = cpu => { cpu.read_modrm_byte();\r\n    // cmpxchg8\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.writable_or_pagefault(virt_addr, 1);\r\n\r\n        var data = cpu.safe_read8(virt_addr);\r\n    }\r\n    else\r\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\r\n\r\n\r\n    cpu.cmp8(cpu.reg8[reg_al], data);\r\n\r\n    if(cpu.getzf())\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write8(virt_addr, cpu.read_g8());\r\n        else\r\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\r\n    }\r\n    else\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write8(virt_addr, data);\r\n\r\n        cpu.reg8[reg_al] = data;\r\n    }\r\n};\r\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\r\n    // cmpxchg16/32\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.writable_or_pagefault(virt_addr, 2);\r\n\r\n        var data = cpu.safe_read16(virt_addr);\r\n    }\r\n    else\r\n        data = cpu.read_reg_e16();\r\n\r\n    cpu.cmp16(cpu.reg16[reg_ax], data);\r\n\r\n    if(cpu.getzf())\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write16(virt_addr, cpu.read_g16());\r\n        else\r\n            cpu.write_reg_e16(cpu.read_g16());\r\n    }\r\n    else\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write16(virt_addr, data);\r\n\r\n        cpu.reg16[reg_ax] = data;\r\n    }\r\n};\r\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.writable_or_pagefault(virt_addr, 4);\r\n\r\n        var data = cpu.safe_read32s(virt_addr);\r\n    }\r\n    else\r\n    {\r\n        data = cpu.read_reg_e32s();\r\n    }\r\n\r\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\r\n\r\n    if(cpu.getzf())\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\r\n        else\r\n            cpu.write_reg_e32(cpu.read_g32s());\r\n    }\r\n    else\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write32(virt_addr, data);\r\n\r\n        cpu.reg32s[reg_eax] = data;\r\n    }\r\n};\r\n\r\n// lss\r\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_ss);\r\n};\r\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_ss);\r\n};\r\n\r\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    } else {\r\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\r\n    }\r\n};\r\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    } else {\r\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\r\n    }\r\n};\r\n\r\n// lfs, lgs\r\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_fs);\r\n};\r\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_fs);\r\n};\r\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_gs);\r\n};\r\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_gs);\r\n};\r\n\r\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\r\n    // movzx\r\n    var data = cpu.read_e8();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e8();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\r\n    // movzx\r\n    dbg_assert(false, \"Possibly invalid encoding\");\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\r\n    // popcnt\r\n    if((cpu.prefixes & PREFIX_F3) === 0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.popcnt(data));\r\n};\r\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\r\n    if((cpu.prefixes & PREFIX_F3) === 0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.popcnt(data));\r\n};\r\n\r\nt[0xB9] = cpu => {\r\n    // UD\r\n    cpu.todo();\r\n};\r\n\r\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 4:\r\n            if(cpu.modrm_byte < 0xC0)\r\n            {\r\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            }\r\n            else\r\n            {\r\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\r\n            }\r\n            break;\r\n        case 5:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            } else {\r\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\r\n            }\r\n            break;\r\n        case 6:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            } else {\r\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\r\n            }\r\n            break;\r\n        case 7:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            } else {\r\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\r\n            }\r\n            break;\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            cpu.todo();\r\n    }\r\n};\r\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 4:\r\n            if(cpu.modrm_byte < 0xC0)\r\n            {\r\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            }\r\n            else\r\n            {\r\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\r\n            }\r\n            break;\r\n        case 5:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            } else {\r\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\r\n            }\r\n            break;\r\n        case 6:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            } else {\r\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\r\n            }\r\n            break;\r\n        case 7:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            } else {\r\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\r\n            }\r\n            break;\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    } else {\r\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\r\n    }\r\n};\r\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    } else {\r\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\r\n    }\r\n};\r\n\r\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\r\n};\r\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\r\n};\r\n\r\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\r\n};\r\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\r\n};\r\n\r\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\r\n    // movsx\r\n    var data = cpu.read_e8s();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e8s();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\r\n    // movsx\r\n    dbg_assert(false, \"Possibly invalid encoding\");\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(data);\r\n};\r\n\r\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16s();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt[0xC0] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\r\n};\r\n\r\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16();\r\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\r\n};\r\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32();\r\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\r\n};\r\n\r\n\r\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xC3] = cpu => {\r\n    // movnti\r\n    cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n    cpu.set_e32(cpu.read_g32s());\r\n};\r\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xC7] = cpu => {\r\n    cpu.read_modrm_byte();\r\n\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 1:\r\n            // cmpxchg8b\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                cpu.trigger_ud();\r\n            }\r\n\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.writable_or_pagefault(addr, 8);\r\n\r\n            var m64_low = cpu.safe_read32s(addr);\r\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\r\n\r\n            if(cpu.reg32s[reg_eax] === m64_low &&\r\n               cpu.reg32s[reg_edx] === m64_high)\r\n            {\r\n                cpu.flags |= flag_zero;\r\n\r\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\r\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\r\n            }\r\n            else\r\n            {\r\n                cpu.flags &= ~flag_zero;\r\n\r\n                cpu.reg32s[reg_eax] = m64_low;\r\n                cpu.reg32s[reg_edx] = m64_high;\r\n\r\n                cpu.safe_write32(addr, m64_low);\r\n                cpu.safe_write32(addr + 4 | 0, m64_high);\r\n            }\r\n\r\n            cpu.flags_changed &= ~flag_zero;\r\n            break;\r\n\r\n        case 6:\r\n            var has_rand = v86util.has_rand_int();\r\n\r\n            if(has_rand)\r\n            {\r\n                var rand = v86util.get_rand_int();\r\n            }\r\n            else\r\n            {\r\n                var rand = 0;\r\n            }\r\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\r\n\r\n            if(cpu.is_osize_32())\r\n            {\r\n                cpu.set_e32(rand);\r\n            }\r\n            else\r\n            {\r\n                cpu.set_e16(rand);\r\n            }\r\n\r\n            cpu.flags &= ~flags_all;\r\n            cpu.flags |= has_rand;\r\n            cpu.flags_changed = 0;\r\n            break;\r\n\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\r\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\r\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\r\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\r\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\r\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\r\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\r\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\r\n\r\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xD1] = cpu => {\r\n    // psrlw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 15) {\r\n        let word0 = (destination_low & 0xFFFF) >>> shift;\r\n        let word1 = (destination_low >>> 16) >>> shift;\r\n        low = word0 | word1 << 16;\r\n\r\n        let word2 = (destination_high & 0xFFFF) >>> shift;\r\n        let word3 = (destination_high >>> 16) >>> shift;\r\n        high = word2 | word3 << 16;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD2] = cpu => {\r\n    // psrld mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low >>> shift;\r\n        high = destination_high >>> shift;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD3] = cpu => {\r\n    // psrlq mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n\r\n    if(shift === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low >>> shift | (destination_high << (32 - shift));\r\n        high = destination_high >>> shift;\r\n    }\r\n    else if (shift <= 63) {\r\n        low = destination_high >>> (shift & 0x1F);\r\n        high = 0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xD5] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pmullw xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16s = new Int16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination16s = new Int16Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\r\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\r\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\r\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // pmullw mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\r\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\r\n        let low = word0 | word1 << 16;\r\n\r\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\r\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\nt[0xD6] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    // movq xmm/m64, xmm\r\n    var data = cpu.read_xmm64s();\r\n    dbg_assert(cpu.modrm_byte < 0xC0);\r\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.safe_write64(addr, data[0], data[1]);\r\n};\r\nt[0xD7] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n\r\n    // pmovmskb reg, xmm\r\n    let data = cpu.read_xmm_mem128s();\r\n    let data8 = new Uint8Array(data.buffer);\r\n    let result =\r\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\r\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\r\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\r\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\r\n    cpu.write_g32(result);\r\n};\r\n\r\nt[0xD8] = cpu => {\r\n    // psubusb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8 = new Uint8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8 = cpu.reg_mmx8;\r\n\r\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\r\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\r\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\r\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\r\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\r\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\r\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\r\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD9] = cpu => {\r\n    // psubusw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\r\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\r\n    if (word0 < 0) {\r\n        word0 = 0;\r\n    }\r\n    if (word1 < 0) {\r\n        word1 = 0;\r\n    }\r\n\r\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\r\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\r\n    if (word2 < 0) {\r\n        word2 = 0;\r\n    }\r\n    if (word3 < 0) {\r\n        word3 = 0;\r\n    }\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xDA] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    // pminub xmm, xmm/m128\r\n    let source = cpu.read_xmm_mem128s();\r\n    let source8 = new Uint8Array(source.buffer);\r\n\r\n    let destination = cpu.read_xmm128s();\r\n    let destination8 = new Uint8Array(destination.buffer);\r\n\r\n    let result = cpu.create_atom128s(0, 0, 0, 0);\r\n    let result8 = new Uint8Array(result.buffer);\r\n\r\n    for(let i = 0; i < 16; i++)\r\n    {\r\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\r\n    }\r\n\r\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n};\r\nt[0xDB] = cpu => {\r\n    // pand mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = source[0] & destination_low;\r\n    let high = source[1] & destination_high;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xDC] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // paddusb xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 16; i++)\r\n        {\r\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n    }\r\n    else\r\n    {\r\n        // paddusb mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source64s = cpu.read_mmx_mem64s();\r\n        let source8 = new Uint8Array(source64s.buffer);\r\n\r\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n        let destination8 = cpu.reg_mmx8;\r\n\r\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\r\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\r\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\r\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\r\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\r\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\r\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\r\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xDD] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // paddusw mm, mm/m64\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination16 = new Uint16Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\r\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\r\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\r\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // paddusw mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\r\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\r\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\r\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\r\n\r\n        let low = word0 | word1 << 16;\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xDE] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pmaxub xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 16; i++)\r\n        {\r\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false);\r\n    }\r\n};\r\nt[0xDF] = cpu => {\r\n    // pandn mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = source[0] & ~destination_low;\r\n    let high = source[1] & ~destination_high;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xE1] = cpu => {\r\n    // psraw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    if (shift > 15) {\r\n        shift = 16;\r\n    }\r\n\r\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\r\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\r\n    let low = word0 | word1 << 16;\r\n\r\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\r\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE2] = cpu => {\r\n    // psrad mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    if (shift > 31) {\r\n        shift = 31;\r\n    }\r\n\r\n    let low = destination_low >> shift;\r\n    let high = destination_high >> shift;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xE4] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    // pmulhuw xmm, xmm/m128\r\n    let source = cpu.read_xmm_mem128s();\r\n    let source16 = new Uint16Array(source.buffer);\r\n\r\n    let destination = cpu.read_xmm128s();\r\n    let destination16 = new Uint16Array(destination.buffer);\r\n\r\n    cpu.write_xmm128s(\r\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\r\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\r\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\r\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\r\n    );\r\n};\r\n\r\nt[0xE5] = cpu => {\r\n    // pmulhw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\r\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\r\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\r\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xE7] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        let data = cpu.read_xmm128s();\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false);\r\n    }\r\n};\r\n\r\nt[0xE8] = cpu => {\r\n    // psubsb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\r\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\r\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\r\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\r\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\r\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\r\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\r\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE9] = cpu => {\r\n    // psubsw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\r\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\r\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\r\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xEB] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // por xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0] | destination[0],\r\n            source[1] | destination[1],\r\n            source[2] | destination[2],\r\n            source[3] | destination[3]\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // por mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = source[0] | destination_low;\r\n        let high = source[1] | destination_high;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xEC] = cpu => {\r\n    // paddsb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\r\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\r\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\r\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\r\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\r\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\r\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\r\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xED] = cpu => {\r\n    // paddsw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\r\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\r\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\r\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xEF] = cpu => {\r\n    // pxor mm, mm/m64\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0] ^ destination[0],\r\n            source[1] ^ destination[1],\r\n            source[2] ^ destination[2],\r\n            source[3] ^ destination[3]\r\n        );\r\n    }\r\n    else\r\n    {\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = source[0] ^ destination_low;\r\n        let high = source[1] ^ destination_high;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xF1] = cpu => {\r\n    // psllw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 15) {\r\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\r\n        let word1 = (destination_low >>> 16) << shift;\r\n        low = word0 | word1 << 16;\r\n\r\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\r\n        let word3 = (destination_high >>> 16) << shift;\r\n        high = word2 | word3 << 16;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF2] = cpu => {\r\n    // pslld mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low << shift;\r\n        high = destination_high << shift;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF3] = cpu => {\r\n    // psllq mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n\r\n    if(shift === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low << shift;\r\n        high = destination_high << shift | (destination_low >>> (32 - shift));\r\n    }\r\n    else if (shift <= 63) {\r\n        high = destination_low << (shift & 0x1F);\r\n        low = 0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF4] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pmuludq xmm1, xmm2/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        let i = (cpu.modrm_byte >> 3 & 7) << 2;\r\n\r\n        cpu.reg_xmm32s[i] = v86util.mul_low(destination[0], source[0]);\r\n        cpu.reg_xmm32s[i + 1] = v86util.mul_high(destination[0], source[0]);\r\n        cpu.reg_xmm32s[i + 2] = v86util.mul_low(destination[2], source[2]);\r\n        cpu.reg_xmm32s[i + 3] = v86util.mul_high(destination[2], source[2]);\r\n    }\r\n    else\r\n    {\r\n        // pmuludq mm1, mm2/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let s = cpu.read_mmx_mem64s()[0];\r\n        let d = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n        cpu.write_mmx64s(v86util.mul_low(d, s), v86util.mul_high(d, s));\r\n    }\r\n};\r\n\r\nt[0xF5] = cpu => {\r\n    // pmaddwd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\r\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\r\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\r\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\r\n\r\n    let low = mul0 + mul1 | 0;\r\n    let high = mul2 + mul3 | 0;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xF8] = cpu => {\r\n    // psubb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\r\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\r\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\r\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\r\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\r\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\r\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\r\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF9] = cpu => {\r\n    // psubw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low - source[0]) & 0xFFFF;\r\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\r\n    let low = word0 | word1 << 16;\r\n\r\n    let word2 = (destination_high - source[1]) & 0xFFFF;\r\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFA] = cpu => {\r\n    // psubd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_low - source[0];\r\n    let high = destination_high - source[1];\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xFC] = cpu => {\r\n    // paddb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\r\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\r\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\r\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\r\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\r\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\r\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\r\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFD] = cpu => {\r\n    // paddw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low + source[0]) & 0xFFFF;\r\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\r\n    let low = word0 | word1 << 16;\r\n\r\n    let word2 = (destination_high + source[1]) & 0xFFFF;\r\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFE] = cpu => {\r\n    // paddd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_low + source[0] | 0;\r\n    let high = destination_high + source[1] | 0;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFF] = cpu => {\r\n    // Windows 98\r\n    dbg_log(\"#ud: 0F FF\");\r\n    cpu.trigger_ud();\r\n};\r\n\r\n\r\nvar table0F_16 = [];\r\nvar table0F_32 = [];\r\nCPU.prototype.table0F_16 = table0F_16;\r\nCPU.prototype.table0F_32 = table0F_32;\r\n\r\nfor(i = 0; i < 256; i++)\r\n{\r\n    if(t[i])\r\n    {\r\n        //dbg_assert(!t16[i]);\r\n        //dbg_assert(!t32[i]);\r\n        table0F_16[i] = table0F_32[i] = t[i];\r\n    }\r\n    else if(t16[i])\r\n    {\r\n        //dbg_assert(!t[i]);\r\n        //dbg_assert(t32[i]);\r\n        table0F_16[i] = t16[i];\r\n        table0F_32[i] = t32[i];\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nCPU.prototype.debug_init = function()\r\n{\r\n    var cpu = this;\r\n    var debug = {};\r\n    this.debug = debug;\r\n\r\n    /**\r\n     * wheter or not in step mode\r\n     * used for debugging\r\n     * @type {boolean}\r\n     */\r\n    debug.step_mode = false;\r\n    debug.ops = undefined;\r\n    debug.all_ops = [];\r\n\r\n    debug.trace_all = false;\r\n\r\n    // \"log\" some information visually to the user.\r\n    // Also in non-DEBUG modes\r\n    debug.show = function(x)\r\n    {\r\n        if(typeof document !== \"undefined\")\r\n        {\r\n            var el = document.getElementById(\"log\");\r\n\r\n            if(el)\r\n            {\r\n                el.textContent += x + \"\\n\";\r\n                el.style.display = \"block\";\r\n                el.scrollTop = 1e9;\r\n                return;\r\n            }\r\n        }\r\n\r\n        console.log(x);\r\n    };\r\n\r\n    debug.init = function()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        // used for debugging\r\n        debug.ops = new CircularQueue(200000);\r\n\r\n        if(cpu.io)\r\n        {\r\n            // write seabios debug output to console\r\n            var seabios_debug = \"\";\r\n\r\n            cpu.io.register_write(0x402, this, handle); // seabios\r\n            cpu.io.register_write(0x500, this, handle); // vgabios\r\n        }\r\n\r\n        function handle(out_byte)\r\n        {\r\n            if(out_byte === 10)\r\n            {\r\n                dbg_log(seabios_debug, LOG_BIOS);\r\n                seabios_debug = \"\";\r\n            }\r\n            else\r\n            {\r\n                seabios_debug += String.fromCharCode(out_byte);\r\n            }\r\n        }\r\n    };\r\n\r\n    debug.get_regs_short = get_regs_short;\r\n    debug.dump_regs = dump_regs_short;\r\n    debug.dump_instructions = dump_instructions;\r\n    debug.get_instructions = get_instructions;\r\n    debug.get_state = get_state;\r\n    debug.dump_state = dump_state;\r\n    debug.dump_stack = dump_stack;\r\n\r\n    debug.dump_page_directory = dump_page_directory;\r\n    debug.dump_gdt_ldt = dump_gdt_ldt;\r\n    debug.dump_idt = dump_idt;\r\n\r\n    debug.get_memory_dump = get_memory_dump;\r\n    debug.memory_hex_dump = memory_hex_dump;\r\n    debug.used_memory_dump = used_memory_dump;\r\n\r\n    debug.step = step;\r\n    debug.run_until = run_until;\r\n\r\n    /**\r\n     * @param {string=} msg\r\n     */\r\n    debug.unimpl = function(msg)\r\n    {\r\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\r\n\r\n        debug.show(s);\r\n\r\n        if(DEBUG)\r\n        {\r\n            console.trace();\r\n            return s;\r\n        }\r\n        else\r\n        {\r\n            debug.show(\"Execution stopped\");\r\n            return s;\r\n        }\r\n        //this.name = \"Unimplemented\";\r\n    };\r\n\r\n    function step()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        if(!cpu.running)\r\n        {\r\n            cpu.cycle();\r\n        }\r\n\r\n        dump_regs_short();\r\n        var now = Date.now();\r\n\r\n        cpu.running = false;\r\n        dump_instructions();\r\n    }\r\n\r\n    function run_until()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        cpu.running = false;\r\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\r\n        if(a) while(cpu.instruction_pointer != a) step();\r\n    }\r\n\r\n    // http://ref.x86asm.net/x86reference.xml\r\n    // for debugging purposes\r\n    var opcode_map = [\r\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\r\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\r\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\r\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\r\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\r\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\r\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\r\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\r\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\r\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\r\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\r\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\r\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\r\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\r\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\r\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\r\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\r\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\r\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\r\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\r\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\r\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\r\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\r\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\r\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\r\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\r\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\r\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\r\n    ];\r\n\r\n    debug.logop = function(_ip, op)\r\n    {\r\n        if(!DEBUG || !debug.step_mode)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(debug.trace_all && debug.all_ops)\r\n        {\r\n            debug.all_ops.push(_ip, op);\r\n        }\r\n        else if(debug.ops)\r\n        {\r\n            debug.ops.add(_ip);\r\n            debug.ops.add(op);\r\n        }\r\n    };\r\n\r\n    function dump_stack(start, end)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        var esp = cpu.reg32[reg_esp];\r\n        dbg_log(\"========= STACK ==========\");\r\n\r\n        if(end >= start || end === undefined)\r\n        {\r\n            start = 5;\r\n            end = -5;\r\n        }\r\n\r\n        for(var i = start; i > end; i--)\r\n        {\r\n            var line = \"    \";\r\n\r\n            if(!i) line = \"=>  \";\r\n\r\n            line += h(i, 2) + \" | \";\r\n\r\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\r\n        }\r\n    }\r\n\r\n    function get_state(where)\r\n    {\r\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\r\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\r\n        var flags = cpu.get_eflags();\r\n        var iopl = cpu.getiopl();\r\n        var cpl = cpu.cpl;\r\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\r\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\r\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\r\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\r\n\r\n        var flag_names = {\r\n            [flag_carry]: \"c\",\r\n            [flag_parity]: \"p\",\r\n            [flag_adjust]: \"a\",\r\n            [flag_zero]: \"z\",\r\n            [flag_sign]: \"s\",\r\n            [flag_trap]: \"t\",\r\n            [flag_interrupt]: \"i\",\r\n            [flag_direction]: \"d\",\r\n            [flag_overflow]: \"o\",\r\n        };\r\n        var flag_string = \"\";\r\n\r\n        for(var i = 0; i < 16; i++)\r\n        {\r\n            if(flag_names[1 << i])\r\n            {\r\n                if(flags & 1 << i)\r\n                {\r\n                    flag_string += flag_names[1 << i];\r\n                }\r\n                else\r\n                {\r\n                    flag_string += \" \";\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\r\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\r\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\r\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\r\n                \" ss:esp=\" + ss_esp +\r\n                \" ssize=\" + (+cpu.stack_size_32) +\r\n                (where ? \" in \" + where : \"\"));\r\n    }\r\n\r\n    function dump_state(where)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        dbg_log(get_state(where), LOG_CPU);\r\n    }\r\n\r\n    function get_regs_short()\r\n    {\r\n        var\r\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\r\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\r\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\r\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\r\n            line1 = \"\",\r\n            line2 = \"\";\r\n\r\n\r\n\r\n        for(var i = 0; i < 4; i++)\r\n        {\r\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\r\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\r\n        }\r\n\r\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\r\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\r\n\r\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\r\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\r\n\r\n        return [line1, line2];\r\n    }\r\n\r\n    function dump_regs_short()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        var lines = get_regs_short();\r\n\r\n        dbg_log(lines[0], LOG_CPU);\r\n        dbg_log(lines[1], LOG_CPU);\r\n    }\r\n\r\n    function get_instructions()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        debug.step_mode = true;\r\n\r\n        function add(ip, op)\r\n        {\r\n            out += h(ip, 8)  + \":        \" +\r\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\r\n        }\r\n\r\n        var opcodes;\r\n        var out = \"\";\r\n\r\n        if(debug.trace_all && debug.all_ops)\r\n        {\r\n            opcodes = debug.all_ops;\r\n        }\r\n        else if(debug.ops)\r\n        {\r\n            opcodes = debug.ops.toArray();\r\n        }\r\n\r\n        if(!opcodes)\r\n        {\r\n            return \"\";\r\n        }\r\n\r\n        for(var i = 0; i < opcodes.length; i += 2)\r\n        {\r\n            add(opcodes[i], opcodes[i + 1]);\r\n        }\r\n\r\n        debug.ops.clear();\r\n        debug.all_ops = [];\r\n\r\n        return out;\r\n    }\r\n\r\n    function dump_instructions()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        debug.show(get_instructions());\r\n    }\r\n\r\n    function dump_gdt_ldt()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\r\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\r\n\r\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\r\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\r\n\r\n        function dump_table(addr, size)\r\n        {\r\n            for(var i = 0; i < size; i += 8, addr += 8)\r\n            {\r\n                var base = cpu.read16(addr + 2) |\r\n                        cpu.read8(addr + 4) << 16 |\r\n                        cpu.read8(addr + 7) << 24,\r\n\r\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\r\n                    access = cpu.read8(addr + 5),\r\n                    flags = cpu.read8(addr + 6) >> 4,\r\n                    flags_str = \"\",\r\n                    dpl = access >> 5 & 3;\r\n\r\n                if(!(access & 128))\r\n                {\r\n                    // present bit not set\r\n                    //continue;\r\n                    flags_str += \"NP \";\r\n                }\r\n                else\r\n                {\r\n                    flags_str += \" P \";\r\n                }\r\n\r\n                if(access & 16)\r\n                {\r\n                    if(flags & 4)\r\n                    {\r\n                        flags_str += \"32b \";\r\n                    }\r\n                    else\r\n                    {\r\n                        flags_str += \"16b \";\r\n                    }\r\n\r\n                    if(access & 8)\r\n                    {\r\n                        // executable\r\n                        flags_str += \"X \";\r\n\r\n                        if(access & 4)\r\n                        {\r\n                            flags_str += \"C \";\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        // data\r\n                        flags_str += \"R \";\r\n                    }\r\n\r\n                    flags_str += \"RW \";\r\n                }\r\n                else\r\n                {\r\n                    // system\r\n                    flags_str += \"sys: \" + h(access & 15);\r\n                }\r\n\r\n                if(flags & 8)\r\n                {\r\n                    limit = limit << 12 | 0xFFF;\r\n                }\r\n\r\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\r\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\r\n                        \", f = \" + flags.toString(2));\r\n            }\r\n        }\r\n    }\r\n\r\n    function dump_idt()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        for(var i = 0; i < cpu.idtr_size; i += 8)\r\n        {\r\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\r\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\r\n                selector = cpu.read16(addr + 2),\r\n                type = cpu.read8(addr + 5),\r\n                line,\r\n                dpl = type >> 5 & 3;\r\n\r\n            if((type & 31) === 5)\r\n            {\r\n                line = \"task gate \";\r\n            }\r\n            else if((type & 31) === 14)\r\n            {\r\n                line = \"intr gate \";\r\n            }\r\n            else if((type & 31) === 15)\r\n            {\r\n                line = \"trap gate \";\r\n            }\r\n            else\r\n            {\r\n                line = \"invalid   \";\r\n            }\r\n\r\n\r\n            if(type & 128)\r\n            {\r\n                line += \" P\";\r\n            }\r\n            else\r\n            {\r\n                // present bit not set\r\n                //continue;\r\n                line += \"NP\";\r\n            }\r\n\r\n\r\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\r\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\r\n        }\r\n    }\r\n\r\n    function load_page_entry(dword_entry, is_directory)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        if(!(dword_entry & 1))\r\n        {\r\n            // present bit not set\r\n            return false;\r\n        }\r\n\r\n        var size = (dword_entry & 128) === 128,\r\n            address;\r\n\r\n        if(size && !is_directory)\r\n        {\r\n            address = dword_entry & 0xFFC00000;\r\n        }\r\n        else\r\n        {\r\n            address = dword_entry & 0xFFFFF000;\r\n        }\r\n\r\n        return {\r\n            size: size,\r\n            global: (dword_entry & 256) === 256,\r\n            accessed: (dword_entry & 0x20) === 0x20,\r\n            dirty: (dword_entry & 0x40) === 0x40,\r\n            cache_disable : (dword_entry & 16) === 16,\r\n            user : (dword_entry & 4) === 4,\r\n            read_write : (dword_entry & 2) === 2,\r\n            address : address >>> 0\r\n        };\r\n    }\r\n\r\n    function dump_page_directory()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        for(var i = 0; i < 1024; i++)\r\n        {\r\n            var addr = cpu.cr[3] + 4 * i;\r\n            var dword = cpu.read32s(addr),\r\n                entry = load_page_entry(dword, true);\r\n\r\n            if(!entry)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var flags = \"\";\r\n\r\n            flags += entry.size ? \"S \" : \"  \";\r\n            flags += entry.accessed ? \"A \" : \"  \";\r\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\r\n            flags += entry.user ? \"U \" : \"  \";\r\n            flags += entry.read_write ? \"Rw \" : \"   \";\r\n\r\n            if(entry.size)\r\n            {\r\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\r\n                continue;\r\n            }\r\n            else\r\n            {\r\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\r\n            }\r\n\r\n            for(var j = 0; j < 1024; j++)\r\n            {\r\n                var sub_addr = entry.address + 4 * j;\r\n                dword = cpu.read32s(sub_addr);\r\n\r\n                var subentry = load_page_entry(dword, false);\r\n\r\n                if(subentry)\r\n                {\r\n                    flags = \"\";\r\n\r\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\r\n                    flags += subentry.user ? \"U \" : \"  \";\r\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\r\n                    flags += subentry.global ? \"G \" : \"  \";\r\n                    flags += subentry.accessed ? \"A \" : \"  \";\r\n                    flags += subentry.dirty ? \"Di \" : \"   \";\r\n\r\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\r\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function get_memory_dump(start, count)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        if(start === undefined)\r\n        {\r\n            start = 0;\r\n            count = cpu.memory_size;\r\n        }\r\n        else if(count === undefined)\r\n        {\r\n            count = start;\r\n            start = 0;\r\n        }\r\n\r\n        return cpu.mem8.slice(start, start + count).buffer;\r\n    }\r\n\r\n\r\n    function memory_hex_dump(addr, length)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        length = length || 4 * 0x10;\r\n        var line, byt;\r\n\r\n        for(var i = 0; i < length >> 4; i++)\r\n        {\r\n            line = h(addr + (i << 4), 5) + \"   \";\r\n\r\n            for(var j = 0; j < 0x10; j++)\r\n            {\r\n                byt = cpu.read8(addr + (i << 4) + j);\r\n                line += h(byt, 2) + \" \";\r\n            }\r\n\r\n            line += \"  \";\r\n\r\n            for(j = 0; j < 0x10; j++)\r\n            {\r\n                byt = cpu.read8(addr + (i << 4) + j);\r\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\r\n            }\r\n\r\n            dbg_log(line);\r\n        }\r\n    }\r\n\r\n    function used_memory_dump()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        var width = 0x80,\r\n            height = 0x10,\r\n            block_size = cpu.memory_size / width / height | 0,\r\n            row;\r\n\r\n        for(var i = 0; i < height; i++)\r\n        {\r\n            row = h(i * width * block_size, 8) + \" | \";\r\n\r\n            for(var j = 0; j < width; j++)\r\n            {\r\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\r\n\r\n                row += used ? \"X\" : \" \";\r\n            }\r\n\r\n            dbg_log(row);\r\n        }\r\n    }\r\n\r\n\r\n    debug.debug_interrupt = function(interrupt_nr)\r\n    {\r\n        //if(interrupt_nr === 0x20)\r\n        //{\r\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\r\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\r\n        //    //var service = \"\";\r\n        //    //if(vxd_device === 1)\r\n        //    //{\r\n        //    //    service = vxd_table1[vxd_sub];\r\n        //    //}\r\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\r\n        //}\r\n\r\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\r\n        //{\r\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\r\n        //{\r\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\r\n        //}\r\n\r\n        //if(interrupt_nr == 0x10)\r\n        //{\r\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\r\n        //    this.debug.dump_regs_short();\r\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x13)\r\n        //{\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n\r\n        //if(interrupt_nr === 6)\r\n        //{\r\n        //    this.instruction_pointer += 2;\r\n        //    dbg_log(\"BUG()\", LOG_CPU);\r\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\r\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\r\n        //    this.instruction_pointer -= 8;\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x80)\r\n        //{\r\n        //    dbg_log(\"linux syscall\");\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x40)\r\n        //{\r\n        //    dbg_log(\"kolibri syscall\");\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\r\n\r\nconst ELF_MAGIC = 0x464C457F;\r\n\r\nlet types = DataView.prototype;\r\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\r\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\r\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\r\nlet pad = function(size)\r\n{\r\n    return {\r\n        size,\r\n        get: offset => -1,\r\n    };\r\n};\r\n\r\nlet Header = create_struct([\r\n    { magic: U32, },\r\n\r\n    { class: U8, },\r\n    { data: U8, },\r\n    { version0: U8, },\r\n    { osabi: U8, },\r\n\r\n    { abiversion: U8, },\r\n    { pad0: pad(7) },\r\n\r\n    { type: U16, },\r\n    { machine: U16, },\r\n\r\n    { version1: U32, },\r\n    { entry: U32, },\r\n    { phoff: U32, },\r\n    { shoff: U32, },\r\n    { flags: U32, },\r\n\r\n    { ehsize: U16, },\r\n    { phentsize: U16, },\r\n    { phnum: U16, },\r\n    { shentsize: U16, },\r\n    { shnum: U16, },\r\n    { shstrndx: U16, },\r\n]);\r\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\r\n\r\nlet ProgramHeader = create_struct([\r\n    { type: U32, },\r\n    { offset: U32, },\r\n    { vaddr: U32, },\r\n    { paddr: U32, },\r\n    { filesz: U32, },\r\n    { memsz: U32, },\r\n    { flags: U32, },\r\n    { align: U32, },\r\n]);\r\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\r\n\r\nlet SectionHeader = create_struct([\r\n    { name: U32, },\r\n    { type: U32, },\r\n    { flags: U32, },\r\n    { addr: U32, },\r\n    { offset: U32, },\r\n    { size: U32, },\r\n    { link: U32, },\r\n    { info: U32, },\r\n    { addralign: U32, },\r\n    { entsize: U32, },\r\n]);\r\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\r\n\r\n\r\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\r\nfunction create_struct(struct)\r\n{\r\n    return struct.map(function(entry)\r\n    {\r\n        let keys = Object.keys(entry);\r\n        console.assert(keys.length === 1);\r\n        let name = keys[0];\r\n        let type = entry[name];\r\n\r\n        console.assert(type.size > 0);\r\n\r\n        return {\r\n            name,\r\n            type,\r\n            size: type.size,\r\n            get: type.get,\r\n            set: type.set,\r\n        };\r\n    });\r\n}\r\n\r\n/** @param {ArrayBuffer} buffer */\r\nfunction read_elf(buffer)\r\n{\r\n    let view = new DataView(buffer);\r\n\r\n    let [header, offset] = read_struct(view, Header);\r\n    console.assert(offset === 52);\r\n\r\n    if(DEBUG)\r\n    {\r\n        for(let key in header)\r\n        {\r\n            console.log(key + \": 0x\" + header[key].toString(16));\r\n        }\r\n        console.log(header);\r\n    }\r\n\r\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\r\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\r\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\r\n    console.assert(header.version0 === 1, \"Bad version0\");\r\n\r\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\r\n    // shared, or core, respectively.\r\n    console.assert(header.type === 2, \"Unimplemented type\");\r\n\r\n    console.assert(header.version1 === 1, \"Bad version1\");\r\n\r\n    // these are different in 64 bit\r\n    console.assert(header.ehsize === 52, \"Bad header size\");\r\n    console.assert(header.phentsize === 32, \"Bad program header size\");\r\n    console.assert(header.shentsize === 40, \"Bad section header size\");\r\n\r\n    let [program_headers, ph_offset] = read_structs(\r\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\r\n        ProgramHeader,\r\n        header.phnum);\r\n\r\n    let [sections_headers, sh_offset] = read_structs(\r\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\r\n        SectionHeader,\r\n        header.shnum);\r\n\r\n    if(DEBUG)\r\n    {\r\n        console.log(\"%d program headers:\", program_headers.length);\r\n        for(let program of program_headers)\r\n        {\r\n            console.log(\r\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\r\n                \"filesz=%s memsz=%s flags=%s align=%s\",\r\n                program.type.toString(16),\r\n                program.offset.toString(16),\r\n                program.vaddr.toString(16),\r\n                program.paddr.toString(16),\r\n                program.filesz.toString(16),\r\n                program.memsz.toString(16),\r\n                program.flags.toString(16),\r\n                program.align.toString(16)\r\n            );\r\n        }\r\n\r\n        console.log(\"%d program headers:\", sections_headers.length);\r\n        for(let section of sections_headers)\r\n        {\r\n            console.log(\r\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\r\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\r\n                section.name.toString(16),\r\n                section.type.toString(16),\r\n                section.flags.toString(16),\r\n                section.addr.toString(16),\r\n                section.offset.toString(16),\r\n                section.size.toString(16),\r\n                section.link.toString(16),\r\n                section.info.toString(16),\r\n                section.addralign.toString(16),\r\n                section.entsize.toString(16)\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        header,\r\n        program_headers,\r\n        sections_headers,\r\n    };\r\n}\r\n\r\nfunction read_struct(view, Struct)\r\n{\r\n    let result = {};\r\n    let offset = 0;\r\n    const LITTLE_ENDIAN = true; // big endian not supported yet\r\n\r\n    for(let entry of Struct)\r\n    {\r\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\r\n        console.assert(result[entry.name] === undefined);\r\n        result[entry.name] = value;\r\n        offset += entry.size;\r\n    }\r\n\r\n    return [result, offset];\r\n}\r\n\r\nfunction read_structs(view, Struct, count)\r\n{\r\n    let result = [];\r\n    let offset = 0;\r\n\r\n    for(var i = 0; i < count; i++)\r\n    {\r\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\r\n        result.push(s);\r\n        offset += size;\r\n    }\r\n\r\n    return [result, offset];\r\n}\r\n\r\n/** @param {number=} length */\r\nfunction view_slice(view, offset, length)\r\n{\r\n    return new DataView(view.buffer, view.byteOffset + offset, length);\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar SHIFT_SCAN_CODE = 0x2A;\r\n\r\n/** @const */\r\nvar SCAN_CODE_RELEASE = 0x80;\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction KeyboardAdapter(bus)\r\n{\r\n    var\r\n        /**\r\n         * @type {!Object.<boolean>}\r\n         */\r\n        keys_pressed = {},\r\n\r\n        keyboard = this;\r\n\r\n    /**\r\n     * Set by emulator\r\n     * @type {boolean}\r\n     */\r\n    this.emu_enabled = true;\r\n\r\n    /**\r\n     * Format:\r\n     * Javascript event.keyCode -> make code\r\n     * @const\r\n     */\r\n    var charmap = new Uint16Array([\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        // 0x08: backspace, tab, enter\r\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\r\n\r\n        // 0x10: shift, ctrl, alt, pause, caps lock\r\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\r\n\r\n        // 0x18: escape\r\n        0, 0, 0, 0x01,  0, 0, 0, 0,\r\n\r\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\r\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\r\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\r\n\r\n        // 0x30: numbers\r\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\r\n        0x09, 0x0A,\r\n\r\n        // 0x3B: ;= (firefox only)\r\n        0, 0x27, 0, 0x0D, 0, 0,\r\n\r\n        // 0x40\r\n        0,\r\n\r\n        // 0x41: letters\r\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\r\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\r\n\r\n        // 0x5B: Left Win, Right Win, Menu\r\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\r\n\r\n        // 0x60: keypad\r\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\r\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\r\n\r\n        // 0x70: F1 to F12\r\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\r\n\r\n        0, 0, 0, 0,\r\n\r\n        // 0x80\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n\r\n        // 0x90: Numlock\r\n        0x45, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,     0, 0, 0, 0,\r\n\r\n        // 0xA0: - (firefox only)\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\r\n\r\n        // 0xB0\r\n        // ,\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\r\n\r\n        // 0xC0\r\n        // `\r\n        0x29, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,     0, 0, 0, 0,\r\n\r\n        // 0xD0\r\n        // [']\\\r\n        0, 0, 0, 0,     0, 0, 0, 0,\r\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\r\n\r\n        // 0xE0\r\n        // Apple key on Gecko, Right alt\r\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,            0, 0, 0, 0,\r\n    ]);\r\n\r\n\r\n    /**\r\n     * ascii -> javascript event code (US layout)\r\n     * @const\r\n     */\r\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\r\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192};\r\n\r\n    // From:\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\r\n    // http://stanislavs.org/helppc/make_codes.html\r\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\r\n    //\r\n    // Mapping from event.code to scancode\r\n    var codemap = {\r\n        \"Escape\": 0x0001,\r\n        \"Digit1\": 0x0002,\r\n        \"Digit2\": 0x0003,\r\n        \"Digit3\": 0x0004,\r\n        \"Digit4\": 0x0005,\r\n        \"Digit5\": 0x0006,\r\n        \"Digit6\": 0x0007,\r\n        \"Digit7\": 0x0008,\r\n        \"Digit8\": 0x0009,\r\n        \"Digit9\": 0x000a,\r\n        \"Digit0\": 0x000b,\r\n        \"Minus\": 0x000c,\r\n        \"Equal\": 0x000d,\r\n        \"Backspace\": 0x000e,\r\n        \"Tab\": 0x000f,\r\n        \"KeyQ\": 0x0010,\r\n        \"KeyW\": 0x0011,\r\n        \"KeyE\": 0x0012,\r\n        \"KeyR\": 0x0013,\r\n        \"KeyT\": 0x0014,\r\n        \"KeyY\": 0x0015,\r\n        \"KeyU\": 0x0016,\r\n        \"KeyI\": 0x0017,\r\n        \"KeyO\": 0x0018,\r\n        \"KeyP\": 0x0019,\r\n        \"BracketLeft\": 0x001a,\r\n        \"BracketRight\": 0x001b,\r\n        \"Enter\": 0x001c,\r\n        \"ControlLeft\": 0x001d,\r\n        \"KeyA\": 0x001e,\r\n        \"KeyS\": 0x001f,\r\n        \"KeyD\": 0x0020,\r\n        \"KeyF\": 0x0021,\r\n        \"KeyG\": 0x0022,\r\n        \"KeyH\": 0x0023,\r\n        \"KeyJ\": 0x0024,\r\n        \"KeyK\": 0x0025,\r\n        \"KeyL\": 0x0026,\r\n        \"Semicolon\": 0x0027,\r\n        \"Quote\": 0x0028,\r\n        \"Backquote\": 0x0029,\r\n        \"ShiftLeft\": 0x002a,\r\n        \"Backslash\": 0x002b,\r\n        \"KeyZ\": 0x002c,\r\n        \"KeyX\": 0x002d,\r\n        \"KeyC\": 0x002e,\r\n        \"KeyV\": 0x002f,\r\n        \"KeyB\": 0x0030,\r\n        \"KeyN\": 0x0031,\r\n        \"KeyM\": 0x0032,\r\n        \"Comma\": 0x0033,\r\n        \"Period\": 0x0034,\r\n        \"Slash\": 0x0035,\r\n        \"ShiftRight\": 0x0036,\r\n        \"NumpadMultiply\": 0x0037,\r\n        \"AltLeft\": 0x0038,\r\n        \"Space\": 0x0039,\r\n        \"CapsLock\": 0x003a,\r\n        \"F1\": 0x003b,\r\n        \"F2\": 0x003c,\r\n        \"F3\": 0x003d,\r\n        \"F4\": 0x003e,\r\n        \"F5\": 0x003f,\r\n        \"F6\": 0x0040,\r\n        \"F7\": 0x0041,\r\n        \"F8\": 0x0042,\r\n        \"F9\": 0x0043,\r\n        \"F10\": 0x0044,\r\n        \"NumLock\": 0x0045,\r\n        \"ScrollLock\": 0x0046,\r\n        \"Numpad7\": 0x0047,\r\n        \"Numpad8\": 0x0048,\r\n        \"Numpad9\": 0x0049,\r\n        \"NumpadSubtract\": 0x004a,\r\n        \"Numpad4\": 0x004b,\r\n        \"Numpad5\": 0x004c,\r\n        \"Numpad6\": 0x004d,\r\n        \"NumpadAdd\": 0x004e,\r\n        \"Numpad1\": 0x004f,\r\n        \"Numpad2\": 0x0050,\r\n        \"Numpad3\": 0x0051,\r\n        \"Numpad0\": 0x0052,\r\n        \"NumpadDecimal\": 0x0053,\r\n        \"IntlBackslash\": 0x0056,\r\n        \"F11\": 0x0057,\r\n        \"F12\": 0x0058,\r\n\r\n        \"NumpadEnter\": 0xe01c,\r\n        \"ControlRight\": 0xe01d,\r\n        \"NumpadDivide\": 0xe035,\r\n        //\"PrintScreen\": 0x0063,\r\n        \"AltRight\": 0xe038,\r\n        \"Home\": 0xe04f,\r\n        \"ArrowUp\": 0xe048,\r\n        \"PageUp\": 0xe049,\r\n        \"ArrowLeft\": 0xe04b,\r\n        \"ArrowRight\": 0xe04d,\r\n        \"End\": 0xe04f,\r\n        \"ArrowDown\": 0xe050,\r\n        \"PageDown\": 0xe051,\r\n        \"Insert\": 0xe052,\r\n        \"Delete\": 0xe053,\r\n\r\n        \"OSLeft\": 0xe05b,\r\n        \"OSRight\": 0xe05c,\r\n        \"ContextMenu\": 0xe05d,\r\n    };\r\n\r\n    this.bus = bus;\r\n\r\n    this.destroy = function()\r\n    {\r\n        if(typeof window !== \"undefined\")\r\n        {\r\n            window.removeEventListener(\"keyup\", keyup_handler, false);\r\n            window.removeEventListener(\"keydown\", keydown_handler, false);\r\n            window.removeEventListener(\"blur\", blur_handler, false);\r\n        }\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        if(typeof window === \"undefined\")\r\n        {\r\n            return;\r\n        }\r\n        this.destroy();\r\n\r\n        window.addEventListener(\"keyup\", keyup_handler, false);\r\n        window.addEventListener(\"keydown\", keydown_handler, false);\r\n        window.addEventListener(\"blur\", blur_handler, false);\r\n    };\r\n    this.init();\r\n\r\n    this.simulate_press = function(code)\r\n    {\r\n        var ev = { keyCode: code };\r\n        handler(ev, true);\r\n        handler(ev, false);\r\n    };\r\n\r\n    this.simulate_char = function(chr)\r\n    {\r\n        var code = chr.charCodeAt(0);\r\n\r\n        if(code in asciimap)\r\n        {\r\n            this.simulate_press(asciimap[code]);\r\n        }\r\n        else if(code in asciimap_shift)\r\n        {\r\n            send_to_controller(SHIFT_SCAN_CODE);\r\n            this.simulate_press(asciimap_shift[code]);\r\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ascii -> keyCode not found: \", code, chr);\r\n        }\r\n    };\r\n\r\n    function may_handle(e)\r\n    {\r\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\r\n        {\r\n              // don't prevent opening chromium dev tools\r\n              // maybe add other important combinations here, too\r\n              return false;\r\n        }\r\n\r\n        if(!keyboard.emu_enabled)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if(e.target)\r\n        {\r\n            // className shouldn't be hardcoded here\r\n            return e.target.classList.contains(\"phone_keyboard\") ||\r\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function translate(e)\r\n    {\r\n        if(e.code !== undefined)\r\n        {\r\n            var code = codemap[e.code];\r\n\r\n            if(code !== undefined)\r\n            {\r\n                return code;\r\n            }\r\n        }\r\n\r\n        return charmap[e.keyCode];\r\n    }\r\n\r\n    function keyup_handler(e)\r\n    {\r\n        if(!e.altKey && keys_pressed[0x38])\r\n        {\r\n            // trigger ALT keyup manually - some browsers don't\r\n            // see issue #165\r\n            handle_code(0x38, false);\r\n        }\r\n        return handler(e, false);\r\n    }\r\n\r\n    function keydown_handler(e)\r\n    {\r\n        if(!e.altKey && keys_pressed[0x38])\r\n        {\r\n            // trigger ALT keyup manually - some browsers don't\r\n            // see issue #165\r\n            handle_code(0x38, false);\r\n        }\r\n        return handler(e, true);\r\n    }\r\n\r\n    function blur_handler(e)\r\n    {\r\n        // trigger keyup for all pressed keys\r\n        var keys = Object.keys(keys_pressed),\r\n            key;\r\n\r\n        for(var i = 0; i < keys.length; i++)\r\n        {\r\n            key = +keys[i];\r\n\r\n            if(keys_pressed[key])\r\n            {\r\n                handle_code(key, false);\r\n            }\r\n        }\r\n\r\n        keys_pressed = {};\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} keydown\r\n     */\r\n    function handler(e, keydown)\r\n    {\r\n        if(!keyboard.bus)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var code = translate(e);\r\n\r\n        if(!code)\r\n        {\r\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\r\n            return;\r\n        }\r\n\r\n        handle_code(code, keydown);\r\n\r\n        e.preventDefault && e.preventDefault();\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param {number} code\r\n     * @param {boolean} keydown\r\n     */\r\n    function handle_code(code, keydown)\r\n    {\r\n        if(keydown)\r\n        {\r\n            if(keys_pressed[code])\r\n            {\r\n                handle_code(code, false);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(!keys_pressed[code])\r\n            {\r\n                // stray keyup\r\n                return;\r\n            }\r\n        }\r\n\r\n        keys_pressed[code] = keydown;\r\n\r\n        if(!keydown)\r\n        {\r\n            code |= 0x80;\r\n        }\r\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\r\n\r\n        if(code > 0xFF)\r\n        {\r\n            // prefix\r\n            send_to_controller(code >> 8);\r\n            send_to_controller(code & 0xFF);\r\n        }\r\n        else\r\n        {\r\n            send_to_controller(code);\r\n        }\r\n    }\r\n\r\n    function send_to_controller(code)\r\n    {\r\n        keyboard.bus.send(\"keyboard-code\", code);\r\n    }\r\n}\r\n\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction MouseAdapter(bus, screen_container)\r\n{\r\n    /** @const */\r\n    var SPEED_FACTOR = 0.15;\r\n\r\n    var left_down = false,\r\n        right_down = false,\r\n        middle_down = false,\r\n\r\n        last_x = 0,\r\n        last_y = 0,\r\n\r\n        mouse = this;\r\n\r\n    // set by controller\r\n    this.enabled = false;\r\n\r\n    // set by emulator\r\n    this.emu_enabled = true;\r\n\r\n    this.bus = bus;\r\n\r\n    this.bus.register(\"mouse-enable\", function(enabled)\r\n    {\r\n        this.enabled = enabled;\r\n    }, this);\r\n\r\n    this.destroy = function()\r\n    {\r\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\r\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\r\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\r\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\r\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\r\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\r\n        window.removeEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\r\n        window.removeEventListener(\"mousewheel\", mousewheel_handler, false);\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        if(typeof window === \"undefined\")\r\n        {\r\n            return;\r\n        }\r\n        this.destroy();\r\n\r\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\r\n        window.addEventListener(\"touchend\", touch_end_handler, false);\r\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\r\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\r\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\r\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\r\n        window.addEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\r\n        window.addEventListener(\"mousewheel\", mousewheel_handler, false);\r\n    };\r\n    this.init();\r\n\r\n    function is_child(child, parent)\r\n    {\r\n        while(child.parentNode)\r\n        {\r\n            if(child === parent)\r\n            {\r\n                return true;\r\n            }\r\n            child = child.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function may_handle(e)\r\n    {\r\n        if(!mouse.enabled || !mouse.emu_enabled)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if(e.type === \"mousemove\" || e.type === \"touchmove\")\r\n        {\r\n            return true;\r\n        }\r\n\r\n        if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\r\n        {\r\n            var parent = screen_container || document.body;\r\n            return is_child(e.target, parent);\r\n        }\r\n\r\n        return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\r\n    }\r\n\r\n    function touch_start_handler(e)\r\n    {\r\n        if(may_handle(e))\r\n        {\r\n            var touches = e[\"changedTouches\"];\r\n\r\n            if(touches && touches.length)\r\n            {\r\n                var touch = touches[touches.length - 1];\r\n                last_x = touch.clientX;\r\n                last_y = touch.clientY;\r\n            }\r\n        }\r\n    }\r\n\r\n    function touch_end_handler(e)\r\n    {\r\n        if(left_down || middle_down || right_down)\r\n        {\r\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\r\n            left_down = middle_down = right_down = false;\r\n        }\r\n    }\r\n\r\n    function mousemove_handler(e)\r\n    {\r\n        if(!mouse.bus)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var delta_x = 0;\r\n        var delta_y = 0;\r\n\r\n        var touches = e[\"changedTouches\"];\r\n\r\n        if(touches)\r\n        {\r\n            if(touches.length)\r\n            {\r\n                var touch = touches[touches.length - 1];\r\n                delta_x = touch.clientX - last_x;\r\n                delta_y = touch.clientY - last_y;\r\n\r\n                last_x = touch.clientX;\r\n                last_y = touch.clientY;\r\n\r\n                e.preventDefault();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(typeof e[\"movementX\"] === \"number\")\r\n            {\r\n                delta_x = e[\"movementX\"];\r\n                delta_y = e[\"movementY\"];\r\n            }\r\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\r\n            {\r\n                delta_x = e[\"webkitMovementX\"];\r\n                delta_y = e[\"webkitMovementY\"];\r\n            }\r\n            else if(typeof e[\"mozMovementX\"] === \"number\")\r\n            {\r\n                delta_x = e[\"mozMovementX\"];\r\n                delta_y = e[\"mozMovementY\"];\r\n            }\r\n            else\r\n            {\r\n                // Fallback for other browsers?\r\n                delta_x = e.clientX - last_x;\r\n                delta_y = e.clientY - last_y;\r\n\r\n                last_x = e.clientX;\r\n                last_y = e.clientY;\r\n            }\r\n        }\r\n\r\n        if(SPEED_FACTOR !== 1)\r\n        {\r\n            delta_x = delta_x * SPEED_FACTOR;\r\n            delta_y = delta_y * SPEED_FACTOR;\r\n        }\r\n\r\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\r\n        //{\r\n        //    // Large mouse delta, drop?\r\n        //}\r\n\r\n        delta_y = -delta_y;\r\n\r\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\r\n\r\n        let absolute_x = e.pageX - screen_container.offsetLeft;\r\n        let absolute_y = e.pageY - screen_container.offsetTop;\r\n        mouse.bus.send(\"mouse-absolute\", [\r\n            absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\r\n    }\r\n\r\n    function mousedown_handler(e)\r\n    {\r\n        if(may_handle(e))\r\n        {\r\n            click_event(e, true);\r\n        }\r\n    }\r\n\r\n    function mouseup_handler(e)\r\n    {\r\n        if(may_handle(e))\r\n        {\r\n            click_event(e, false);\r\n        }\r\n    }\r\n\r\n    function click_event(e, down)\r\n    {\r\n        if(!mouse.bus)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(e.which === 1)\r\n        {\r\n            left_down = down;\r\n        }\r\n        else if(e.which === 2)\r\n        {\r\n            middle_down = down;\r\n        }\r\n        else if(e.which === 3)\r\n        {\r\n            right_down = down;\r\n        }\r\n        else\r\n        {\r\n            console.log(\"Unknown event.which: \" + e.which);\r\n        }\r\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\r\n    }\r\n\r\n    function mousewheel_handler(e)\r\n    {\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var delta_x = e.wheelDelta || -e.detail;\r\n        var delta_y = 0;\r\n\r\n        if(delta_x < 0)\r\n        {\r\n            delta_x = -1;\r\n        }\r\n        else if(delta_x > 0)\r\n        {\r\n            delta_x = 1;\r\n        }\r\n\r\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\r\n        e.preventDefault();\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar DAC_QUEUE_RESERVE = 0.2;\r\n\r\n/** @const */\r\nvar AUDIOBUFFER_MINIMUM_SAMPLING_RATE = 8000;\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n */\r\nfunction SpeakerAdapter(bus)\r\n{\r\n    if(typeof window === \"undefined\")\r\n    {\r\n        return;\r\n    }\r\n    if(!window.AudioContext && !window[\"webkitAudioContext\"])\r\n    {\r\n        console.warn(\"Web browser doesn't support Web Audio API\");\r\n        return;\r\n    }\r\n\r\n    var SpeakerDAC = window.AudioWorklet ? SpeakerWorkletDAC : SpeakerBufferSourceDAC;\r\n\r\n    /** @const */\r\n    this.bus = bus;\r\n\r\n    /** @const */\r\n    this.audio_context = new (window.AudioContext || window[\"webkitAudioContext\"])();\r\n\r\n    /** @const */\r\n    this.mixer = new SpeakerMixer(bus, this.audio_context);\r\n\r\n    /** @const */\r\n    this.pcspeaker = new PCSpeaker(bus, this.audio_context, this.mixer);\r\n\r\n    /** @const */\r\n    this.dac = new SpeakerDAC(bus, this.audio_context, this.mixer);\r\n\r\n    this.pcspeaker.start();\r\n\r\n    bus.register(\"emulator-stopped\", function()\r\n    {\r\n        this.audio_context.suspend();\r\n    }, this);\r\n\r\n    bus.register(\"emulator-started\", function()\r\n    {\r\n        this.audio_context.resume();\r\n    }, this);\r\n\r\n    bus.register(\"speaker-confirm-initialized\", function()\r\n    {\r\n        bus.send(\"speaker-has-initialized\");\r\n    }, this);\r\n    bus.send(\"speaker-has-initialized\");\r\n}\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n */\r\nfunction SpeakerMixer(bus, audio_context)\r\n{\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    this.sources = new Map();\r\n\r\n    // States\r\n\r\n    this.volume_both = 1;\r\n    this.volume_left = 1;\r\n    this.volume_right = 1;\r\n    this.gain_left = 1;\r\n    this.gain_right = 1;\r\n\r\n    // Nodes\r\n    // TODO: Find / calibrate / verify the filter frequencies\r\n\r\n    this.node_treble_left = this.audio_context.createBiquadFilter();\r\n    this.node_treble_right = this.audio_context.createBiquadFilter();\r\n    this.node_treble_left.type = \"highshelf\";\r\n    this.node_treble_right.type = \"highshelf\";\r\n    this.node_treble_left.frequency.setValueAtTime(2000, this.audio_context.currentTime);\r\n    this.node_treble_right.frequency.setValueAtTime(2000, this.audio_context.currentTime);\r\n\r\n    this.node_bass_left = this.audio_context.createBiquadFilter();\r\n    this.node_bass_right = this.audio_context.createBiquadFilter();\r\n    this.node_bass_left.type = \"lowshelf\";\r\n    this.node_bass_right.type = \"lowshelf\";\r\n    this.node_bass_left.frequency.setValueAtTime(200, this.audio_context.currentTime);\r\n    this.node_bass_right.frequency.setValueAtTime(200, this.audio_context.currentTime);\r\n\r\n    this.node_gain_left = this.audio_context.createGain();\r\n    this.node_gain_right = this.audio_context.createGain();\r\n\r\n    this.node_merger = this.audio_context.createChannelMerger(2);\r\n\r\n    // Graph\r\n\r\n    this.input_left = this.node_treble_left;\r\n    this.input_right = this.node_treble_right;\r\n\r\n    this.node_treble_left.connect(this.node_bass_left);\r\n    this.node_bass_left.connect(this.node_gain_left);\r\n    this.node_gain_left.connect(this.node_merger, 0, 0);\r\n\r\n    this.node_treble_right.connect(this.node_bass_right);\r\n    this.node_bass_right.connect(this.node_gain_right);\r\n    this.node_gain_right.connect(this.node_merger, 0, 1);\r\n\r\n    this.node_merger.connect(this.audio_context.destination);\r\n\r\n    // Interface\r\n\r\n    bus.register(\"mixer-connect\", function(data)\r\n    {\r\n        var source_id = data[0];\r\n        var channel = data[1];\r\n        this.connect_source(source_id, channel);\r\n    }, this);\r\n\r\n    bus.register(\"mixer-disconnect\", function(data)\r\n    {\r\n        var source_id = data[0];\r\n        var channel = data[1];\r\n        this.disconnect_source(source_id, channel);\r\n    }, this);\r\n\r\n    bus.register(\"mixer-volume\", function(data)\r\n    {\r\n        var source_id = data[0];\r\n        var channel = data[1];\r\n        var decibels = data[2];\r\n\r\n        var gain = Math.pow(10, decibels / 20);\r\n\r\n        var source = source_id === MIXER_SRC_MASTER ? this : this.sources.get(source_id);\r\n\r\n        if(source === undefined)\r\n        {\r\n            dbg_assert(false, \"Mixer set volume - cannot set volume for undefined source: \" + source_id);\r\n            return;\r\n        }\r\n\r\n        source.set_volume(gain, channel);\r\n    }, this);\r\n\r\n    bus.register(\"mixer-gain-left\", function(/** number */ decibels)\r\n    {\r\n        this.gain_left = Math.pow(10, decibels / 20);\r\n        this.update();\r\n    }, this);\r\n\r\n    bus.register(\"mixer-gain-right\", function(/** number */ decibels)\r\n    {\r\n        this.gain_right = Math.pow(10, decibels / 20);\r\n        this.update();\r\n    }, this);\r\n\r\n    function create_gain_handler(audio_node)\r\n    {\r\n        return function(decibels)\r\n        {\r\n            audio_node.gain.setValueAtTime(decibels, this.audio_context.currentTime);\r\n        };\r\n    }\r\n    bus.register(\"mixer-treble-left\", create_gain_handler(this.node_treble_left), this);\r\n    bus.register(\"mixer-treble-right\", create_gain_handler(this.node_treble_right), this);\r\n    bus.register(\"mixer-bass-left\", create_gain_handler(this.node_bass_left), this);\r\n    bus.register(\"mixer-bass-right\", create_gain_handler(this.node_bass_right), this);\r\n}\r\n\r\n/**\r\n * @param {!AudioNode} source_node\r\n * @param {number} source_id\r\n * @return {SpeakerMixerSource}\r\n */\r\nSpeakerMixer.prototype.add_source = function(source_node, source_id)\r\n{\r\n    var source = new SpeakerMixerSource(\r\n        this.audio_context,\r\n        source_node,\r\n        this.input_left,\r\n        this.input_right\r\n    );\r\n\r\n    dbg_assert(!this.sources.has(source_id), \"Mixer add source - overwritting source: \" + source_id);\r\n\r\n    this.sources.set(source_id, source);\r\n    return source;\r\n};\r\n\r\n/**\r\n * @param {number} source_id\r\n * @param {number=} channel\r\n */\r\nSpeakerMixer.prototype.connect_source = function(source_id, channel)\r\n{\r\n    var source = this.sources.get(source_id);\r\n\r\n    if(source === undefined)\r\n    {\r\n        dbg_assert(false, \"Mixer connect - cannot connect undefined source: \" + source_id);\r\n        return;\r\n    }\r\n\r\n    source.connect(channel);\r\n};\r\n\r\n/**\r\n * @param {number} source_id\r\n * @param {number=} channel\r\n */\r\nSpeakerMixer.prototype.disconnect_source = function(source_id, channel)\r\n{\r\n    var source = this.sources.get(source_id);\r\n\r\n    if(source === undefined)\r\n    {\r\n        dbg_assert(false, \"Mixer disconnect - cannot disconnect undefined source: \" + source_id);\r\n        return;\r\n    }\r\n\r\n    source.disconnect(channel);\r\n};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {number=} channel\r\n */\r\nSpeakerMixer.prototype.set_volume = function(value, channel)\r\n{\r\n    if(channel === undefined)\r\n    {\r\n        channel = MIXER_CHANNEL_BOTH;\r\n    }\r\n\r\n    switch(channel)\r\n    {\r\n        case MIXER_CHANNEL_LEFT:\r\n            this.volume_left = value;\r\n            break;\r\n        case MIXER_CHANNEL_RIGHT:\r\n            this.volume_right = value;\r\n            break;\r\n        case MIXER_CHANNEL_BOTH:\r\n            this.volume_both = value;\r\n            break;\r\n        default:\r\n            dbg_assert(false, \"Mixer set master volume - unknown channel: \" + channel);\r\n            return;\r\n    }\r\n\r\n    this.update();\r\n};\r\n\r\nSpeakerMixer.prototype.update = function()\r\n{\r\n    var net_gain_left = this.volume_both * this.volume_left * this.gain_left;\r\n    var net_gain_right = this.volume_both * this.volume_right * this.gain_right;\r\n\r\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\r\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!AudioContext} audio_context\r\n * @param {!AudioNode} source_node\r\n * @param {!AudioNode} destination_left\r\n * @param {!AudioNode} destination_right\r\n */\r\nfunction SpeakerMixerSource(audio_context, source_node, destination_left, destination_right)\r\n{\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    // States\r\n\r\n    this.connected_left = true;\r\n    this.connected_right = true;\r\n    this.gain_hidden = 1;\r\n    this.volume_both = 1;\r\n    this.volume_left = 1;\r\n    this.volume_right = 1;\r\n\r\n    // Nodes\r\n\r\n    this.node_splitter = audio_context.createChannelSplitter(2);\r\n    this.node_gain_left = audio_context.createGain();\r\n    this.node_gain_right = audio_context.createGain();\r\n\r\n    // Graph\r\n\r\n    source_node.connect(this.node_splitter);\r\n\r\n    this.node_splitter.connect(this.node_gain_left, 0);\r\n    this.node_gain_left.connect(destination_left);\r\n\r\n    this.node_splitter.connect(this.node_gain_right, 1);\r\n    this.node_gain_right.connect(destination_right);\r\n}\r\n\r\nSpeakerMixerSource.prototype.update = function()\r\n{\r\n    var net_gain_left = this.connected_left * this.gain_hidden * this.volume_both * this.volume_left;\r\n    var net_gain_right = this.connected_right * this.gain_hidden * this.volume_both * this.volume_right;\r\n\r\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\r\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\r\n};\r\n\r\n/** @param {number=} channel */\r\nSpeakerMixerSource.prototype.connect = function(channel)\r\n{\r\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\r\n    if(both || channel === MIXER_CHANNEL_LEFT)\r\n    {\r\n        this.connected_left = true;\r\n    }\r\n    if(both || channel === MIXER_CHANNEL_RIGHT)\r\n    {\r\n        this.connected_right = true;\r\n    }\r\n    this.update();\r\n};\r\n\r\n/** @param {number=} channel */\r\nSpeakerMixerSource.prototype.disconnect = function(channel)\r\n{\r\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\r\n    if(both || channel === MIXER_CHANNEL_LEFT)\r\n    {\r\n        this.connected_left = false;\r\n    }\r\n    if(both || channel === MIXER_CHANNEL_RIGHT)\r\n    {\r\n        this.connected_right = false;\r\n    }\r\n    this.update();\r\n};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {number=} channel\r\n */\r\nSpeakerMixerSource.prototype.set_volume = function(value, channel)\r\n{\r\n    if(channel === undefined)\r\n    {\r\n        channel = MIXER_CHANNEL_BOTH;\r\n    }\r\n\r\n    switch(channel)\r\n    {\r\n        case MIXER_CHANNEL_LEFT:\r\n            this.volume_left = value;\r\n            break;\r\n        case MIXER_CHANNEL_RIGHT:\r\n            this.volume_right = value;\r\n            break;\r\n        case MIXER_CHANNEL_BOTH:\r\n            this.volume_both = value;\r\n            break;\r\n        default:\r\n            dbg_assert(false, \"Mixer set volume - unknown channel: \" + channel);\r\n            return;\r\n    }\r\n\r\n    this.update();\r\n};\r\n\r\nSpeakerMixerSource.prototype.set_gain_hidden = function(value)\r\n{\r\n    this.gain_hidden = value;\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n * @param {!SpeakerMixer} mixer\r\n */\r\nfunction PCSpeaker(bus, audio_context, mixer)\r\n{\r\n    // Nodes\r\n\r\n    this.node_oscillator = audio_context.createOscillator();\r\n    this.node_oscillator.type = \"square\";\r\n    this.node_oscillator.frequency.setValueAtTime(440, audio_context.currentTime);\r\n\r\n    // Interface\r\n\r\n    this.mixer_connection = mixer.add_source(this.node_oscillator, MIXER_SRC_PCSPEAKER);\r\n    this.mixer_connection.disconnect();\r\n\r\n    bus.register(\"pcspeaker-enable\", function()\r\n    {\r\n        mixer.connect_source(MIXER_SRC_PCSPEAKER);\r\n    }, this);\r\n\r\n    bus.register(\"pcspeaker-disable\", function()\r\n    {\r\n        mixer.disconnect_source(MIXER_SRC_PCSPEAKER);\r\n    }, this);\r\n\r\n    bus.register(\"pcspeaker-update\", function(data)\r\n    {\r\n        var counter_mode = data[0];\r\n        var counter_reload = data[1];\r\n\r\n        var frequency = 0;\r\n        var beep_enabled = counter_mode === 3;\r\n\r\n        if(beep_enabled)\r\n        {\r\n            frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\r\n            frequency = Math.min(frequency, this.node_oscillator.frequency.maxValue);\r\n            frequency = Math.max(frequency, 0);\r\n        }\r\n\r\n        this.node_oscillator.frequency.setValueAtTime(frequency, audio_context.currentTime);\r\n    }, this);\r\n}\r\n\r\nPCSpeaker.prototype.start = function()\r\n{\r\n    this.node_oscillator.start();\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n * @param {!SpeakerMixer} mixer\r\n */\r\nfunction SpeakerWorkletDAC(bus, audio_context, mixer)\r\n{\r\n    /** @const */\r\n    this.bus = bus;\r\n\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    // State\r\n\r\n    this.enabled = false;\r\n    this.sampling_rate = 48000;\r\n\r\n    // Worklet\r\n\r\n    function worklet()\r\n    {\r\n        /** @const */\r\n        var RENDER_QUANTUM = 128;\r\n\r\n        /** @const */\r\n        var MINIMUM_BUFFER_SIZE = 2 * RENDER_QUANTUM;\r\n\r\n        /** @const */\r\n        var QUEUE_RESERVE = 1024;\r\n\r\n        function sinc(x)\r\n        {\r\n            if(x === 0) return 1;\r\n            x *= Math.PI;\r\n            return Math.sin(x) / x;\r\n        }\r\n\r\n        var EMPTY_BUFFER =\r\n        [\r\n            new Float32Array(MINIMUM_BUFFER_SIZE),\r\n            new Float32Array(MINIMUM_BUFFER_SIZE),\r\n        ];\r\n\r\n        /**\r\n         * @constructor\r\n         * @extends AudioWorkletProcessor\r\n         */\r\n        function DACProcessor()\r\n        {\r\n            var self = Reflect.construct(AudioWorkletProcessor, [], DACProcessor);\r\n\r\n            // Params\r\n\r\n            self.kernel_size = 3;\r\n\r\n            // States\r\n\r\n            // Buffers waiting for their turn to be consumed\r\n            self.queue_data = new Array(1024);\r\n            self.queue_start = 0;\r\n            self.queue_end = 0;\r\n            self.queue_length = 0;\r\n            self.queue_size = self.queue_data.length;\r\n            self.queued_samples = 0;\r\n\r\n            // Buffers being actively consumed\r\n            /** @type{Array<Float32Array>} */\r\n            self.source_buffer_previous = EMPTY_BUFFER;\r\n            /** @type{Array<Float32Array>} */\r\n            self.source_buffer_current = EMPTY_BUFFER;\r\n\r\n            // Ratio of alienland sample rate to homeland sample rate.\r\n            self.source_samples_per_destination = 1.0;\r\n\r\n            // Integer representing the position of the first destination sample\r\n            // for the current block, relative to source_buffer_current.\r\n            self.source_block_start = 0;\r\n\r\n            // Real number representing the position of the current destination\r\n            // sample relative to source_buffer_current, since source_block_start.\r\n            self.source_time = 0.0;\r\n\r\n            // Same as source_time but rounded down to an index.\r\n            self.source_offset = 0;\r\n\r\n            // Interface\r\n\r\n            self.port.onmessage = (event) =>\r\n            {\r\n                switch(event.data.type)\r\n                {\r\n                    case \"queue\":\r\n                        self.queue_push(event.data.value);\r\n                        break;\r\n                    case \"sampling-rate\":\r\n                        self.source_samples_per_destination = event.data.value / sampleRate;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            return self;\r\n        }\r\n\r\n        Reflect.setPrototypeOf(DACProcessor.prototype, AudioWorkletProcessor.prototype);\r\n        Reflect.setPrototypeOf(DACProcessor, AudioWorkletProcessor);\r\n\r\n        DACProcessor.prototype[\"process\"] =\r\n        DACProcessor.prototype.process = function(inputs, outputs, parameters)\r\n        {\r\n            for(var i = 0; i < outputs[0][0].length; i++)\r\n            {\r\n                // Lanczos resampling\r\n                var sum0 = 0;\r\n                var sum1 = 0;\r\n\r\n                var start = this.source_offset - this.kernel_size + 1;\r\n                var end = this.source_offset + this.kernel_size;\r\n\r\n                for(var j = start; j <= end; j++)\r\n                {\r\n                    var convolute_index = this.source_block_start + j;\r\n                    sum0 += this.get_sample(convolute_index, 0) * this.kernel(this.source_time - j);\r\n                    sum1 += this.get_sample(convolute_index, 1) * this.kernel(this.source_time - j);\r\n                }\r\n\r\n                if(isNaN(sum0) || isNaN(sum1))\r\n                {\r\n                    // NaN values cause entire audio graph to cease functioning.\r\n                    sum0 = sum1 = 0;\r\n                    this.dbg_log(\"ERROR: NaN values! Ignoring for now.\");\r\n                }\r\n\r\n                outputs[0][0][i] = sum0;\r\n                outputs[0][1][i] = sum1;\r\n\r\n                this.source_time += this.source_samples_per_destination;\r\n                this.source_offset = Math.floor(this.source_time);\r\n            }\r\n\r\n            // +2 to safeguard against rounding variations\r\n            var samples_needed_per_block = this.source_offset;\r\n            samples_needed_per_block += this.kernel_size + 2;\r\n\r\n            this.source_time -= this.source_offset;\r\n            this.source_block_start += this.source_offset;\r\n            this.source_offset = 0;\r\n\r\n            // Note: This needs to be done after source_block_start is updated.\r\n            this.ensure_enough_data(samples_needed_per_block);\r\n\r\n            return true;\r\n        };\r\n\r\n        DACProcessor.prototype.kernel = function(x)\r\n        {\r\n            return sinc(x) * sinc(x / this.kernel_size);\r\n        };\r\n\r\n        DACProcessor.prototype.get_sample = function(index, channel)\r\n        {\r\n            if(index < 0)\r\n            {\r\n                // -ve index represents previous buffer\r\n                //          <-------|\r\n                // [Previous buffer][Current buffer]\r\n                index += this.source_buffer_previous[0].length;\r\n                return this.source_buffer_previous[channel][index];\r\n            }\r\n            else\r\n            {\r\n                return this.source_buffer_current[channel][index];\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.ensure_enough_data = function(needed)\r\n        {\r\n            var current_length = this.source_buffer_current[0].length;\r\n            var remaining = current_length - this.source_block_start;\r\n\r\n            if(remaining < needed)\r\n            {\r\n                this.prepare_next_buffer();\r\n                this.source_block_start -= current_length;\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.prepare_next_buffer = function()\r\n        {\r\n            if(this.queued_samples < MINIMUM_BUFFER_SIZE && this.queue_length)\r\n            {\r\n                this.dbg_log(\"Not enough samples - should not happen during midway of playback\");\r\n            }\r\n\r\n            this.source_buffer_previous = this.source_buffer_current;\r\n            this.source_buffer_current = this.queue_shift();\r\n\r\n            var sample_count = this.source_buffer_current[0].length;\r\n\r\n            if(sample_count < MINIMUM_BUFFER_SIZE)\r\n            {\r\n                // Unfortunately, this single buffer is too small :(\r\n\r\n                var queue_pos = this.queue_start;\r\n                var buffer_count = 0;\r\n\r\n                // Figure out how many small buffers to combine.\r\n                while(sample_count < MINIMUM_BUFFER_SIZE && buffer_count < this.queue_length)\r\n                {\r\n                    sample_count += this.queue_data[queue_pos][0].length;\r\n\r\n                    queue_pos = queue_pos + 1 & this.queue_size - 1;\r\n                    buffer_count++;\r\n                }\r\n\r\n                // Note: if not enough buffers, this will be end-padded with zeros:\r\n                var new_big_buffer_size = Math.max(sample_count, MINIMUM_BUFFER_SIZE);\r\n                var new_big_buffer =\r\n                [\r\n                    new Float32Array(new_big_buffer_size),\r\n                    new Float32Array(new_big_buffer_size),\r\n                ];\r\n\r\n                // Copy the first, already-shifted, small buffer into the new buffer.\r\n                new_big_buffer[0].set(this.source_buffer_current[0]);\r\n                new_big_buffer[1].set(this.source_buffer_current[1]);\r\n                var new_big_buffer_pos = this.source_buffer_current[0].length;\r\n\r\n                // Copy the rest.\r\n                for(var i = 0; i < buffer_count; i++)\r\n                {\r\n                    var small_buffer = this.queue_shift();\r\n                    new_big_buffer[0].set(small_buffer[0], new_big_buffer_pos);\r\n                    new_big_buffer[1].set(small_buffer[1], new_big_buffer_pos);\r\n                    new_big_buffer_pos += small_buffer[0].length;\r\n                }\r\n\r\n                // Pretend that everything's just fine.\r\n                this.source_buffer_current = new_big_buffer;\r\n            }\r\n\r\n            this.pump();\r\n        };\r\n\r\n        DACProcessor.prototype.pump = function()\r\n        {\r\n            if(this.queued_samples / this.source_samples_per_destination < QUEUE_RESERVE)\r\n            {\r\n                this.port.postMessage(\r\n                {\r\n                    type: \"pump\",\r\n                });\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.queue_push = function(item)\r\n        {\r\n            if(this.queue_length < this.queue_size)\r\n            {\r\n                this.queue_data[this.queue_end] = item;\r\n                this.queue_end = this.queue_end + 1 & this.queue_size - 1;\r\n                this.queue_length++;\r\n\r\n                this.queued_samples += item[0].length;\r\n\r\n                this.pump();\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.queue_shift = function()\r\n        {\r\n            if(!this.queue_length)\r\n            {\r\n                return EMPTY_BUFFER;\r\n            }\r\n\r\n            var item = this.queue_data[this.queue_start];\r\n\r\n            this.queue_data[this.queue_start] = null;\r\n            this.queue_start = this.queue_start + 1 & this.queue_size - 1;\r\n            this.queue_length--;\r\n\r\n            this.queued_samples -= item[0].length;\r\n\r\n            return item;\r\n        };\r\n\r\n        DACProcessor.prototype.dbg_log = function(message)\r\n        {\r\n            if(DEBUG)\r\n            {\r\n                this.port.postMessage(\r\n                {\r\n                    type: \"debug-log\",\r\n                    value: message,\r\n                });\r\n            }\r\n        };\r\n\r\n        registerProcessor(\"dac-processor\", DACProcessor);\r\n    }\r\n\r\n    var worklet_string = worklet.toString();\r\n\r\n    var worklet_code_start = worklet_string.indexOf(\"{\") + 1;\r\n    var worklet_code_end = worklet_string.lastIndexOf(\"}\");\r\n    var worklet_code = worklet_string.substring(worklet_code_start, worklet_code_end);\r\n\r\n    if(DEBUG)\r\n    {\r\n        worklet_code = \"var DEBUG = true;\\n\" + worklet_code;\r\n    }\r\n\r\n    var worklet_blob = new Blob([worklet_code], { type: \"application/javascript\" });\r\n    var worklet_url = URL.createObjectURL(worklet_blob);\r\n\r\n    /** @type {AudioWorkletNode} */\r\n    this.node_processor = null;\r\n\r\n    // Placeholder pass-through node to connect to, when worklet node is not ready yet.\r\n    this.node_output = this.audio_context.createGain();\r\n\r\n    this.audio_context\r\n        .audioWorklet\r\n        .addModule(worklet_url)\r\n        .then(() =>\r\n    {\r\n        URL.revokeObjectURL(worklet_url);\r\n\r\n        this.node_processor = new AudioWorkletNode(this.audio_context, \"dac-processor\",\r\n        {\r\n            \"numberOfInputs\": 0,\r\n            \"numberOfOutputs\": 1,\r\n            \"outputChannelCount\": [2],\r\n        });\r\n\r\n        this.node_processor.port.postMessage(\r\n        {\r\n            type: \"sampling-rate\",\r\n            value: this.sampling_rate,\r\n        });\r\n\r\n        this.node_processor.port.onmessage = (event) =>\r\n        {\r\n            switch(event.data.type)\r\n            {\r\n                case \"pump\":\r\n                    this.pump();\r\n                    break;\r\n                case \"debug-log\":\r\n                    dbg_log(\"SpeakerWorkletDAC - Worklet: \" + event.data.value);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        // Graph\r\n\r\n        this.node_processor.connect(this.node_output);\r\n    });\r\n\r\n    // Interface\r\n\r\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\r\n    this.mixer_connection.set_gain_hidden(3);\r\n\r\n    bus.register(\"dac-send-data\", function(data)\r\n    {\r\n        this.queue(data);\r\n    }, this);\r\n\r\n    bus.register(\"dac-enable\", function(enabled)\r\n    {\r\n        this.enabled = true;\r\n    }, this);\r\n\r\n    bus.register(\"dac-disable\", function()\r\n    {\r\n        this.enabled = false;\r\n    }, this);\r\n\r\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\r\n    {\r\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\r\n        this.sampling_rate = rate;\r\n\r\n        if(!this.node_processor)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.node_processor.port.postMessage(\r\n        {\r\n            type: \"sampling-rate\",\r\n            value: rate,\r\n        });\r\n    }, this);\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\r\n    }\r\n}\r\n\r\nSpeakerWorkletDAC.prototype.queue = function(data)\r\n{\r\n    if(!this.node_processor)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debugger.push_queued_data(data);\r\n    }\r\n\r\n    this.node_processor.port.postMessage(\r\n    {\r\n        type: \"queue\",\r\n        value: data,\r\n    }, [data[0].buffer, data[1].buffer]);\r\n};\r\n\r\nSpeakerWorkletDAC.prototype.pump = function()\r\n{\r\n    if(!this.enabled)\r\n    {\r\n        return;\r\n    }\r\n    this.bus.send(\"dac-request-data\");\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n * @param {!SpeakerMixer} mixer\r\n */\r\nfunction SpeakerBufferSourceDAC(bus, audio_context, mixer)\r\n{\r\n    /** @const */\r\n    this.bus = bus;\r\n\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    // States\r\n\r\n    this.enabled = false;\r\n    this.sampling_rate = 22050;\r\n    this.buffered_time = 0;\r\n    this.rate_ratio = 1;\r\n\r\n    // Nodes\r\n\r\n    this.node_lowpass = this.audio_context.createBiquadFilter();\r\n    this.node_lowpass.type = \"lowpass\";\r\n\r\n    // Interface\r\n\r\n    this.node_output = this.node_lowpass;\r\n\r\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\r\n    this.mixer_connection.set_gain_hidden(3);\r\n\r\n    bus.register(\"dac-send-data\", function(data)\r\n    {\r\n        this.queue(data);\r\n    }, this);\r\n\r\n    bus.register(\"dac-enable\", function(enabled)\r\n    {\r\n        this.enabled = true;\r\n        this.pump();\r\n    }, this);\r\n\r\n    bus.register(\"dac-disable\", function()\r\n    {\r\n        this.enabled = false;\r\n    }, this);\r\n\r\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\r\n    {\r\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\r\n        this.sampling_rate = rate;\r\n        this.rate_ratio = Math.ceil(AUDIOBUFFER_MINIMUM_SAMPLING_RATE / rate);\r\n        this.node_lowpass.frequency.setValueAtTime(rate / 2, this.audio_context.currentTime);\r\n    }, this);\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\r\n    }\r\n}\r\n\r\nSpeakerBufferSourceDAC.prototype.queue = function(data)\r\n{\r\n    if(DEBUG)\r\n    {\r\n        this.debugger.push_queued_data(data);\r\n    }\r\n\r\n    var sample_count = data[0].length;\r\n    var block_duration = sample_count / this.sampling_rate;\r\n\r\n    var buffer;\r\n    if(this.rate_ratio > 1)\r\n    {\r\n        var new_sample_count = sample_count * this.rate_ratio;\r\n        var new_sampling_rate = this.sampling_rate * this.rate_ratio;\r\n        buffer = this.audio_context.createBuffer(2, new_sample_count, new_sampling_rate);\r\n        var buffer_data0 = buffer.getChannelData(0);\r\n        var buffer_data1 = buffer.getChannelData(1);\r\n\r\n        var buffer_index = 0;\r\n        for(var i = 0; i < sample_count; i++)\r\n        {\r\n            for(var j = 0; j < this.rate_ratio; j++, buffer_index++)\r\n            {\r\n                buffer_data0[buffer_index] = data[0][i];\r\n                buffer_data1[buffer_index] = data[1][i];\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // Allocating new AudioBuffer every block\r\n        // - Memory profiles show insignificant improvements if recycling old buffers.\r\n        buffer = this.audio_context.createBuffer(2, sample_count, this.sampling_rate);\r\n        if(buffer.copyToChannel)\r\n        {\r\n            buffer.copyToChannel(data[0], 0);\r\n            buffer.copyToChannel(data[1], 1);\r\n        }\r\n        else\r\n        {\r\n            // Safari doesn't support copyToChannel yet. See #286\r\n            buffer.getChannelData(0).set(data[0]);\r\n            buffer.getChannelData(1).set(data[1]);\r\n        }\r\n    }\r\n\r\n    var source = this.audio_context.createBufferSource();\r\n    source.buffer = buffer;\r\n    source.connect(this.node_lowpass);\r\n    source.addEventListener(\"ended\", this.pump.bind(this));\r\n\r\n    var current_time = this.audio_context.currentTime;\r\n\r\n    if(this.buffered_time < current_time)\r\n    {\r\n        dbg_log(\"Speaker DAC - Creating/Recreating reserve - shouldn't occur frequently during playback\");\r\n\r\n        // Schedule pump() to queue evenly, starting from current time\r\n        this.buffered_time = current_time;\r\n        var target_silence_duration = DAC_QUEUE_RESERVE - block_duration;\r\n        var current_silence_duration = 0;\r\n        while(current_silence_duration <= target_silence_duration)\r\n        {\r\n            current_silence_duration += block_duration;\r\n            this.buffered_time += block_duration;\r\n            setTimeout(() => this.pump(), current_silence_duration * 1000);\r\n        }\r\n    }\r\n\r\n    source.start(this.buffered_time);\r\n    this.buffered_time += block_duration;\r\n\r\n    // Chase the schedule - ensure reserve is full\r\n    setTimeout(() => this.pump(), 0);\r\n};\r\n\r\nSpeakerBufferSourceDAC.prototype.pump = function()\r\n{\r\n    if(!this.enabled)\r\n    {\r\n        return;\r\n    }\r\n    if(this.buffered_time - this.audio_context.currentTime > DAC_QUEUE_RESERVE)\r\n    {\r\n        return;\r\n    }\r\n    this.bus.send(\"dac-request-data\");\r\n};\r\n\r\n/**\r\n * @constructor\r\n */\r\nfunction SpeakerDACDebugger(audio_context, source_node)\r\n{\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    /** @const */\r\n    this.node_source = source_node;\r\n\r\n    this.node_processor = null;\r\n\r\n    this.node_gain = this.audio_context.createGain();\r\n    this.node_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\r\n\r\n    this.node_gain.connect(this.audio_context.destination);\r\n\r\n    this.is_active = false;\r\n    this.queued_history = [];\r\n    this.output_history = [];\r\n    this.queued = [[], []];\r\n    this.output = [[], []];\r\n}\r\n\r\n/** @suppress {deprecated} */\r\nSpeakerDACDebugger.prototype.start = function(duration_ms)\r\n{\r\n    this.is_active = true;\r\n    this.queued = [[], []];\r\n    this.output = [[], []];\r\n    this.queued_history.push(this.queued);\r\n    this.output_history.push(this.output);\r\n\r\n    this.node_processor = this.audio_context.createScriptProcessor(1024, 2, 2);\r\n    this.node_processor.onaudioprocess = (event) =>\r\n    {\r\n        this.output[0].push(event.inputBuffer.getChannelData(0).slice());\r\n        this.output[1].push(event.inputBuffer.getChannelData(1).slice());\r\n    };\r\n\r\n    this.node_source.connect(this.node_processor);\r\n    this.node_processor.connect(this.node_gain);\r\n\r\n    setTimeout(() =>\r\n    {\r\n        this.stop();\r\n    }, duration_ms);\r\n};\r\n\r\nSpeakerDACDebugger.prototype.stop = function()\r\n{\r\n    this.is_active = false;\r\n    this.node_source.disconnect(this.node_processor);\r\n    this.node_processor.disconnect();\r\n    this.node_processor = null;\r\n};\r\n\r\nSpeakerDACDebugger.prototype.push_queued_data = function(data)\r\n{\r\n    if(this.is_active)\r\n    {\r\n        this.queued[0].push(data[0].slice());\r\n        this.queued[1].push(data[1].slice());\r\n    }\r\n};\r\n\r\n// Useful for Audacity imports\r\nSpeakerDACDebugger.prototype.download_txt = function(history_id, channel)\r\n{\r\n    var txt = this.output_history[history_id][channel]\r\n        .map((v) => v.join(\" \"))\r\n        .join(\" \");\r\n\r\n    dump_file(txt, \"dacdata.txt\");\r\n};\r\n\r\n// Useful for general plotting\r\nSpeakerDACDebugger.prototype.download_csv = function(history_id)\r\n{\r\n    var buffers = this.output_history[history_id];\r\n    var csv_rows = [];\r\n    for(var buffer_id = 0; buffer_id < buffers[0].length; buffer_id++)\r\n    {\r\n        for(var i = 0; i < buffers[0][buffer_id].length; i++)\r\n        {\r\n            csv_rows.push(`${buffers[0][buffer_id][i]},${buffers[1][buffer_id][i]}`);\r\n        }\r\n    }\r\n    dump_file(csv_rows.join(\"\\n\"), \"dacdata.csv\");\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction SerialAdapter(element, bus)\r\n{\r\n    var serial = this;\r\n\r\n    this.enabled = true;\r\n    this.bus = bus;\r\n    this.text = \"\";\r\n    this.text_new_line = false;\r\n\r\n    this.last_update = 0;\r\n\r\n\r\n    this.bus.register(\"serial0-output-char\", function(chr)\r\n    {\r\n        this.show_char(chr);\r\n    }, this);\r\n\r\n\r\n    this.destroy = function()\r\n    {\r\n        element.removeEventListener(\"keypress\", keypress_handler, false);\r\n        element.removeEventListener(\"keydown\", keydown_handler, false);\r\n        element.removeEventListener(\"paste\", paste_handler, false);\r\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        this.destroy();\r\n\r\n        element.addEventListener(\"keypress\", keypress_handler, false);\r\n        element.addEventListener(\"keydown\", keydown_handler, false);\r\n        element.addEventListener(\"paste\", paste_handler, false);\r\n        window.addEventListener(\"mousedown\", window_click_handler, false);\r\n    };\r\n    this.init();\r\n\r\n\r\n    this.show_char = function(chr)\r\n    {\r\n        if(chr === \"\\x08\")\r\n        {\r\n            this.text = this.text.slice(0, -1);\r\n            this.update();\r\n        }\r\n        else if(chr === \"\\r\")\r\n        {\r\n            // do nothing\r\n        }\r\n        else\r\n        {\r\n            this.text += chr;\r\n\r\n            if(chr === \"\\n\")\r\n            {\r\n                this.text_new_line = true;\r\n            }\r\n\r\n            this.update();\r\n        }\r\n    };\r\n\r\n    this.update = function()\r\n    {\r\n        var now = Date.now();\r\n        var delta = now - this.last_update;\r\n\r\n        if(delta < 16)\r\n        {\r\n            if(this.update_timer === undefined)\r\n            {\r\n                this.update_timer = setTimeout(() => {\r\n                    this.update_timer = undefined;\r\n                    var now = Date.now();\r\n                    dbg_assert(now - this.last_update >= 16);\r\n                    this.last_update = now;\r\n                    this.render();\r\n                }, 16 - delta);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(this.update_timer !== undefined)\r\n            {\r\n                clearTimeout(this.update_timer);\r\n                this.update_timer = undefined;\r\n            }\r\n\r\n            this.last_update = now;\r\n            this.render();\r\n        }\r\n    };\r\n\r\n    this.render = function()\r\n    {\r\n        element.value = this.text;\r\n\r\n        if(this.text_new_line)\r\n        {\r\n            this.text_new_line = false;\r\n            element.scrollTop = 1e9;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {number} chr_code\r\n     */\r\n    this.send_char = function(chr_code)\r\n    {\r\n        if(serial.bus)\r\n        {\r\n            serial.bus.send(\"serial0-input\", chr_code);\r\n        }\r\n    };\r\n\r\n    function may_handle(e)\r\n    {\r\n        if(!serial.enabled)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // Something here?\r\n\r\n        return true;\r\n    }\r\n\r\n    function keypress_handler(e)\r\n    {\r\n        if(!serial.bus)\r\n        {\r\n            return;\r\n        }\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var chr = e.which;\r\n\r\n        serial.send_char(chr);\r\n        e.preventDefault();\r\n    }\r\n\r\n    function keydown_handler(e)\r\n    {\r\n        var chr = e.which;\r\n\r\n        if(chr === 8)\r\n        {\r\n            // supress backspace\r\n            serial.send_char(127);\r\n            e.preventDefault();\r\n        }\r\n        else if(chr === 9)\r\n        {\r\n            // tab\r\n            serial.send_char(9);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    function paste_handler(e)\r\n    {\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var data = e.clipboardData.getData(\"text/plain\");\r\n\r\n        for(var i = 0; i < data.length; i++)\r\n        {\r\n            serial.send_char(data.charCodeAt(i));\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    function window_click_handler(e)\r\n    {\r\n        if(e.target !== element)\r\n        {\r\n            element.blur();\r\n        }\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * An ethernet-through-websocket adapter, to be used with\r\n *     https://github.com/benjamincburns/websockproxy\r\n *\r\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\r\n *\r\n * @constructor\r\n *\r\n * @param {string} url\r\n * @param {BusConnector} bus\r\n */\r\nfunction NetworkAdapter(url, bus)\r\n{\r\n    this.send_data = function(x) {};\r\n\r\n    this.bus = bus;\r\n    this.socket = undefined;\r\n\r\n    // TODO: circular buffer?\r\n    this.send_queue = [];\r\n    this.url = url;\r\n\r\n    this.reconnect_interval = 10000;\r\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\r\n    this.send_queue_limit = 64;\r\n\r\n    this.bus.register(\"net0-send\", function(data)\r\n    {\r\n        this.send(data);\r\n    }, this);\r\n}\r\n\r\nNetworkAdapter.prototype.handle_message = function(e)\r\n{\r\n    if(this.bus)\r\n    {\r\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\r\n    }\r\n};\r\n\r\nNetworkAdapter.prototype.handle_close = function(e)\r\n{\r\n    //console.log(\"onclose\", e);\r\n\r\n    this.connect();\r\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\r\n};\r\n\r\nNetworkAdapter.prototype.handle_open = function(e)\r\n{\r\n    //console.log(\"open\", e);\r\n\r\n    for(var i = 0; i < this.send_queue.length; i++)\r\n    {\r\n        this.send(this.send_queue[i]);\r\n    }\r\n\r\n    this.send_queue = [];\r\n};\r\n\r\nNetworkAdapter.prototype.handle_error = function(e)\r\n{\r\n    //console.log(\"onerror\", e);\r\n};\r\n\r\nNetworkAdapter.prototype.destroy = function()\r\n{\r\n    if(this.socket)\r\n    {\r\n        this.socket.close();\r\n    }\r\n};\r\n\r\nNetworkAdapter.prototype.connect = function()\r\n{\r\n    if(this.socket)\r\n    {\r\n        var state = this.socket.readyState;\r\n\r\n        if(state === 0 || state === 1)\r\n        {\r\n            // already or almost there\r\n            return;\r\n        }\r\n    }\r\n\r\n    var now = Date.now();\r\n\r\n    if(this.last_connect_attempt + this.reconnect_interval > now)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.last_connect_attempt = Date.now();\r\n\r\n    try\r\n    {\r\n        this.socket = new WebSocket(this.url);\r\n    }\r\n    catch(e)\r\n    {\r\n        this.handle_close(undefined);\r\n        return;\r\n    }\r\n\r\n    this.socket.binaryType = \"arraybuffer\";\r\n\r\n    this.socket.onopen = this.handle_open.bind(this);;\r\n    this.socket.onmessage = this.handle_message.bind(this);\r\n    this.socket.onclose = this.handle_close.bind(this);\r\n    this.socket.onerror = this.handle_error.bind(this);\r\n};\r\n\r\nNetworkAdapter.prototype.send = function(data)\r\n{\r\n    //console.log(\"send\", data);\r\n\r\n    if(!this.socket || this.socket.readyState !== 1)\r\n    {\r\n        this.send_queue.push(data);\r\n\r\n        if(this.send_queue.length > 2 * this.send_queue_limit)\r\n        {\r\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\r\n        }\r\n\r\n        this.connect();\r\n    }\r\n    else\r\n    {\r\n        this.socket.send(data);\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar ASYNC_SAFE = false;\r\n\r\n(function()\r\n{\r\n    if(typeof XMLHttpRequest === \"undefined\")\r\n    {\r\n        v86util.load_file = load_file_nodejs;\r\n    }\r\n    else\r\n    {\r\n        v86util.load_file = load_file;\r\n    }\r\n\r\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\r\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\r\n    v86util.SyncFileBuffer = SyncFileBuffer;\r\n\r\n    /**\r\n     * @param {string} filename\r\n     * @param {Object} options\r\n     */\r\n    function load_file(filename, options)\r\n    {\r\n        var http = new XMLHttpRequest();\r\n\r\n        http.open(options.method || \"get\", filename, true);\r\n\r\n        if(!options.as_text)\r\n        {\r\n            http.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        if(options.headers)\r\n        {\r\n            var header_names = Object.keys(options.headers);\r\n\r\n            for(var i = 0; i < header_names.length; i++)\r\n            {\r\n                var name = header_names[i];\r\n                http.setRequestHeader(name, options.headers[name]);\r\n            }\r\n        }\r\n\r\n        if(options.range)\r\n        {\r\n            let start = options.range.start;\r\n            let end = start + options.range.length - 1;\r\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\r\n        }\r\n\r\n        http.onload = function(e)\r\n        {\r\n            if(http.readyState === 4)\r\n            {\r\n                if(http.status !== 200 && http.status !== 206)\r\n                {\r\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\r\n                }\r\n                else if(http.response)\r\n                {\r\n                    options.done && options.done(http.response, http);\r\n                }\r\n            }\r\n        };\r\n\r\n        if(options.progress)\r\n        {\r\n            http.onprogress = function(e)\r\n            {\r\n                options.progress(e);\r\n            };\r\n        }\r\n\r\n        http.send(null);\r\n    }\r\n\r\n    function load_file_nodejs(filename, options)\r\n    {\r\n        let fs = require(\"fs\");\r\n\r\n        if(options.range)\r\n        {\r\n            dbg_assert(!options.as_text);\r\n\r\n            fs[\"open\"](filename, \"r\", (err, fd) =>\r\n            {\r\n                if(err) throw err;\r\n\r\n                let length = options.range.length;\r\n                var buffer = new global[\"Buffer\"](length);\r\n\r\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\r\n                {\r\n                    if(err) throw err;\r\n\r\n                    dbg_assert(bytes_read === length);\r\n                    options.done && options.done(new Uint8Array(buffer));\r\n\r\n                    fs[\"close\"](fd, (err) => {\r\n                        if(err) throw err;\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        else\r\n        {\r\n            var o = {\r\n                encoding: options.as_text ? \"utf-8\" : null,\r\n            };\r\n\r\n            fs[\"readFile\"](filename, o, function(err, data)\r\n            {\r\n                if(err)\r\n                {\r\n                    console.log(\"Could not read file:\", filename, err);\r\n                }\r\n                else\r\n                {\r\n                    var result = data;\r\n\r\n                    if(!options.as_text)\r\n                    {\r\n                        result = new Uint8Array(result).buffer;\r\n                    }\r\n\r\n                    options.done(result);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if(typeof XMLHttpRequest === \"undefined\")\r\n    {\r\n        var determine_size = function(path, cb)\r\n        {\r\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\r\n            {\r\n                if(err)\r\n                {\r\n                    cb(err);\r\n                }\r\n                else\r\n                {\r\n                    cb(null, stats.size);\r\n                }\r\n            });\r\n        };\r\n    }\r\n    else\r\n    {\r\n        var determine_size = function(url, cb)\r\n        {\r\n            v86util.load_file(url, {\r\n                done: (buffer, http) =>\r\n                {\r\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\r\n                    var match = header.match(/\\/(\\d+)\\s*$/);\r\n\r\n                    if(match)\r\n                    {\r\n                        cb(null, +match[1]);\r\n                    }\r\n                    else\r\n                    {\r\n                        cb({ header });\r\n                    }\r\n                },\r\n                headers: {\r\n                    Range: \"bytes=0-0\",\r\n\r\n                    //\"Accept-Encoding\": \"\",\r\n\r\n                    // Added by Chromium, but can cause the whole file to be sent\r\n                    // Settings this to empty also causes problems and Chromium\r\n                    // doesn't seem to create this header any more\r\n                    //\"If-Range\": \"\",\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\r\n     * using the `Range: bytes=...` header\r\n     *\r\n     * @constructor\r\n     * @param {string} filename Name of the file to download\r\n     * @param {number|undefined} size\r\n     */\r\n    function AsyncXHRBuffer(filename, size)\r\n    {\r\n        this.filename = filename;\r\n\r\n        /** @const */\r\n        this.block_size = 256;\r\n        this.byteLength = size;\r\n\r\n        this.loaded_blocks = {};\r\n\r\n        this.onload = undefined;\r\n        this.onprogress = undefined;\r\n    }\r\n\r\n    AsyncXHRBuffer.prototype.load = function()\r\n    {\r\n        if(this.byteLength !== undefined)\r\n        {\r\n            this.onload && this.onload({});\r\n            return;\r\n        }\r\n\r\n        // Determine the size using a request\r\n\r\n        determine_size(this.filename, (error, size) =>\r\n        {\r\n            if(error)\r\n            {\r\n                console.assert(false,\r\n                    \"Cannot use: \" + this.filename + \". \" +\r\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(size >= 0);\r\n                this.byteLength = size;\r\n                this.onload && this.onload({});\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\r\n    {\r\n        var number_of_blocks = len / this.block_size;\r\n        var block_index = offset / this.block_size;\r\n\r\n        for(var i = 0; i < number_of_blocks; i++)\r\n        {\r\n            var block = this.loaded_blocks[block_index + i];\r\n\r\n            if(!block)\r\n            {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(number_of_blocks === 1)\r\n        {\r\n            return this.loaded_blocks[block_index];\r\n        }\r\n        else\r\n        {\r\n            var result = new Uint8Array(len);\r\n            for(var i = 0; i < number_of_blocks; i++)\r\n            {\r\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\r\n    {\r\n        console.assert(offset + len <= this.byteLength);\r\n        console.assert(offset % this.block_size === 0);\r\n        console.assert(len % this.block_size === 0);\r\n        console.assert(len);\r\n\r\n        var block = this.get_from_cache(offset, len, fn);\r\n        if(block)\r\n        {\r\n            if(ASYNC_SAFE)\r\n            {\r\n                setTimeout(fn.bind(this, block), 0);\r\n            }\r\n            else\r\n            {\r\n                fn(block);\r\n            }\r\n            return;\r\n        }\r\n\r\n        v86util.load_file(this.filename, {\r\n            done: function done(buffer)\r\n            {\r\n                var block = new Uint8Array(buffer);\r\n                this.handle_read(offset, len, block);\r\n                fn(block);\r\n            }.bind(this),\r\n            range: { start: offset, length: len },\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\r\n     *\r\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\r\n     *\r\n     * @param {number} start\r\n     * @param {!Uint8Array} data\r\n     * @param {function()} fn\r\n     */\r\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\r\n    {\r\n        console.assert(start + data.byteLength <= this.byteLength);\r\n\r\n        var len = data.length;\r\n\r\n        console.assert(start % this.block_size === 0);\r\n        console.assert(len % this.block_size === 0);\r\n        console.assert(len);\r\n\r\n        var start_block = start / this.block_size;\r\n        var block_count = len / this.block_size;\r\n\r\n        for(var i = 0; i < block_count; i++)\r\n        {\r\n            var block = this.loaded_blocks[start_block + i];\r\n\r\n            if(block === undefined)\r\n            {\r\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\r\n            }\r\n\r\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\r\n            block.set(data_slice);\r\n\r\n            console.assert(block.byteLength === data_slice.length);\r\n        }\r\n\r\n        fn();\r\n    };\r\n\r\n    /**\r\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {!Uint8Array} block\r\n     */\r\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\r\n    {\r\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\r\n        // Overwrites blocks from the original source that have been written since\r\n\r\n        var start_block = offset / this.block_size;\r\n        var block_count = len / this.block_size;\r\n\r\n        for(var i = 0; i < block_count; i++)\r\n        {\r\n            var written_block = this.loaded_blocks[start_block + i];\r\n\r\n            if(written_block)\r\n            {\r\n                block.set(written_block, i * this.block_size);\r\n            }\r\n            //else\r\n            //{\r\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\r\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\r\n            //}\r\n        }\r\n    };\r\n\r\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\r\n    {\r\n        // We must download all parts, unlikely a good idea for big files\r\n        fn();\r\n    };\r\n\r\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\r\n    {\r\n        var count = 0;\r\n        for(var _ in this.loaded_blocks)\r\n        {\r\n            count++;\r\n        }\r\n\r\n        var buffer = new Uint8Array(count * this.block_size);\r\n        var indices = [];\r\n\r\n        var i = 0;\r\n        for(var index in this.loaded_blocks)\r\n        {\r\n            var block = this.loaded_blocks[index];\r\n            dbg_assert(block.length === this.block_size);\r\n            index = +index;\r\n            indices.push(index);\r\n            buffer.set(\r\n                block,\r\n                i * this.block_size\r\n            );\r\n            i++;\r\n        }\r\n\r\n        return {\r\n            buffer,\r\n            indices,\r\n            block_size: this.block_size,\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Synchronous access to File, loading blocks from the input type=file\r\n     * The whole file is loaded into memory during initialisation\r\n     *\r\n     * @constructor\r\n     */\r\n    function SyncFileBuffer(file)\r\n    {\r\n        this.file = file;\r\n        this.byteLength = file.size;\r\n\r\n        if(file.size > (1 << 30))\r\n        {\r\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\r\n        }\r\n\r\n        this.buffer = new ArrayBuffer(file.size);\r\n        this.onload = undefined;\r\n        this.onprogress = undefined;\r\n    }\r\n\r\n    SyncFileBuffer.prototype.load = function()\r\n    {\r\n        this.load_next(0);\r\n    };\r\n\r\n    /**\r\n     * @param {number} start\r\n     */\r\n    SyncFileBuffer.prototype.load_next = function(start)\r\n    {\r\n        /** @const */\r\n        var PART_SIZE = 4 << 20;\r\n\r\n        var filereader = new FileReader();\r\n\r\n        filereader.onload = function(e)\r\n        {\r\n            var buffer = new Uint8Array(e.target.result);\r\n            new Uint8Array(this.buffer, start).set(buffer);\r\n            this.load_next(start + PART_SIZE);\r\n        }.bind(this);\r\n\r\n        if(this.onprogress)\r\n        {\r\n            this.onprogress({\r\n                loaded: start,\r\n                total: this.byteLength,\r\n                lengthComputable: true,\r\n            });\r\n        }\r\n\r\n        if(start < this.byteLength)\r\n        {\r\n            var end = Math.min(start + PART_SIZE, this.byteLength);\r\n            var slice = this.file.slice(start, end);\r\n            filereader.readAsArrayBuffer(slice);\r\n        }\r\n        else\r\n        {\r\n            this.file = undefined;\r\n            this.onload && this.onload({ buffer: this.buffer });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} start\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    SyncFileBuffer.prototype.get = function(start, len, fn)\r\n    {\r\n        console.assert(start + len <= this.byteLength);\r\n        fn(new Uint8Array(this.buffer, start, len));\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {!Uint8Array} slice\r\n     * @param {function()} fn\r\n     */\r\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\r\n    {\r\n        console.assert(offset + slice.byteLength <= this.byteLength);\r\n\r\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\r\n        fn();\r\n    };\r\n\r\n    SyncFileBuffer.prototype.get_buffer = function(fn)\r\n    {\r\n        fn(this.buffer);\r\n    };\r\n\r\n    /**\r\n     * Asynchronous access to File, loading blocks from the input type=file\r\n     *\r\n     * @constructor\r\n     */\r\n    function AsyncFileBuffer(file)\r\n    {\r\n        this.file = file;\r\n        this.byteLength = file.size;\r\n\r\n        /** @const */\r\n        this.block_size = 256;\r\n        this.loaded_blocks = {};\r\n\r\n        this.onload = undefined;\r\n        this.onprogress = undefined;\r\n    }\r\n\r\n    AsyncFileBuffer.prototype.load = function()\r\n    {\r\n        this.onload && this.onload({});\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\r\n    {\r\n        console.assert(offset % this.block_size === 0);\r\n        console.assert(len % this.block_size === 0);\r\n        console.assert(len);\r\n\r\n        var block = this.get_from_cache(offset, len, fn);\r\n        if(block)\r\n        {\r\n            fn(block);\r\n            return;\r\n        }\r\n\r\n        var fr = new FileReader();\r\n\r\n        fr.onload = function(e)\r\n        {\r\n            var buffer = e.target.result;\r\n            var block = new Uint8Array(buffer);\r\n\r\n            this.handle_read(offset, len, block);\r\n            fn(block);\r\n        }.bind(this);\r\n\r\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\r\n    };\r\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\r\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\r\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\r\n\r\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\r\n    {\r\n        // We must load all parts, unlikely a good idea for big files\r\n        fn();\r\n    };\r\n\r\n    AsyncFileBuffer.prototype.get_as_file = function(name)\r\n    {\r\n        var parts = [];\r\n        var existing_blocks = Object.keys(this.loaded_blocks)\r\n                                .map(Number)\r\n                                .sort(function(x, y) { return x - y; });\r\n\r\n        var current_offset = 0;\r\n\r\n        for(var i = 0; i < existing_blocks.length; i++)\r\n        {\r\n            var block_index = existing_blocks[i];\r\n            var block = this.loaded_blocks[block_index];\r\n            var start = block_index * this.block_size;\r\n            console.assert(start >= current_offset);\r\n\r\n            if(start !== current_offset)\r\n            {\r\n                parts.push(this.file.slice(current_offset, start));\r\n                current_offset = start;\r\n            }\r\n\r\n            parts.push(block);\r\n            current_offset += block.length;\r\n        }\r\n\r\n        if(current_offset !== this.file.size)\r\n        {\r\n            parts.push(this.file.slice(current_offset));\r\n        }\r\n\r\n        var file = new File(parts, name);\r\n        console.assert(file.size === this.file.size);\r\n\r\n        return file;\r\n    };\r\n\r\n})();\r\n","\"use strict\";\r\n\r\n/**\r\n * Constructor for emulator instances.\r\n *\r\n * Usage: `var emulator = new V86Starter(options);`\r\n *\r\n * Options can have the following properties (all optional, default in parenthesis):\r\n *\r\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\r\n *   be a power of 2.\r\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\r\n *\r\n * - `autostart boolean` (false) - If emulation should be started when emulator\r\n *   is ready.\r\n *\r\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\r\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\r\n *\r\n * - `network_relay_url string` (No network card) - The url of a server running\r\n *   websockproxy. See [networking.md](networking.md). Setting this will\r\n *   enable an emulated network card.\r\n *\r\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\r\n *   ArrayBuffer, see below.\r\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\r\n * - `hda Object` (No hard drive) - First hard disk, see below.\r\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\r\n * - `cdrom Object` (No CD) - See below.\r\n * - `initial_state Object` (Normal boot) - An initial state to load, see\r\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\r\n *\r\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\r\n *   [filesystem.md](filesystem.md).\r\n *\r\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\r\n *   that will receive and send data to the emulated serial terminal.\r\n *   Alternatively the serial terminal can also be accessed programatically,\r\n *   see [serial.html](../examples/serial.html).\r\n *\r\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\r\n *   have a certain structure, see [basic.html](../examples/basic.html).\r\n *\r\n * ***\r\n *\r\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\r\n *\r\n * - Pass an object that has a url. Optionally, `async: true` and `size:\r\n *   size_in_bytes` can be added to the object, so that sectors of the image\r\n *   are loaded on demand instead of being loaded before boot (slower, but\r\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\r\n *   header must be supported on the server.\r\n *\r\n *   ```javascript\r\n *   // download file before boot\r\n *   bios: {\r\n *       url: \"bios/seabios.bin\"\r\n *   }\r\n *   // download file sectors as requested, size is required\r\n *   hda: {\r\n *       url: \"disk/linux.iso\",\r\n *       async: true,\r\n *       size: 16 * 1024 * 1024\r\n *   }\r\n *   ```\r\n *\r\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\r\n *\r\n *   ```javascript\r\n *   // use <input type=file>\r\n *   bios: {\r\n *       buffer: document.all.hd_image.files[0]\r\n *   }\r\n *   // start with empty hard drive\r\n *   hda: {\r\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\r\n *   }\r\n *   ```\r\n *\r\n * ***\r\n *\r\n * @param {Object} options Options to initialize the emulator with.\r\n * @constructor\r\n */\r\nfunction V86Starter(options)\r\n{\r\n    //var worker = new Worker(\"src/browser/worker.js\");\r\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\r\n\r\n    this.cpu_is_running = false;\r\n\r\n    var bus = Bus.create();\r\n    var adapter_bus = this.bus = bus[0];\r\n    this.emulator_bus = bus[1];\r\n    var emulator = this.v86 = new v86(this.emulator_bus);\r\n\r\n    this.bus.register(\"emulator-stopped\", function()\r\n    {\r\n        this.cpu_is_running = false;\r\n    }, this);\r\n\r\n    this.bus.register(\"emulator-started\", function()\r\n    {\r\n        this.cpu_is_running = true;\r\n    }, this);\r\n\r\n    var settings = {};\r\n\r\n    this.disk_images = {\r\n        \"fda\": undefined,\r\n        \"fdb\": undefined,\r\n        \"hda\": undefined,\r\n        \"hdb\": undefined,\r\n        \"cdrom\": undefined,\r\n    };\r\n\r\n    settings.load_devices = true;\r\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\r\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\r\n    settings.boot_order = options[\"boot_order\"] || 0x213;\r\n    settings.fastboot = options[\"fastboot\"] || false;\r\n    settings.fda = undefined;\r\n    settings.fdb = undefined;\r\n    settings.uart1 = options[\"uart1\"] || false;\r\n    settings.uart2 = options[\"uart2\"] || false;\r\n    settings.uart3 = options[\"uart3\"] || false;\r\n\r\n    if(options[\"network_relay_url\"])\r\n    {\r\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\r\n        settings.enable_ne2k = true;\r\n    }\r\n\r\n    if(!options[\"disable_keyboard\"])\r\n    {\r\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\r\n    }\r\n    if(!options[\"disable_mouse\"])\r\n    {\r\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\r\n    }\r\n\r\n    if(options[\"screen_container\"])\r\n    {\r\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\r\n    }\r\n    else if(options[\"screen_dummy\"])\r\n    {\r\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\r\n    }\r\n\r\n    if(options[\"serial_container\"])\r\n    {\r\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\r\n    }\r\n\r\n    if(!options[\"disable_speaker\"])\r\n    {\r\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\r\n    }\r\n\r\n    // ugly, but required for closure compiler compilation\r\n    function put_on_settings(name, buffer)\r\n    {\r\n        switch(name)\r\n        {\r\n            case \"hda\":\r\n                settings.hda = this.disk_images[\"hda\"] = buffer;\r\n                break;\r\n            case \"hdb\":\r\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\r\n                break;\r\n            case \"cdrom\":\r\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\r\n                break;\r\n            case \"fda\":\r\n                settings.fda = this.disk_images[\"fda\"] = buffer;\r\n                break;\r\n            case \"fdb\":\r\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\r\n                break;\r\n\r\n            case \"multiboot\":\r\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\r\n                break;\r\n\r\n            case \"bios\":\r\n                settings.bios = buffer.buffer;\r\n                break;\r\n            case \"vga_bios\":\r\n                settings.vga_bios = buffer.buffer;\r\n                break;\r\n            case \"initial_state\":\r\n                settings.initial_state = buffer.buffer;\r\n                break;\r\n            case \"fs9p_json\":\r\n                settings.fs9p_json = buffer.buffer;\r\n                break;\r\n            default:\r\n                dbg_assert(false, name);\r\n        }\r\n    }\r\n\r\n    var files_to_load = [];\r\n\r\n    function add_file(name, file)\r\n    {\r\n        if(!file)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\r\n        {\r\n            files_to_load.push({\r\n                name: name,\r\n                loadable: file,\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Anything coming from the outside world needs to be quoted for\r\n        // Closure Compiler compilation\r\n        file = {\r\n            buffer: file[\"buffer\"],\r\n            async: file[\"async\"],\r\n            url: file[\"url\"],\r\n            size: file[\"size\"],\r\n        };\r\n\r\n        if(name === \"bios\" || name === \"vga_bios\" ||\r\n            name === \"initial_state\" || name === \"multiboot\")\r\n        {\r\n            // Ignore async for these because they must be available before boot.\r\n            // This should make result.buffer available after the object is loaded\r\n            file.async = false;\r\n        }\r\n\r\n        if(file.buffer instanceof ArrayBuffer)\r\n        {\r\n            var buffer = new SyncBuffer(file.buffer);\r\n            files_to_load.push({\r\n                name: name,\r\n                loadable: buffer,\r\n            });\r\n        }\r\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\r\n        {\r\n            // SyncFileBuffer:\r\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\r\n            // - can later serve get/set operations fast and synchronously\r\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\r\n            //\r\n            // AsyncFileBuffer:\r\n            // - loads slices of the file asynchronously as requested\r\n            // - slower get/set\r\n\r\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\r\n            if(file.async === undefined)\r\n            {\r\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\r\n            }\r\n\r\n            if(file.async)\r\n            {\r\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\r\n            }\r\n            else\r\n            {\r\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\r\n            }\r\n\r\n            files_to_load.push({\r\n                name: name,\r\n                loadable: buffer,\r\n            });\r\n        }\r\n        else if(file.url)\r\n        {\r\n            if(file.async)\r\n            {\r\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\r\n                files_to_load.push({\r\n                    name: name,\r\n                    loadable: buffer,\r\n                });\r\n            }\r\n            else\r\n            {\r\n                files_to_load.push({\r\n                    name: name,\r\n                    url: file.url,\r\n                    size: file.size,\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\r\n        }\r\n    }\r\n\r\n    var image_names = [\r\n        \"bios\", \"vga_bios\",\r\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\r\n        \"initial_state\", \"multiboot\",\r\n    ];\r\n\r\n    for(var i = 0; i < image_names.length; i++)\r\n    {\r\n        add_file(image_names[i], options[image_names[i]]);\r\n    }\r\n\r\n    if(options[\"filesystem\"])\r\n    {\r\n        var fs_url = options[\"filesystem\"][\"basefs\"];\r\n        var base_url = options[\"filesystem\"][\"baseurl\"];\r\n\r\n        this.fs9p = new FS(base_url);\r\n        settings.fs9p = this.fs9p;\r\n\r\n        if(fs_url)\r\n        {\r\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\r\n\r\n            var size;\r\n\r\n            if(typeof fs_url === \"object\")\r\n            {\r\n                size = fs_url[\"size\"];\r\n                fs_url = fs_url[\"url\"];\r\n            }\r\n            dbg_assert(typeof fs_url === \"string\");\r\n\r\n            files_to_load.push({\r\n                name: \"fs9p_json\",\r\n                url: fs_url,\r\n                size: size,\r\n                as_text: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    var starter = this;\r\n    var total = files_to_load.length;\r\n\r\n    var cont = function(index)\r\n    {\r\n        if(index === total)\r\n        {\r\n            setTimeout(done.bind(this), 0);\r\n            return;\r\n        }\r\n\r\n        var f = files_to_load[index];\r\n\r\n        if(f.loadable)\r\n        {\r\n            f.loadable.onload = function(e)\r\n            {\r\n                put_on_settings.call(this, f.name, f.loadable);\r\n                cont(index + 1);\r\n            }.bind(this);\r\n            f.loadable.load();\r\n        }\r\n        else\r\n        {\r\n            v86util.load_file(f.url, {\r\n                done: function(result)\r\n                {\r\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\r\n                    cont(index + 1);\r\n                }.bind(this),\r\n                progress: function progress(e)\r\n                {\r\n                    if(e.target.status === 200)\r\n                    {\r\n                        starter.emulator_bus.send(\"download-progress\", {\r\n                            file_index: index,\r\n                            file_count: total,\r\n                            file_name: f.url,\r\n\r\n                            lengthComputable: e.lengthComputable,\r\n                            total: e.total || f.size,\r\n                            loaded: e.loaded,\r\n                        });\r\n                    }\r\n                    else\r\n                    {\r\n                        starter.emulator_bus.send(\"download-error\", {\r\n                            file_index: index,\r\n                            file_count: total,\r\n                            file_name: f.url,\r\n                            request: e.target,\r\n                        });\r\n                    }\r\n                },\r\n                as_text: f.as_text,\r\n            });\r\n        }\r\n    }.bind(this);\r\n    cont(0);\r\n\r\n    function done()\r\n    {\r\n        if(settings.initial_state)\r\n        {\r\n            // avoid large allocation now, memory will be restored later anyway\r\n            settings.memory_size = 0;\r\n        }\r\n\r\n        this.bus.send(\"cpu-init\", settings);\r\n\r\n        setTimeout(function()\r\n        {\r\n            if(settings.initial_state)\r\n            {\r\n                emulator.restore_state(settings.initial_state);\r\n            }\r\n\r\n            setTimeout(function()\r\n            {\r\n                if(settings.fs9p && settings.fs9p_json)\r\n                {\r\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\r\n                }\r\n\r\n                if(options[\"autostart\"])\r\n                {\r\n                    this.bus.send(\"cpu-run\");\r\n                }\r\n            }.bind(this), 0);\r\n        }.bind(this), 0);\r\n    }\r\n}\r\n\r\n/**\r\n * Start emulation. Do nothing if emulator is running already. Can be\r\n * asynchronous.\r\n * @export\r\n */\r\nV86Starter.prototype.run = function()\r\n{\r\n    this.bus.send(\"cpu-run\");\r\n};\r\n\r\n/**\r\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\r\n * @export\r\n */\r\nV86Starter.prototype.stop = function()\r\n{\r\n    this.bus.send(\"cpu-stop\");\r\n};\r\n\r\n/**\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.destroy = function()\r\n{\r\n    this.stop();\r\n\r\n    this.v86.destroy();\r\n    this.keyboard_adapter && this.keyboard_adapter.destroy();\r\n    this.network_adapter && this.network_adapter.destroy();\r\n    this.mouse_adapter && this.mouse_adapter.destroy();\r\n    this.screen_adapter && this.screen_adapter.destroy();\r\n    this.serial_adapter && this.serial_adapter.destroy();\r\n};\r\n\r\n/**\r\n * Restart (force a reboot).\r\n * @export\r\n */\r\nV86Starter.prototype.restart = function()\r\n{\r\n    this.bus.send(\"cpu-restart\");\r\n};\r\n\r\n/**\r\n * Add an event listener (the emulator is an event emitter). A list of events\r\n * can be found at [events.md](events.md).\r\n *\r\n * The callback function gets a single argument which depends on the event.\r\n *\r\n * @param {string} event Name of the event.\r\n * @param {function(*)} listener The callback function.\r\n * @export\r\n */\r\nV86Starter.prototype.add_listener = function(event, listener)\r\n{\r\n    this.bus.register(event, listener, this);\r\n};\r\n\r\n/**\r\n * Remove an event listener.\r\n *\r\n * @param {string} event\r\n * @param {function(*)} listener\r\n * @export\r\n */\r\nV86Starter.prototype.remove_listener = function(event, listener)\r\n{\r\n    this.bus.unregister(event, listener);\r\n};\r\n\r\n/**\r\n * Restore the emulator state from the given state, which must be an\r\n * ArrayBuffer returned by\r\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\r\n *\r\n * Note that the state can only be restored correctly if this constructor has\r\n * been created with the same options as the original instance (e.g., same disk\r\n * images, memory size, etc.).\r\n *\r\n * Different versions of the emulator might use a different format for the\r\n * state buffer.\r\n *\r\n * @param {ArrayBuffer} state\r\n * @export\r\n */\r\nV86Starter.prototype.restore_state = function(state)\r\n{\r\n    this.v86.restore_state(state);\r\n};\r\n\r\n/**\r\n * Asynchronously save the current state of the emulator. The first argument to\r\n * the callback is an Error object if something went wrong and is null\r\n * otherwise.\r\n *\r\n * @param {function(Object, ArrayBuffer)} callback\r\n * @export\r\n */\r\nV86Starter.prototype.save_state = function(callback)\r\n{\r\n    // Might become asynchronous at some point\r\n\r\n    setTimeout(function()\r\n    {\r\n        try\r\n        {\r\n            callback(null, this.v86.save_state());\r\n        }\r\n        catch(e)\r\n        {\r\n            callback(e, null);\r\n        }\r\n    }.bind(this), 0);\r\n};\r\n\r\n/**\r\n * Return an object with several statistics. Return value looks similar to\r\n * (but can be subject to change in future versions or different\r\n * configurations, so use defensively):\r\n *\r\n * ```javascript\r\n * {\r\n *     \"cpu\": {\r\n *         \"instruction_counter\": 2821610069\r\n *     },\r\n *     \"hda\": {\r\n *         \"sectors_read\": 95240,\r\n *         \"sectors_written\": 952,\r\n *         \"bytes_read\": 48762880,\r\n *         \"bytes_written\": 487424,\r\n *         \"loading\": false\r\n *     },\r\n *     \"cdrom\": {\r\n *         \"sectors_read\": 0,\r\n *         \"sectors_written\": 0,\r\n *         \"bytes_read\": 0,\r\n *         \"bytes_written\": 0,\r\n *         \"loading\": false\r\n *     },\r\n *     \"mouse\": {\r\n *         \"enabled\": true\r\n *     },\r\n *     \"vga\": {\r\n *         \"is_graphical\": true,\r\n *         \"res_x\": 800,\r\n *         \"res_y\": 600,\r\n *         \"bpp\": 32\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * @deprecated\r\n * @return {Object}\r\n * @export\r\n */\r\nV86Starter.prototype.get_statistics = function()\r\n{\r\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\r\n\r\n    var stats = {\r\n        cpu: {\r\n            instruction_counter: this.get_instruction_counter(),\r\n        },\r\n    };\r\n\r\n    if(!this.v86)\r\n    {\r\n        return stats;\r\n    }\r\n\r\n    var devices = this.v86.cpu.devices;\r\n\r\n    if(devices.hda)\r\n    {\r\n        stats.hda = devices.hda.stats;\r\n    }\r\n\r\n    if(devices.cdrom)\r\n    {\r\n        stats.cdrom = devices.cdrom.stats;\r\n    }\r\n\r\n    if(devices.ps2)\r\n    {\r\n        stats[\"mouse\"] = {\r\n            \"enabled\": devices.ps2.use_mouse,\r\n        };\r\n    }\r\n\r\n    if(devices.vga)\r\n    {\r\n        stats[\"vga\"] = {\r\n            \"is_graphical\": devices.vga.stats.is_graphical,\r\n        };\r\n    }\r\n\r\n    return stats;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.get_instruction_counter = function()\r\n{\r\n    if(this.v86)\r\n    {\r\n        return this.v86.cpu.timestamp_counter;\r\n    }\r\n    else\r\n    {\r\n        // TODO: Should be handled using events\r\n        return 0;\r\n    }\r\n};\r\n\r\n/**\r\n * @return {boolean}\r\n * @export\r\n */\r\nV86Starter.prototype.is_running = function()\r\n{\r\n    return this.cpu_is_running;\r\n};\r\n\r\n/**\r\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\r\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\r\n * Do nothing if there is no keyboard controller.\r\n *\r\n * @param {Array.<number>} codes\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\r\n{\r\n    for(var i = 0; i < codes.length; i++)\r\n    {\r\n        this.bus.send(\"keyboard-code\", codes[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Send translated keys\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_send_keys = function(codes)\r\n{\r\n    for(var i = 0; i < codes.length; i++)\r\n    {\r\n        this.keyboard_adapter.simulate_press(codes[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Send text\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_send_text = function(string)\r\n{\r\n    for(var i = 0; i < string.length; i++)\r\n    {\r\n        this.keyboard_adapter.simulate_char(string[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Download a screenshot.\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.screen_make_screenshot = function()\r\n{\r\n    if(this.screen_adapter)\r\n    {\r\n        this.screen_adapter.make_screenshot();\r\n    }\r\n};\r\n\r\n/**\r\n * Set the scaling level of the emulated screen.\r\n *\r\n * @param {number} sx\r\n * @param {number} sy\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.screen_set_scale = function(sx, sy)\r\n{\r\n    if(this.screen_adapter)\r\n    {\r\n        this.screen_adapter.set_scale(sx, sy);\r\n    }\r\n};\r\n\r\n/**\r\n * Go fullscreen.\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.screen_go_fullscreen = function()\r\n{\r\n    if(!this.screen_adapter)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var elem = document.getElementById(\"screen_container\");\r\n\r\n    if(!elem)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // bracket notation because otherwise they get renamed by closure compiler\r\n    var fn = elem[\"requestFullScreen\"] ||\r\n            elem[\"webkitRequestFullscreen\"] ||\r\n            elem[\"mozRequestFullScreen\"] ||\r\n            elem[\"msRequestFullScreen\"];\r\n\r\n    if(fn)\r\n    {\r\n        fn.call(elem);\r\n\r\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\r\n        // Might (but doesn't seem to) break something else\r\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\r\n        focus_element && focus_element.focus();\r\n    }\r\n\r\n    //this.lock_mouse(elem);\r\n    this.lock_mouse();\r\n};\r\n\r\n/**\r\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\r\n * browser window.\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.lock_mouse = function()\r\n{\r\n    var elem = document.body;\r\n\r\n    var fn = elem[\"requestPointerLock\"] ||\r\n                elem[\"mozRequestPointerLock\"] ||\r\n                elem[\"webkitRequestPointerLock\"];\r\n\r\n    if(fn)\r\n    {\r\n        fn.call(elem);\r\n    }\r\n};\r\n\r\n/**\r\n * Enable or disable sending mouse events to the emulated PS2 controller.\r\n *\r\n * @param {boolean} enabled\r\n */\r\nV86Starter.prototype.mouse_set_status = function(enabled)\r\n{\r\n    if(this.mouse_adapter)\r\n    {\r\n        this.mouse_adapter.emu_enabled = enabled;\r\n    }\r\n};\r\n\r\n/**\r\n * Enable or disable sending keyboard events to the emulated PS2 controller.\r\n *\r\n * @param {boolean} enabled\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_set_status = function(enabled)\r\n{\r\n    if(this.keyboard_adapter)\r\n    {\r\n        this.keyboard_adapter.emu_enabled = enabled;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Send a string to the first emulated serial terminal.\r\n *\r\n * @param {string} data\r\n * @export\r\n */\r\nV86Starter.prototype.serial0_send = function(data)\r\n{\r\n    for(var i = 0; i < data.length; i++)\r\n    {\r\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\r\n    }\r\n};\r\n\r\n/**\r\n * Send bytes to a serial port (to be received by the emulated PC).\r\n *\r\n * @param {Uint8Array} data\r\n * @export\r\n */\r\nV86Starter.prototype.serial_send_bytes = function(serial, data)\r\n{\r\n    for(var i = 0; i < data.length; i++)\r\n    {\r\n        this.bus.send(\"serial\" + serial + \"-input\", data[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\r\n * been initialized. First argument to the callback is an error object if\r\n * something went wrong and null otherwise.\r\n *\r\n * @param {string} file\r\n * @param {Uint8Array} data\r\n * @param {function(Object)=} callback\r\n * @export\r\n */\r\nV86Starter.prototype.create_file = function(file, data, callback)\r\n{\r\n    var fs = this.fs9p;\r\n\r\n    if(!fs)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var parts = file.split(\"/\");\r\n    var filename = parts[parts.length - 1];\r\n\r\n    var path_infos = fs.SearchPath(file);\r\n    var parent_id = path_infos.parentid;\r\n    var not_found = filename === \"\" || parent_id === -1;\r\n\r\n    if(!not_found)\r\n    {\r\n        fs.CreateBinaryFile(filename, parent_id, data);\r\n    }\r\n\r\n    if(callback)\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            if(not_found)\r\n            {\r\n                callback(new FileNotFoundError());\r\n            }\r\n            else\r\n            {\r\n                callback(null);\r\n            }\r\n        }, 0);\r\n    }\r\n};\r\n\r\n/**\r\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\r\n * initialized.\r\n *\r\n * @param {string} file\r\n * @param {function(Object, Uint8Array)} callback\r\n * @export\r\n */\r\nV86Starter.prototype.read_file = function(file, callback)\r\n{\r\n    var fs = this.fs9p;\r\n\r\n    if(!fs)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var path_infos = fs.SearchPath(file);\r\n    var id = path_infos.id;\r\n\r\n    if(id === -1)\r\n    {\r\n        callback(new FileNotFoundError(), null);\r\n    }\r\n    else\r\n    {\r\n        fs.OpenInode(id, undefined);\r\n        fs.AddEvent(\r\n            id,\r\n            function()\r\n            {\r\n                var data = fs.inodedata[id];\r\n\r\n                if(data)\r\n                {\r\n                    callback(null, data.subarray(0, fs.inodes[id].size));\r\n                }\r\n                else\r\n                {\r\n                    callback(new FileNotFoundError(), null);\r\n                }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Expose the RAM array\r\n *\r\n * @return {Uint8Array}\r\n * @export\r\n */\r\nV86Starter.prototype.get_mem = function() \r\n{\r\n    return this.v86.cpu.mem8;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @constructor\r\n *\r\n * @param {string=} message\r\n */\r\nfunction FileNotFoundError(message)\r\n{\r\n    this.message = message || \"File not found\";\r\n}\r\nFileNotFoundError.prototype = Error.prototype;\r\n\r\n// Closure Compiler's way of exporting\r\nif(typeof window !== \"undefined\")\r\n{\r\n    window[\"V86Starter\"] = V86Starter;\r\n    window[\"V86\"] = V86Starter;\r\n}\r\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\r\n{\r\n    module.exports[\"V86Starter\"] = V86Starter;\r\n    module.exports[\"V86\"] = V86Starter;\r\n}\r\nelse if(typeof importScripts === \"function\")\r\n{\r\n    // web worker\r\n    self[\"V86Starter\"] = V86Starter;\r\n    self[\"V86\"] = V86Starter;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction DummyScreenAdapter(bus)\r\n{\r\n    var\r\n        graphic_image_data,\r\n        graphic_buffer,\r\n        graphic_buffer32,\r\n\r\n        /** @type {number} */\r\n        cursor_row,\r\n\r\n        /** @type {number} */\r\n        cursor_col,\r\n\r\n        graphical_mode_width,\r\n        graphical_mode_height,\r\n\r\n        // are we in graphical mode now?\r\n        is_graphical = false,\r\n\r\n        // Index 0: ASCII code\r\n        // Index 1: Background color\r\n        // Index 2: Foreground color\r\n        text_mode_data,\r\n\r\n        // number of columns\r\n        text_mode_width,\r\n\r\n        // number of rows\r\n        text_mode_height;\r\n\r\n    this.bus = bus;\r\n\r\n    bus.register(\"screen-set-mode\", function(data)\r\n    {\r\n        this.set_mode(data);\r\n    }, this);\r\n\r\n    bus.register(\"screen-fill-buffer-end\", function(data)\r\n    {\r\n        var min = data[0];\r\n        var max = data[1];\r\n\r\n        this.update_buffer(min, max);\r\n    }, this);\r\n\r\n    bus.register(\"screen-put-char\", function(data)\r\n    {\r\n        //console.log(data);\r\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-text-scroll\", function(rows)\r\n    {\r\n        console.log(\"scroll\", rows);\r\n    }, this);\r\n\r\n    bus.register(\"screen-update-cursor\", function(data)\r\n    {\r\n        this.update_cursor(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-update-cursor-scanline\", function(data)\r\n    {\r\n        this.update_cursor_scanline(data[0], data[1]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-set-size-text\", function(data)\r\n    {\r\n        this.set_size_text(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-set-size-graphical\", function(data)\r\n    {\r\n        this.set_size_graphical(data[0], data[1]);\r\n    }, this);\r\n\r\n    this.put_char = function(row, col, chr, bg_color, fg_color)\r\n    {\r\n        if(row < text_mode_height && col < text_mode_width)\r\n        {\r\n            var p = 3 * (row * text_mode_width + col);\r\n\r\n            text_mode_data[p] = chr;\r\n            text_mode_data[p + 1] = bg_color;\r\n            text_mode_data[p + 2] = fg_color;\r\n        }\r\n    };\r\n\r\n    this.destroy = function()\r\n    {\r\n    };\r\n\r\n    this.set_mode = function(graphical)\r\n    {\r\n        is_graphical = graphical;\r\n    };\r\n\r\n    this.clear_screen = function()\r\n    {\r\n    };\r\n\r\n    /**\r\n     * @param {number} cols\r\n     * @param {number} rows\r\n     */\r\n    this.set_size_text = function(cols, rows)\r\n    {\r\n        if(cols === text_mode_width && rows === text_mode_height)\r\n        {\r\n            return;\r\n        }\r\n\r\n        text_mode_data = new Int32Array(cols * rows * 3);\r\n\r\n        text_mode_width = cols;\r\n        text_mode_height = rows;\r\n    };\r\n\r\n    this.set_size_graphical = function(width, height)\r\n    {\r\n        graphic_buffer = new Uint8Array(4 * width * height);\r\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\r\n\r\n        graphical_mode_width = width;\r\n        graphical_mode_height = height;\r\n\r\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\r\n    };\r\n\r\n    this.set_scale = function(s_x, s_y)\r\n    {\r\n    };\r\n\r\n    this.update_cursor_scanline = function(start, end)\r\n    {\r\n    };\r\n\r\n    this.update_cursor = function(row, col)\r\n    {\r\n        if(row !== cursor_row || col !== cursor_col)\r\n        {\r\n            cursor_row = row;\r\n            cursor_col = col;\r\n        }\r\n    };\r\n\r\n    this.update_buffer = function(min, max)\r\n    {\r\n        if(max < min)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var min_y = min / graphical_mode_width | 0;\r\n        var max_y = max / graphical_mode_width | 0;\r\n    };\r\n\r\n    this.get_text_screen = function()\r\n    {\r\n        var screen = [];\r\n\r\n        for(var i = 0; i < text_mode_height; i++)\r\n        {\r\n            screen.push(this.get_text_row(i));\r\n        }\r\n\r\n        return screen;\r\n    };\r\n\r\n    this.get_text_row = function(i)\r\n    {\r\n        var row = \"\";\r\n        var offset = 3 * i * text_mode_width;\r\n\r\n        for(var j = 0; j < text_mode_width; j++)\r\n        {\r\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\r\n        }\r\n\r\n        return row;\r\n    };\r\n}\r\n","// -------------------------------------------------\r\n// ------------------ Marshall ---------------------\r\n// -------------------------------------------------\r\n// helper functions for virtio and 9p.\r\n\r\nvar marshall = {};\r\n\r\n\r\n// Inserts data from an array to a byte aligned struct in memory\r\nmarshall.Marshall = function(typelist, input, struct, offset) {\r\n    var item;\r\n    var size = 0;\r\n    for (var i=0; i < typelist.length; i++) {\r\n        item = input[i];\r\n        switch (typelist[i]) {\r\n            case \"w\":\r\n                struct[offset++] = item & 0xFF;\r\n                struct[offset++] = (item >> 8) & 0xFF;\r\n                struct[offset++] = (item >> 16) & 0xFF;\r\n                struct[offset++] = (item >> 24) & 0xFF;\r\n                size += 4;\r\n                break;\r\n            case \"d\": // double word\r\n                struct[offset++] = item & 0xFF;\r\n                struct[offset++] = (item >> 8) & 0xFF;\r\n                struct[offset++] = (item >> 16) & 0xFF;\r\n                struct[offset++] = (item >> 24) & 0xFF;\r\n                struct[offset++] = 0x0;\r\n                struct[offset++] = 0x0;\r\n                struct[offset++] = 0x0;\r\n                struct[offset++] = 0x0;\r\n                size += 8;\r\n                break;\r\n            case \"h\":\r\n                struct[offset++] = item & 0xFF;\r\n                struct[offset++] = item >> 8;\r\n                size += 2;\r\n                break;\r\n            case \"b\":\r\n                struct[offset++] = item;\r\n                size += 1;\r\n                break;\r\n            case \"s\":\r\n                var lengthoffset = offset;\r\n                var length = 0;\r\n                struct[offset++] = 0; // set the length later\r\n                struct[offset++] = 0;\r\n                size += 2;\r\n                for (var j in item) {\r\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\r\n                    utf8.forEach( function(c) {\r\n                        struct[offset++] = c;\r\n                        size += 1;\r\n                        length++;\r\n                    });\r\n                }\r\n                struct[lengthoffset+0] = length & 0xFF;\r\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\r\n                break;\r\n            case \"Q\":\r\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\r\n                offset += 13;\r\n                size += 13;\r\n                break;\r\n            default:\r\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\r\n                break;\r\n        }\r\n    }\r\n    return size;\r\n};\r\n\r\n\r\n// Extracts data from a byte aligned struct in memory to an array\r\nmarshall.Unmarshall = function(typelist, struct, offset) {\r\n    var output = [];\r\n    for (var i=0; i < typelist.length; i++) {\r\n        switch (typelist[i]) {\r\n            case \"w\":\r\n                var val = struct[offset++];\r\n                val += struct[offset++] << 8;\r\n                val += struct[offset++] << 16;\r\n                val += (struct[offset++] << 24) >>> 0;\r\n                output.push(val);\r\n                break;\r\n            case \"d\":\r\n                var val = struct[offset++];\r\n                val += struct[offset++] << 8;\r\n                val += struct[offset++] << 16;\r\n                val += (struct[offset++] << 24) >>> 0;\r\n                offset += 4;\r\n                output.push(val);\r\n                break;\r\n            case \"h\":\r\n                var val = struct[offset++];\r\n                output.push(val + (struct[offset++] << 8));\r\n                break;\r\n            case \"b\":\r\n                output.push(struct[offset++]);\r\n                break;\r\n            case \"s\":\r\n                var len = struct[offset++];\r\n                len += struct[offset++] << 8;\r\n                var str = '';\r\n                var utf8converter = new UTF8StreamToUnicode();\r\n                for (var j=0; j < len; j++) {\r\n                    var c = utf8converter.Put(struct[offset++])\r\n                    if (c == -1) continue;\r\n                    str += String.fromCharCode(c);\r\n                }\r\n                output.push(str);\r\n                break;\r\n            default:\r\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\r\n                break;\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\n\r\n// Extracts data from a byte aligned struct in memory to an array\r\nmarshall.Unmarshall2 = function(typelist, GetByte) {\r\n    var output = [];\r\n    for (var i=0; i < typelist.length; i++) {\r\n        switch (typelist[i]) {\r\n            case \"w\":\r\n                var val = GetByte();\r\n                val += GetByte() << 8;\r\n                val += GetByte() << 16;\r\n                val += (GetByte() << 24) >>> 0;\r\n                output.push(val);\r\n                break;\r\n            case \"d\":\r\n                var val = GetByte();\r\n                val += GetByte() << 8;\r\n                val += GetByte() << 16;\r\n                val += (GetByte() << 24) >>> 0;\r\n                GetByte();GetByte();GetByte();GetByte();\r\n                output.push(val);\r\n                break;\r\n            case \"h\":\r\n                var val = GetByte();\r\n                output.push(val + (GetByte() << 8));\r\n                break;\r\n            case \"b\":\r\n                output.push(GetByte());\r\n                break;\r\n            case \"s\":\r\n                var len = GetByte();\r\n                len += GetByte() << 8;\r\n                var str = '';\r\n                var utf8converter = new UTF8StreamToUnicode();\r\n                for (var j=0; j < len; j++) {\r\n                    var c = utf8converter.Put(GetByte())\r\n                    if (c == -1) continue;\r\n                    str += String.fromCharCode(c);\r\n                }\r\n                output.push(str);\r\n                break;\r\n            default:\r\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\r\n                break;\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\n","// -------------------------------------------------\r\n// ------------------ UTF8 Helpers -----------------\r\n// -------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\nvar UTF8 = {}\r\n\r\n/** @constructor */\r\nfunction UTF8StreamToUnicode() {\r\n\r\n    this.stream = new Uint8Array(5);\r\n    this.ofs = 0;\r\n\r\n    this.Put = function(key) {\r\n        this.stream[this.ofs] = key;\r\n        this.ofs++;\r\n        switch(this.ofs) {\r\n            case 1:\r\n                if (this.stream[0] < 128) {\r\n                    this.ofs = 0;\r\n                    return this.stream[0];\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                if ((this.stream[0]&0xE0) == 0xC0)\r\n                if ((this.stream[1]&0xC0) == 0x80) {\r\n                    this.ofs = 0;\r\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\r\n                }\r\n                break;\r\n\r\n            case 3:\r\n                break;\r\n\r\n            case 4:\r\n                break;\r\n\r\n            default:\r\n                return -1;\r\n                //this.ofs = 0;\r\n                //break;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\nfunction UnicodeToUTF8Stream(key)\r\n{\r\n        if (key < 0x80)  return [key];\r\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\r\n}\r\n\r\nUTF8.UTF8Length = function(s)\r\n{\r\n    var length = 0;\r\n    for(var i=0; i<s.length; i++) {\r\n        var c = s.charCodeAt(i);\r\n        length += c<128?1:2;\r\n    }\r\n    return length;\r\n}\r\n"],
"names":["$jscomp.arrayIteratorImpl","$jscomp.defineProperty","$jscomp.global","$jscomp.polyfill","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SymbolClass","$jscomp.SYMBOL_PREFIX","$jscomp.iteratorPrototype","$jscomp.initSymbolIterator","$jscomp.iteratorFromArray","$jscomp.makeIterator","$jscomp.owns","$jscomp.objectCreate","$jscomp.construct","$jscomp.setPrototypeOf","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","bus","number_as_color","n","toString","Array","length","join","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","webkitTransform","MozTransform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","console","assert","getElementsByTagName","graphic_context","getContext","text_screen","cursor_element","document","createElement","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","stopped","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","i","String","fromCharCode","position","backgroundColor","display","register","data","set_mode","update_buffer","put_char","update_cursor","update_cursor_scanline","clear_screen","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","open","toDataURL","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","bind","send","destroy","this.destroy","this.set_mode","graphical","this.clear_screen","fillStyle","fillRect","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","removeChild","firstChild","appendChild","this.set_size_graphical","buffer_width","buffer_height","createImageData","Uint8Array","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","Math","min","marginTop","this.update_cursor","this.text_update_row","offset","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","layers","forEach","layer","putImageData","screen_x","buffer_x","screen_y","buffer_y","Virtio9p","filesystem","fs","SendReply","this.SendReply","deviceid","hostfeature","configspace","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","prototype","get_state","Virtio9p.prototype.get_state","state","map","f","inodeid","type","uid","set_state","Virtio9p.prototype.set_state","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall.Marshall","Virtio9p.prototype.SendError","errorcode","size","BuildReply","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","marshall.Unmarshall2","used_size","req","floor","total_size","inodes","fid","mode","idx","inode","GetInode","ret","OpenInode","AddEvent","qid","dfid","name","CreateInode","inodetarget","targetdata","inodedata","symlink","parentid","PushInode","gid","CreateSymlink","symgt","major","minor","CreateNode","CreateDirectory","S_IFDIR","CreateFile","FID_INODE","status","STATUS_UNLINKED","SendError","ENOENT","nlinks","atime","mtime","ctime","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_ATIME","getTime","Date","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_SETATTR_SIZE","ChangeSize","count","FID_XATTR","caps","file","Write","Rename","olddirfid","oldname","newdirfid","newname","dirfd","Search","Unlink","ENOTEMPTY","version","nwfid","nwname","wnames","push","walk","nwidx","CloseInode","FID_NONE","newfid","PrepareCAPs","IO","cpu","ports","create_empty_entry","memory_size","MMAP_BLOCK_BITS","memory_map_read8","memory_map_write8","undefined","memory_map_read32","memory_map_write32","mmap_register","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","IO.prototype.register_read","port_addr","r8","r16","r32","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","call","r16_2","register_read","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","register_write","IO.prototype.in_mmap_range","in_mapped_range","MMAP_BLOCK_SIZE","mmap_read32_shim","IO.prototype.mmap_read32_shim","addr","fn","mmap_write32_shim","IO.prototype.mmap_write32_shim","value","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","IO.prototype.port_write8","entry","IO.prototype.port_write16","IO.prototype.port_write32","IO.prototype.port_read8","IO.prototype.port_read16","IO.prototype.port_read32","v86","running","CPU","run","stop","restart","register_tick","v86.prototype","v86.prototype.run","fast_next_tick","v86.prototype.do_tick","in_hlt","v86.microtick","hlt_loop","devices","pit","now","rtc","handle_irqs","t","TIME_PER_FRAME","run_hardware_timers","do_run","do_many_cycles","do_many_cycles_unsafe","k","LOOP_COUNTER","cycle_internal","exception_cleanup","dt","next_tick","v86.prototype.stop","v86.prototype.destroy","unregister_tick","v86.prototype.restart","reset","load_bios","v86.prototype.init","settings","setImmediate","do_tick","postMessage","MAGIC_POST_MESSAGE","tick","source","addEventListener","removeEventListener","setTimeout","hidden","save_state","v86.prototype.save_state","restore_state","v86.prototype.restore_state","performance","h","len","str","toUpperCase","crypto","getRandomValues","rand_data","v86util.has_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","onload","load","SyncBuffer.prototype.load","get","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","slice","clz32","v86util.int_log2_byte","x","v86util.int_log2","int_log2_table","b","tt","v86util.imul_low","v86util.mul_low","imul","a","v86util.mul_high","ByteQueue","this.push","item","shift","this.shift","clear","this.clear","FloatQueue","DSP_DACSIZE","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","FloatQueue.prototype.shift_block","slice_end","partial","subarray","FloatQueue.prototype.clear","FPU","st","Float64Array","float32","float32_int","float64","float64_byte","float64_int","st8","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","log","LN2","LOG2E","PI","LN10","FPU.prototype","FPU.prototype.get_state","FPU.prototype.set_state","FPU.prototype.fpu_unimpl","trigger_ud","invalid_arithmatic","FPU.prototype.invalid_arithmatic","FPU_EX_I","FPU.prototype.fcom","y","get_st0","FPU_C0","FPU_C3","FPU.prototype.fcomi","flags_changed","flags","flag_zero","FPU.prototype.finit","FPU.prototype.load_status_word","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","load_status_word","tag_word","load_tag_word","isFinite","safe_write32","fpu_unimpl","FPU.prototype.fldenv","safe_read16","set_status_word","sw","set_tag_word","safe_read32s","integer_round","FPU.prototype.integer_round","FPU.prototype.truncate","ceil","FPU.prototype.push","FPU_C1","stack_fault","pop","FPU.prototype.pop","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","exponent","low","high","sign","mantissa","pow","FPU.prototype.store_m80","FPU.prototype.load_m64","FPU.prototype.store_m64","get_sti","FPU.prototype.load_m32","FPU.prototype.sign","IDEDevice","master_buffer","slave_buffer","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","error","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port","lba_count","is_lba","head","dma_command","dma_status","prdt_addr","current_command","data_pointer","data_end","data_length","device_reset","push_irq","last_sector","sector_count","ata_read_sectors","is_lba48","get_count","ata_write_sectors","lba","get_lba","is_single","byte_count","sector_size","data_allocate_noclear","sectors_per_drq","write_dest","is_atapi","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","register_device","pci","IDEDevice.prototype","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","cylinder_count","sectors_per_track","head_count","cmos_data","CMOS_BIOS_DISKTRANSFLAG","CMOS_DISK_DATA","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","data16","data32","current_atapi_command","Object","seal","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","cmd","req_length","report_read_start","data_set","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","mem8","blob","IDEInterface.prototype.read_data","result","read_end","IDEInterface.prototype.write_data_port","write_end","atapi_read_dma","atapi_read","format","page_code","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","IDEInterface.prototype.do_ata_read_sectors_dma","prd_addr","prd_count","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_response32","pci_status32","device_spaces","PCI_CONFIG_DATA","pci_write8","pci_write16","bdf","address","space","pci_write32","bar","space_addr","written","original_bar","set_io_bars","pci_rom_size","pci_rom_address","PCI_CONFIG_ADDRESS","out_byte","pci_query","host_bridge","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","PCI.prototype.pci_write8","PCI.prototype.pci_write16","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","j","port","PCI.prototype.set_io_bars","from","to","raise_irq","PCI.prototype.raise_irq","lower_irq","PCI.prototype.lower_irq","FloppyController","fda_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","number_of_cylinders","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","args","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController_prototype$seek","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","done","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","CPU.prototype.mmap_read16","CPU.prototype.mmap_write16","CPU.prototype.in_mapped_range","CPU.prototype","CPU.prototype.read8","mmap_read8","CPU.prototype.read16","mmap_read16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","mmap_read32","CPU.prototype.read_aligned32","CPU.prototype.write8","mmap_write8","CPU.prototype.write16","mmap_write16","CPU.prototype.write_aligned16","CPU.prototype.write32","mmap_write32","CPU.prototype.write_aligned32","mem32s","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","DMA.prototype.update_mask","this_value","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","PIT.prototype.get_counter_value","diff_in_ticks","OSCILLATOR_FREQ","reload","PIT.prototype.did_rollover","diff","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","read_mode","VGA_HOST_MEMORY_SPACE_START","Uint32Array","VGA_HOST_MEMORY_SPACE_SIZE","VGAScreen","vga_memory_size","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","virtual_height","virtual_width","screen_height","screen_width","start_address_latched","start_address","crtc","line_compare","offset_register","preset_row_scan","underline_location_register","vertical_blank_start","vertical_display_enable_end","horizontal_blank_start","horizontal_display_enable_end","crtc_mode","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch_dword","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_state","dac_color_index_read","dac_color_index_write","index_crtc","dac_map","attribute_controller_index","palette_source","color_select","horizontal_panning","color_plane_enable","attribute_mode","sequencer_index","plane_write_bm","clocking_mode","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","color_dont_care","color_compare","miscellaneous_graphics_register","planar_setreset_enable","planar_setreset","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C7_write","port3C7_read","port3C8_write","port3C8_read","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D4_read","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","VGA_MIN_MEMORY_SIZE","svga_memory","diff_addr_min","diff_addr_max","diff_plot_min","diff_plot_max","dest_buffer","screen_fill_buffer","start_pixel","end_pixel","svga_memory32","red","green","blue","word","svga_memory16","min_y","addr_shift","vga_addr_shift_count","addr_substitution","shift_mode","pel_width","pixel_addr","byte0","plane0","byte1","plane1","byte2","plane2","byte3","plane3","shift_loads","pixel_buffer","mask","colorset","color256","update_vertical_retrace","vga_memory","VGA_BANK_SIZE","VGA_PIXEL_BUFFER_START","VGA_PIXEL_BUFFER_SIZE","me","vga_memory_read","memory_space_select","bitmask","apply_feed","setreset_dword","apply_expand","setreset_enable_dword","plane_dword","apply_logical","plane_select","vga_addr_to_pixel","max","memory_start","VGA_LFB_ADDRESS","VGAScreen.prototype","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","update_layers","update_vga_size","complete_replot","complete_redraw","VGAScreen.prototype.vga_memory_read","reading","plane","VGAScreen.prototype.apply_feed","VGAScreen.prototype.apply_expand","VGAScreen.prototype.apply_logical","data_dword","VGAScreen.prototype.text_mode_redraw","VGAScreen.prototype.update_cursor","VGAScreen.prototype.complete_redraw","text_mode_redraw","VGAScreen.prototype.complete_replot","VGAScreen.prototype.destroy","VGAScreen.prototype.vga_addr_shift_count","shift_count","VGAScreen.prototype.vga_addr_to_pixel","VGAScreen.prototype.scan_line_to_screen_row","scan_line","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_vga_size","horizontal_characters","vertical_scans","bytes_per_line","vga_bytes_per_line","scan_line_to_screen_row","available_bytes","VGAScreen.prototype.update_layers","start_addr","pixel_panning","byte_panning","pixel_addr_start","start_buffer_row","start_buffer_col","split_screen_row","split_buffer_height","start_split_col","VGAScreen.prototype.update_vertical_retrace","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.port3C0_write","previous_mode","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","previous_clocking_mode","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C7_read","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C8_read","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","previous_planar_mode","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D4_read","VGAScreen.prototype.port3D5_write","previous_vertical_display_enable_end","previous_vertical_blank_start","previous_underline","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","MAX_XRES","MAX_YRES","svga_bytes_per_line","bits","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","MAX_BPP","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","resolution","scaling2","mouse_buffer","next_byte_is_aux","next_byte_is_ready","code","kbd_send_code","mouse_send_click","left","right","middle","send_mouse_packet","mouse_send_delta","factor","delta_x","delta_y","change_x","change_y","command_register","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.raise_irq","kbd_irq","mouse_irq","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.send_mouse_packet","dx","dy","PS2.prototype.port60_read","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","MAGIC_CPU_EXCEPTION","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","PIC.prototype","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","RTC","cmos_index","last_update","rtc_time","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","time","RTC.prototype.encode_time","digit","RTC.prototype.cmos_port_read","CMOS_RTC_SECONDS","encode_time","getUTCSeconds","CMOS_RTC_MINUTES","getUTCMinutes","CMOS_RTC_HOURS","getUTCHours","CMOS_RTC_DAY_MONTH","getUTCDate","CMOS_RTC_MONTH","getUTCMonth","CMOS_RTC_YEAR","getUTCFullYear","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_CENTURY","RTC.prototype.cmos_port_write","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","UART_IIR_NO_INT","scratch_register","modem_status","modem_control","input","current_line","com","data_received","UART_LSR_DATA_READY","CheckInterrupt","write_data","out_word","DLAB","ClearInterrupt","UART_IIR_THRI","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","UART_IER_RDI","UART_IIR_CTI","UART_IER_THRI","UART_IER_MSI","UART_IIR_MSI","UART.prototype.write_data","ThrowInterrupt","char","apply","StateLoadError","msg","message","Error","save_object","obj","saved_buffers","BYTES_PER_ELEMENT","byteOffset","constructor","restore_object","base","buffers","current","table","Int16Array","info","infos","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","JSON","stringify","buffer_block_start","STATE_INFO_BLOCK_START","ArrayBuffer","header_block","info_block","buffer_block","STATE_INDEX_MAGIC","STATE_MAGIC","STATE_INDEX_VERSION","STATE_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","Ne2k","receive","cr","rxcr","memory","curpg","total_length","packet_length","data_start","next","cut","START_RX_PAGE","pstop","pstart","ENRSR_RXOK","do_interrupt","ENISR_RX","imr","tpsr","tcnt","rcnt","dcfg","tsr","mac","random","rsar","START_PAGE","STOP_PAGE","boundary","E8390_CMD","ENISR_RDC","ENISR_TX","EN0_COUNTER0","EN0_COUNTER1","EN0_COUNTER2","NE_RESET","get_page","ENISR_RESET","EN0_STARTPG","EN0_STOPPG","EN0_ISR","update_irq","EN0_TXCR","EN0_DCFG","EN0_RCNTLO","EN0_RCNTHI","EN0_RSARLO","EN0_RSARHI","EN0_IMR","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_TCNTLO","EN0_TCNTHI","EN0_RSR","EN0_RXCR","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","data_port_write","Ne2k.prototype.data_port_write32","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","data_port_read","Ne2k.prototype.data_port_read32","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","MIXER_REGISTER_IS_LEGACY","FM_HANDLERS","SB16","write_buffer","DSP_BUFSIZE","read_buffer","mixer_current_address","command_size","command","read_buffer_lastvalue","mixer_registers","mixer_reset","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","SB_DMA1","dma_channel_16bit","SB_DMA5","dma_autoinit","dma_buffer","SB_DMA_BUFSIZE","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","SB_IRQ5","irq_triggered","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","dac_handle_request","dac_send","dma_transfer_next","dsp_reset","SB16.prototype.dsp_reset","DSP_NO_COMMAND","fill","SB_IRQ_8BIT","SB16.prototype","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","mixer_full_update","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","handler","mixer_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB_IRQ_16BIT","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","dsp_default_handler","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_clip","amplitude","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","DSP_COPYRIGHT","SB_F9","SB16.prototype.mixer_write","mixer_default_read","SB16.prototype.mixer_default_read","mixer_default_write","SB16.prototype.mixer_default_write","SB16.prototype.mixer_reset","SB16.prototype.mixer_full_update","register_mixer_read","register_mixer_write","register_mixer_legacy","address_old","address_new_left","address_new_right","prev_right","prev_left","register_mixer_volume","mixer_source","MIXER_SRC_MASTER","MIXER_CHANNEL_LEFT","MIXER_CHANNEL_RIGHT","MIXER_SRC_DAC","MIXER_SRC_PCSPEAKER","MIXER_CHANNEL_BOTH","SB_IRQ2","SB_IRQ7","SB_IRQ10","SB_DMA0","SB_DMA3","SB_DMA6","SB_DMA7","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB_FM_OPERATORS_BY_OFFSET","SB16.prototype.sampling_rate_change","rate","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","SB_DMA_BLOCK_SAMPLES","max_bytes_block","SB16.prototype.dma_on_unmask","SB16.prototype.dma_transfer_next","samples","dma_to_dac","repeats","sample","SB16.prototype.dac_send","out0","shift_block","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","ReceiveRequest","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","l","BusConnector.prototype.send","listener","Bus.create","c0","c1","a20_enabled","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","instruction_pointer","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg16","reg8s","reg8","reg_mmxs","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","bios","main","vga","fw_value","fpu","update_operand_size","debug_init","CPU.prototype.get_state","virtio","apic","acpi","hpet","ps2","uart0","fdc","cdrom","hda","net","pic","sb16","ioapic","uart1","uart2","uart3","CPU.prototype.set_state","full_clear_tlb","CPU.prototype.exception_cleanup","clear_prefixes","stack","CPU.prototype.reset","flags_default","switch_cs_real_mode","switch_seg","reg_ss","reg_sp","create_memory","CPU.prototype.create_memory","goog.exportProperty","CPU.prototype.init","device_bus","vga_bios","a20_byte","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","load_devices","fill_cmos","fda","ide_device_count","hdb","enable_ne2k","fs9p","multiboot","load_multiboot","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","total","checksum","reg_eax","reg_ebx","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","load_addr","load_end_addr","entry_addr","header_addr","write_blob","get_seg","reg_cs","ELF_MAGIC","elf","read_elf","program_headers","program","filesz","paddr","CPU.prototype.fill_cmos","boot_order","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","memory_above_1m","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","memory_above_16m","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_EQUIPMENT_INFO","CMOS_BIOS_SMP_COUNT","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.cycle_internal","opcode","read_imm8","cycle","CPU.prototype.cycle","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","table32","table16","CPU.prototype.set_cr0","cr0","CR0_PG","debug","unimpl","CR0_EM","CR0_ET","new_paging","CR0_PE","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","CPU.prototype.create_atom64s","CPU.prototype.create_atom128s","d0","d1","d2","d3","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","CPU.prototype.sib_resolve","mod","sib_table","CPU.prototype.virt_boundary_write32","CPU.prototype.safe_read8","CPU.prototype.safe_read16","safe_read8","CPU.prototype.safe_read32s","CPU.prototype.safe_read64s","create_atom64s","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","virt_boundary_write16","CPU.prototype.safe_write32","virt_boundary_write32","CPU.prototype.safe_write64","CPU.prototype.safe_write128","CPU.prototype.read_moffs","get_seg_prefix","reg_ds","CPU.prototype.getiopl","CPU.prototype.vm86_mode","flag_vm","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","CPU.prototype.update_eflags","new_flags","dont_update","flag_iopl","getiopl","flag_interrupt","CPU.prototype.get_stack_reg","reg_esp","CPU.prototype.set_stack_reg","CPU.prototype.adjust_stack_reg","CPU.prototype.get_stack_pointer","CPU.prototype.get_real_eip","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","vm86_mode","CR4_VME","trigger_gp","translate_address_system_read","selector","access","dpl","descriptor","lookup_segment_selector","do_task_switch","tss_is_16","tss_is_busy","is_valid","is_null","from_gdt","is_present","effective_limit","tsr_offset","reg_tr","old_eflags","get_eflags","TSR_EIP","get_real_eip","TSR_EFLAGS","TSR_EAX","TSR_ECX","reg_ecx","TSR_EDX","reg_edx","TSR_EBX","TSR_ESP","TSR_EBP","reg_ebp","TSR_ESI","reg_esi","TSR_EDI","reg_edi","TSR_ES","reg_es","TSR_CS","TSR_SS","TSR_DS","TSR_FS","reg_fs","TSR_GS","reg_gs","table_offset","new_tsr_offset","TSR_BACKLINK","new_cr3","TSR_CR3","new_eip","new_cs","is_system","is_executable","dc_bit","rpl","cpl_changed","new_eflags","flag_nt","update_eflags","new_ldt","TSR_LDT","load_ldt","clear_tlb","CR0_TS","push16","push32","is_trap","is_16","trigger_np","old_flags","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","set_stack_reg","get_stack_pointer","new_ip","CPU.prototype.iret","adjust_stack_reg","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","is_writable","trigger_ss","call_interrupt_vector","CPU.prototype.switch_cs_real_mode","CPU.prototype.far_return","eip","stack_adjust","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.trigger_de","raise_exception","CPU.prototype.trigger_ud","CPU.prototype.trigger_nm","CPU.prototype.trigger_gp","raise_exception_with_code","CPU.prototype.trigger_np","CPU.prototype.task_switch_test","trigger_nm","CPU.prototype.task_switch_test_mmx","CPU.prototype.get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ss","CPU.prototype.get_seg_prefix","default_segment","prefix","PREFIX_MASK_SEGMENT","SEG_PREFIX_ZERO","CPU.prototype.get_seg","segment","CPU.prototype.read_e8","modrm_resolve","CPU.prototype.read_e16","CPU.prototype.read_e32s","CPU.prototype.read_mmx_mem32s","CPU.prototype.read_mmx_mem64s","safe_read64s","CPU.prototype.read_xmm_mem64s","CPU.prototype.read_xmm_mem128s","phys","safe_read128s_aligned","create_atom128s","CPU.prototype.set_e8","safe_write8","CPU.prototype.set_e16","CPU.prototype.set_e32","CPU.prototype.read_write_e8","virt_addr","CPU.prototype.write_e8","CPU.prototype.read_write_e16","virt_boundary_read16","CPU.prototype.write_e16","CPU.prototype.read_write_e32","virt_boundary_read32s","mid","CPU.prototype.write_e32","CPU.prototype.read_reg_e16","CPU.prototype.write_reg_e16","CPU.prototype.read_reg_e32s","CPU.prototype.write_reg_e32","CPU.prototype.read_g8","CPU.prototype.write_g8","CPU.prototype.read_g16","CPU.prototype.read_g16s","CPU.prototype.write_g16","CPU.prototype.read_g32s","CPU.prototype.write_g32","CPU.prototype.read_xmm64s","CPU.prototype.read_xmm128s","CPU.prototype.read_mmx64s","CPU.prototype.write_mmx64s","CPU.prototype.write_xmm64","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","reg_ldtr","limit","CPU.prototype.switch_seg","reg","CPU.prototype.load_ldt","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","CPU.prototype.lsl","LSL_INVALID_TYPE","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","CPU.prototype.translate_address_read","TLB_USER_READ","do_page_translation","CPU.prototype.translate_address_write","TLB_USER_WRITE","CPU.prototype.translate_address_system_write","TLB_SYSTEM_WRITE","CPU.prototype.translate_address_system_read","TLB_SYSTEM_READ","CPU.prototype.do_page_translation","for_writing","user","page","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","CR0_WP","page_table_addr","page_table_entry","write_aligned32","global","allowed_flag","CR4_PGE","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","write","present","CPU.prototype.is_osize_32","PREFIX_MASK_OPSIZE","CPU.prototype.is_asize_32","PREFIX_MASK_ADDRSIZE","CPU.prototype.get_reg_asize","r","CPU.prototype.set_ecx_asize","reg_cx","CPU.prototype.add_reg_asize","CPU.prototype.decr_ecx_asize","CPU.prototype.invalid_arithmatic","CPU_EX_I","CPU.prototype.is_SNaN32","module","exports","importScripts","self","get_seg_prefix_ds","reg_bx","reg_si","reg_di","get_seg_prefix_ss","reg_bp","sib_resolve","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","CPU.prototype.add8","dest","src","add","OPSIZE_8","CPU.prototype.add16","OPSIZE_16","CPU.prototype.add32","OPSIZE_32","CPU.prototype.adc8","adc","CPU.prototype.adc16","CPU.prototype.adc32","CPU.prototype.sub8","sub","CPU.prototype.sub16","CPU.prototype.sub32","CPU.prototype.sbb8","sbb","CPU.prototype.sbb16","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","flags_all","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","CPU.prototype.inc","CPU.prototype.dec","CPU.prototype.neg","CPU.prototype.imul_reg16","operand1","operand2","CPU.prototype.imul_reg32","lo","hi","CPU.prototype.do_div32","div_low","div_high","quot","trigger_de","q","div","CPU.prototype.and8","and","CPU.prototype.and16","CPU.prototype.and32","CPU.prototype.or8","or","CPU.prototype.or16","CPU.prototype.or32","CPU.prototype.xor8","xor","CPU.prototype.xor16","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","CPU.prototype.rol8","flag_overflow","CPU.prototype.rol16","CPU.prototype.rol32","CPU.prototype.rcl8","CPU.prototype.rcl16","CPU.prototype.rcl32","CPU.prototype.ror8","CPU.prototype.ror16","CPU.prototype.ror32","CPU.prototype.rcr8","CPU.prototype.rcr16","CPU.prototype.rcr32","CPU.prototype.shl8","CPU.prototype.shl16","CPU.prototype.shl32","CPU.prototype.shr8","CPU.prototype.shr16","CPU.prototype.shr32","CPU.prototype.sar8","CPU.prototype.sar16","CPU.prototype.sar32","CPU.prototype.shrd16","CPU.prototype.shrd32","CPU.prototype.shld16","CPU.prototype.shld32","CPU.prototype.bt_reg","bit_base","bit_offset","CPU.prototype.btc_reg","CPU.prototype.bts_reg","CPU.prototype.btr_reg","CPU.prototype.bt_mem","CPU.prototype.btc_mem","CPU.prototype.btr_mem","CPU.prototype.bts_mem","CPU.prototype.popcnt","v","CPU.prototype.saturate_sw_to_ub","CPU.prototype.saturate_sw_to_sb","CPU.prototype.saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sb","CPU.prototype.saturate_sd_to_ub","CPU.prototype.saturate_ud_to_ub","CPU.prototype.saturate_uw","CPU.prototype.integer_round","rc","rounded","round","CPU.prototype.jmpcc8","condition","imm8","CPU.prototype.jmp_rel16","rel16","current_cs","CPU.prototype.jmpcc16","imm16","jmp_rel16","CPU.prototype.jmpcc32","imm32s","CPU.prototype.cmovcc16","read_e16","write_g16","CPU.prototype.cmovcc32","read_e32s","write_g32","CPU.prototype.setcc","set_e8","loop","CPU.prototype.loop","imm8s","decr_ecx_asize","CPU.prototype.getcf","CPU.prototype.getpf","flag_parity","CPU.prototype.getaf","flag_adjust","CPU.prototype.getzf","CPU.prototype.getsf","flag_sign","CPU.prototype.getof","test_o","test_b","test_z","test_s","test_p","CPU.prototype.test_be","CPU.prototype.test_l","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","CPU.prototype.pop16","get_stack_reg","CPU.prototype.pop32s","CPU.prototype.xchg16r","operand","temp","reg_ax","CPU.prototype.xchg32r","CPU.prototype.lss16","seg","new_reg","new_seg","CPU.prototype.lss32","CPU.prototype.bswap","t16","t32","read_modrm_byte","write_e8","add8","read_write_e8","read_g8","write_e16","add16","read_write_e16","read_g16","write_e32","add32","read_write_e32","read_g32s","write_g8","read_e8","reg_al","or8","or16","or32","table0F_16","table0F_32","adc8","adc16","adc32","sbb8","sbb16","sbb32","and8","and16","and32","segment_prefix_op","old_al","old_cf","old_af","sub8","sub16","sub32","xor8","xor16","xor32","reg_ah","inc","reg_dx","dec","pop16","pop32s","imul_reg16","imul_reg32","test_privileges_for_io","get_reg_asize","flag_direction","PREFIX_MASK_REP","start_count","cycle_counter","MAX_COUNT_PER_CYCLE","phys_dest","port_read8","cont","add_reg_asize","set_ecx_asize","port_read16","single_size","write_aligned16","port_read32","phys_src","port_write8","port_write16","read_aligned16","port_write32","read_aligned32","jmpcc8","test_be","test_l","test_le","tmp","set_e16","set_e32","write_reg_e16","write_reg_e32","xchg16r","xchg32r","far_jump","flag_trap","flags_mask","read_moffs","ds","es","align_mask","in_mmap_range","is_repz","PREFIX_REPZ","data_dest","data_src","reg_cl","reg_dl","reg_bl","reg_ch","reg_dh","reg_bh","op1","op2","rol8","ror8","rcl8","rcr8","shl8","shr8","sar8","rol16","ror16","rcl16","rcr16","shl16","shr16","sar16","rol32","ror32","rcl32","rcr32","shl32","shr32","sar32","ip","lss16","lss32","nesting_level","frame_temp","tmp_ebp","old_vbp","new_bp","new_ebp","cs","far_return","iret","task_switch_test","m32","load_m32","st0","fcom","sti","store_m32","fldenv","fstenv","abs","ftst","isNaN","fxam","Infinity","FPU_C2","tan","atan2","fxtract","st1","fprem_quotient","trunc","sqrt","sin","cos","truncate","fucom","int32","load_m80","store_m80","finit","fcomi","fucomi","m64","load_m64","low_ptr","store_m64","frstor","fsave","m16","TWO_POW_63","st0_low","st0_high","PREFIX_REPNZ","show","neg","target_operand","high_result","result_mod","do_div32","dest_operand_low","dest_operand_high","is_neg","div_is_neg","flag_carry","set_cr0","lar","lsl","task_switch_test_mmx","read_xmm_mem64s","write_xmm64","read_xmm64s","safe_write64","CR4_DE","read_reg_e32s","cr4","CR4_PSE","PSE_ENABLED","CR4_PAE","read_xmm_mem128s","write_xmm128s","PREFIX_66","read_xmm128s","safe_write128","read_mmx_mem64s","res32","res0","res1","write_mmx64s","source1","source2","is_SNaN32","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","IA32_APIC_BASE_MSR","IA32_APIC_BASE_EN","IA32_TIME_STAMP_COUNTER","TSC_RATE","CR4_TSD","MSR_EBC_FREQUENCY_ID","cmovcc16","cmovcc32","destination","source8","destination8","read_mmx_mem32s","destination_low","source16","destination16","destination_high","saturate_sw_to_sb","source64s","source8s","reg_offset","destination8s","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","saturate_sw_to_ub","saturate_sd_to_sw","PREFIX_F3","order","PREFIX_F2","word0_shift","word1_shift","word2_shift","word3_shift","destination128","read_mmx64s","jmpcc16","jmpcc32","setcc","eax","ecx","edx","ebx","bt_mem","read_g16s","bt_reg","read_reg_e16","shld16","shld32","bts_mem","bts_reg","shrd16","shrd32","MXCSR_MASK","new_mxcsr","btr_mem","btr_reg","popcnt","btc_mem","btc_reg","old","m64_low","m64_high","rand","has_rand","bswap","saturate_sd_to_ub","saturate_ud_to_ub","saturate_uw","saturate_sd_to_sb","s","d","CPU.prototype.debug_init","step_mode","ops","all_ops","trace_all","debug.show","el","getElementById","scrollTop","debug.init","get_regs_short","r32_names","line1","line2","dump_regs","dump_regs_short","dump_instructions","get_instructions","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","dump_state","dump_stack","dump_page_directory","dump_gdt_ldt","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","step","run_until","debug.unimpl","logop","debug.logop","debug_interrupt","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","Header","create_struct","magic","class","version0","osabi","abiversion","pad0","pad","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","reduce","ProgramHeader","vaddr","memsz","align","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","sections_headers","Struct","LITTLE_ENDIAN","KeyboardAdapter","keyup_handler","altKey","keys_pressed","handle_code","keydown_handler","blur_handler","key","keydown","keyboard","shiftKey","ctrlKey","keyCode","emu_enabled","target","classList","contains","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","simulate_press","this.simulate_press","ev","simulate_char","this.simulate_char","SHIFT_SCAN_CODE","MouseAdapter","may_handle","mouse","enabled","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","which","mousewheel_handler","wheelDelta","detail","SpeakerAdapter","AudioContext","SpeakerDAC","AudioWorklet","SpeakerWorkletDAC","SpeakerBufferSourceDAC","audio_context","mixer","SpeakerMixer","pcspeaker","PCSpeaker","suspend","resume","warn","create_gain_handler","audio_node","decibels","gain","setValueAtTime","currentTime","sources","Map","gain_right","gain_left","volume_right","volume_left","volume_both","node_treble_left","createBiquadFilter","node_treble_right","frequency","node_bass_left","node_bass_right","node_gain_left","createGain","node_gain_right","node_merger","createChannelMerger","input_left","input_right","connect","connect_source","source_id","disconnect_source","disconnect","set_volume","update","SpeakerMixer.prototype.add_source","source_node","SpeakerMixerSource","has","SpeakerMixer.prototype.set_volume","SpeakerMixer.prototype.update","net_gain_right","destination_left","destination_right","connected_right","connected_left","gain_hidden","node_splitter","createChannelSplitter","SpeakerMixerSource.prototype.update","SpeakerMixerSource.prototype.connect","both","SpeakerMixerSource.prototype.disconnect","SpeakerMixerSource.prototype.set_volume","node_oscillator","createOscillator","mixer_connection","add_source","maxValue","PCSpeaker.prototype.start","worklet_string","worklet","sinc","DACProcessor","Reflect","construct","AudioWorkletProcessor","kernel_size","queue_data","queue_start","queue_end","queue_length","queued_samples","source_buffer_previous","EMPTY_BUFFER","source_buffer_current","source_samples_per_destination","source_block_start","source_time","source_offset","onmessage","self.port.onmessage","event","queue_push","sampleRate","MINIMUM_BUFFER_SIZE","setPrototypeOf","DACProcessor.prototype.process","inputs","outputs","sum0","sum1","convolute_index","get_sample","kernel","samples_needed_per_block","ensure_enough_data","DACProcessor.prototype.kernel","DACProcessor.prototype.get_sample","DACProcessor.prototype.ensure_enough_data","needed","current_length","prepare_next_buffer","DACProcessor.prototype.prepare_next_buffer","queue_shift","sample_count","queue_pos","buffer_count","new_big_buffer_size","new_big_buffer","new_big_buffer_pos","small_buffer","pump","DACProcessor.prototype.pump","QUEUE_RESERVE","DACProcessor.prototype.queue_push","DACProcessor.prototype.queue_shift","registerProcessor","worklet_url","URL","createObjectURL","worklet_blob","Blob","substring","worklet_code","indexOf","lastIndexOf","worklet_code_end","node_processor","node_output","audioWorklet","addModule","then","revokeObjectURL","AudioWorkletNode","this.node_processor.port.onmessage","queue","SpeakerWorkletDAC.prototype.queue","SpeakerWorkletDAC.prototype.pump","buffered_time","rate_ratio","node_lowpass","AUDIOBUFFER_MINIMUM_SAMPLING_RATE","SpeakerBufferSourceDAC.prototype.queue","block_duration","createBuffer","buffer_data0","getChannelData","buffer_data1","buffer_index","copyToChannel","createBufferSource","current_time","current_silence_duration","target_silence_duration","DAC_QUEUE_RESERVE","SpeakerBufferSourceDAC.prototype.pump","SerialAdapter","element","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","blur","text_new_line","show_char","this.show_char","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","url","socket","send_queue","last_connect_attempt","reconnect_interval","NetworkAdapter.prototype","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","readyState","WebSocket","binaryType","onopen","onclose","onerror","NetworkAdapter.prototype.send","load_file","filename","options","http","XMLHttpRequest","method","as_text","responseType","headers","header_names","setRequestHeader","range","http.onload","response","progress","onprogress","http.onprogress","load_file_nodejs","require","err","fd","o","encoding","AsyncXHRBuffer","block_size","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","v86util.load_file","v86util.AsyncXHRBuffer","v86util.AsyncFileBuffer","v86util.SyncFileBuffer","determine_size","path","cb","getResponseHeader","match","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","filereader","FileReader","PART_SIZE","readAsArrayBuffer","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","V86Starter","put_on_settings","disk_images","fdb","initial_state","fs9p_json","add_file","files_to_load","loadable","async","File","emulator","OnJSONLoaded","cpu_is_running","adapter_bus","emulator_bus","network_adapter","keyboard_adapter","mouse_adapter","screen_adapter","DummyScreenAdapter","serial_adapter","image_names","fs_url","base_url","FS","starter","file_index","file_count","file_name","lengthComputable","loaded","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","add_listener","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","instruction_counter","get_instruction_counter","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","keyboard_send_scancodes","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","keyboard_send_text","V86Starter.prototype.keyboard_send_text","string","screen_make_screenshot","V86Starter.prototype.screen_make_screenshot","screen_set_scale","V86Starter.prototype.screen_set_scale","sx","sy","screen_go_fullscreen","V86Starter.prototype.screen_go_fullscreen","focus_element","getElementsByClassName","focus","lock_mouse","V86Starter.prototype.lock_mouse","body","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","serial_send_bytes","V86Starter.prototype.serial_send_bytes","create_file","V86Starter.prototype.create_file","parts","split","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","read_file","V86Starter.prototype.read_file","get_mem","V86Starter.prototype.get_mem","graphic_buffer","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","FS.prototype.AddEvent","OnEvent","STATUS_OK","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","JSONFS_VERSION","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","ifmt","S_IFMT","JSONFS_IDX_TARGET","updatedir","LoadDir","children","S_IFREG","STATUS_ON_SERVER","S_IFLNK","FS.prototype.LoadFile","STATUS_LOADING","LoadBinaryResource","GetFullPath","HandleEvent","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","FS.prototype.CreateInode","FS.prototype.CreateDirectory","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","UTF8.UTF8Length","LoadFile","FS.prototype.CloseInode","STATUS_INVALID","FS.prototype.Rename","olddirid","newdirid","oldid","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetFullPath","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","replace","FS.prototype.PrepareCAPs","OnSuccess","OnError","onreadystatechange","req.onreadystatechange","arrayBuffer","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","output","val","utf8converter","UTF8StreamToUnicode","Put","stream","ofs","this.Put"]
}
